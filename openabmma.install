<?php
// vim:sts=2:sw=2:filetype=php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the openabmma module.
 */


/**
 * Implementation of hook_schema().
 */
function openabmma_schema() {
	
	$schema['openabm_framework'] = array(
    'description' => t('Table of model development platforms'),
    'fields' => array(
      'id' => array(
        'description' => t('Key id of platform'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('Name of platform'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'url' => array(
        'description' => t('URL to platform website'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
				'default' => NULL,
      ),
    ),
    'primary key' => array('id'),
  );
	
	$schema['openabm_license'] = array(
    'description' => t('Table of software licenses'),
    'fields' => array(
      'id' => array(
        'description' => t('Key id of license'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('Name of the software license'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'license_text' => array(
        'description' => t('Text of the license agreement'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'url' => array(
        'description' => t('URL to license website'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
				'default' => NULL,
      ),
    ),
    'primary key' => array('id'),
  );

	$schema['openabm_model'] = array(
	  'description' => t('Master table of models'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id for model'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'owner_uid' => array(
	      'description' => t('Reference user id of the model owner'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'name' => array(
	      'description' => t('Name of the model, formatted for URL access'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	    'title' => array(
	      'description' => t('Descriptive name of the model'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	    'replicators' => array(
	      'description' => t('List of authors of original model'),
	      'type' => 'text',
	      'not null' => TRUE,
				'default' => '',
	    ),
	    'replicatedModel' => array(
	      'description' => t('Whether this model is replicated (0/1)'),
	      'type' => 'int',
	      'size' => 'tiny',
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'reference' => array(
	      'description' => t('Reference citation or URL of original model'),
	      'type' => 'text',
	      'not null' => TRUE,
				'default' => '',
	    ),
	  ),
	  'primary key' => array('id'),
	);

	$schema['openabm_model_keywords'] = array(
	  'description' => t('Table of model keywords'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id for keyword'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'model_id' => array(
	      'description' => t('Reference id of model associated to keyword'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'keyword' => array(
	      'description' => t('Text keyword'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	  ),
	  'primary key' => array('id'),
	  'indexes' => array(
	    'model_id' => array('model_id'),
	  ),
	);

	$schema['openabm_model_language'] = array(
	  'description' => t('Table of programming languages used for modelling'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id of programming language'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => t('Name of programming language'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	    'url' => array(
	      'description' => t('URL to reference website'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	  ),
	  'primary key' => array('id'),
	);

	$schema['openabm_model_member'] = array(
	  'description' => t('Table of users assigned as members of model projects'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Member key id'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'project_id' => array(
	      'description' => t('Reference id of model project'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'user_id' => array(
	      'description' => t('Reference id of member user'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'role' => array(
	      'description' => t("Reference id of member\'s project role"),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	  ),
	  'primary key' => array('id'),
	  'indexes' => array(
	    'project_id' => array('project_id'),
	    'role' => array('role'),
	  ),
	);

	$schema['openabm_model_version'] = array(
	  'description' => t('Master table of all saved versions of all models'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id for saved version'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'version_num' => array(
	      'description' => t('Version number used by model updater'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'model_id' => array(
	      'description' => t('Reference id to model associated with this version data'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'description' => array(
	      'description' => t('Text description of saved version'),
	      'type' => 'text',
	      'size' => 'medium',
	      'not null' => TRUE,
	    ),
	    'model_language_id' => array(
	      'description' => t('Reference id of programming language used'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
				'default' => 0,
	    ),
	    'other_language' => array(
	      'description' => t('Name of programming language if Other language selected'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	    ),
	    'language_version' => array(
	      'description' => t('Version number of programming language used'),
	      'type' => 'varchar',
	      'length' => '10',
	      'not null' => TRUE,
	    ),
			'os_id' => array(
	      'description' => t('Key ID of Operating System'),
	      'type' => 'int',
				'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'other_os' => array(
	      'description' => t('Name of other Operating System used'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
			'framework_id' => array(
	      'description' => t('Key ID of modeling platform used'),
	      'type' => 'int',
				'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'other_framework' => array(
	      'description' => t('Name of other modeling platform used'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	    'reference_text' => array(
	      'description' => t('Text of reference sources associated with model version'),
	      'type' => 'text',
	      'not null' => TRUE,
				'default' => '',
	    ),
	    'examples' => array(
	      'description' => t('Text of example models'),
	      'type' => 'text',
	      'not null' => TRUE,
	    ),
	    'submittedReview' => array(
	      'description' => t('Whether this model version has been submitted for review (0/1)'),
	      'type' => 'int',
	      'size' => 'tiny',
				'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'visible' => array(
	      'description' => t('Whether this model version is publicly viewable (0/1)'),
	      'type' => 'int',
	      'size' => 'tiny',
				'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'date_modified' => array(
	      'description' => t('Date & time when this model version was last modified'),
	      'type' => 'datetime',
	      'not null' => FALSE,
	    ),
	    'run_conditions' => array(
	      'description' => t('Text notes on how to run model'),
	      'type' => 'text',
	      'not null' => TRUE,
	    ),
	    'license_id' => array(
	      'description' => t('Reference id of license used'),
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
				'default' => 0,
	    ),
	    'os_version' => array(
	      'description' => t('Version number of Operating System'),
	      'type' => 'varchar',
	      'length' => '10',
	      'not null' => TRUE,
	    ),
	    'framework_version' => array(
	      'description' => t('Version number of modelling framework'),
	      'type' => 'varchar',
	      'length' => '10',
	      'not null' => TRUE,
	    ),
	  ),
	  'primary key' => array('id'),
	  'indexes' => array(
	    'license_id' => array('license_id'),
	    'model_id' => array('model_id'),
	    'model_language_id' => array('model_language_id'),
	  ),
	);

	$schema['openabm_os'] = array(
	  'description' => t('Reference table of Operating Systems.'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id for OS.'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => t('OS name'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	  ),
	  'primary key' => array('id'),
	);

  $schema['openabm_role'] = array(
    'description' => t('Reference table of model roles with role ids.'),
    'fields' => array(
      'id' => array(
        'description' => t('Key id for role.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('Role name'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
  );
 
  return $schema;
}

function openabmma_install() {
    drupal_set_message( t('Beginning installation of openabmma module') );
    drupal_install_schema('openabmma');
}

function openabmma_update_6020() {
	$ret = array();
	$items[] = db_change_field($ret, 'openabm_model', 'replicators', 'replicators', array('type' => 'text', 'not null' => TRUE, 'default' => ''));
	$items[] = db_change_field($ret, 'openabm_model', 'replicatedModel', 'replicatedModel', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE));
	$items[] = db_change_field($ret, 'openabm_model', 'reference', 'reference', array('type' => 'text', 'not null' => TRUE, 'default' => ''));
	
	$items[] = db_change_field($ret, 'openabm_model_version', 'language_version', 'language_version', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
	$items[] = db_change_field($ret, 'openabm_model_version', 'model_language_id', 'model_language_id', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
	$items[] = db_add_field($ret, 'openabm_model_version', 'os_id', array('description' => t('Key ID of Operating System'), 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,));
	$items[] = db_add_field($ret, 'openabm_model_version', 'framework_id', array('description' => t('Key ID of modeling platform'), 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,));
	$items[] = db_change_field($ret, 'openabm_model_version', 'os', 'other_os', array('type' => 'varchar', 'length' => 255,));
	$items[] = db_change_field($ret, 'openabm_model_version', 'framework', 'other_framework', array('type' => 'varchar', 'length' => 255,));
	$items[] = db_change_field($ret, 'openabm_model_version', 'reference_text', 'reference_text', array('type' => 'text', 'not null' => TRUE, 'default' => ''));
	$items[] = db_change_field($ret, 'openabm_model_version', 'examples', 'examples', array('type' => 'text', 'not null' => TRUE, 'default' => ''));
	$items[] = db_change_field($ret, 'openabm_model_version', 'submittedReview', 'submittedReview', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
	$items[] = db_change_field($ret, 'openabm_model_version', 'visible', 'visible', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
	$items[] = db_change_field($ret, 'openabm_model_version', 'run_conditions', 'run_conditions', array('type' => 'text', 'not null' => TRUE,));
	$items[] = db_change_field($ret, 'openabm_model_version', 'license_id', 'license_id', array('type' => 'int', 'not null' => TRUE, 'default' => 0));
	$items[] = db_change_field($ret, 'openabm_model_version', 'os_version', 'os_version', array('type' => 'varchar', 'length' => 10, 'not null' => TRUE,));
	$items[] = db_change_field($ret, 'openabm_model_version', 'framework_version', 'framework_version', array('type' => 'varchar', 'length' => 10, 'not null' => TRUE,));
	
	$items[] = db_create_table($ret, 'openabm_os', array(
	  'description' => t('Reference table of Operating Systems.'),
	  'fields' => array(
	    'id' => array(
	      'description' => t('Key id for OS.'),
	      'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => t('OS name'),
	      'type' => 'varchar',
	      'length' => '255',
	      'not null' => TRUE,
	      'default' => '',
	    ),
	  ),
	  'primary key' => array('id'),
	));

	return $ret;
}

function openabmma_update_6021() {
	$ret = array();
	
	$record = new stdClass();
	$record->name = 'Linux';
	$items[] = drupal_write_record('openabm_os', $record);
	
	$record->name = 'MacOS';
	$items[] = drupal_write_record('openabm_os', $record);
	
	$record->name = 'Windows';
	$items[] = drupal_write_record('openabm_os', $record);
	
	$record->name = 'Platform Independent';
	$items[] = drupal_write_record('openabm_os', $record);
	
	$record->name = 'Other';
	$items[] = drupal_write_record('openabm_os', $record);

	$items[] = update_sql("UPDATE {openabm_model_version} SET os_id = 1 WHERE other_os = 'Linux'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET os_id = 2 WHERE other_os = 'Mac'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET os_id = 3 WHERE other_os = 'Windows'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET os_id = 4 WHERE other_os = 'Platform Independent'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET os_id = 5 WHERE other_os = 'Other'");

	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 1 WHERE other_framework = 'Ascape 5'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 2 WHERE other_framework = 'Breve'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 3 WHERE other_framework = 'Comas'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 4 WHERE other_framework = 'DEVSJAVA'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 5 WHERE other_framework = 'Ecolab'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 6 WHERE other_framework = 'Mason'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 7 WHERE other_framework = 'MASS'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 8 WHERE other_framework = 'MobiDyc'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 9 WHERE other_framework = 'NetLogo'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 10 WHERE other_framework = 'Repast'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 11 WHERE other_framework = 'Sesam'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 12 WHERE other_framework = 'StarLogo'");
	$items[] = update_sql("UPDATE {openabm_model_version} SET framework_id = 13 WHERE other_framework = 'Swarm'");

	return $ret;
}
