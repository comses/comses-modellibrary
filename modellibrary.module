<?php
/*
    CoMSES Computational Model Library
    Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
        Modeling for the SocioEcological Sciences (CoMSES Net)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

/**
   * @file
   * This is the new NSF Model Library module for OpenABM.org. This 
   * implementation stores models as nodes within Drupal's node system. 
   * This is accomplished using CCK to create custom fields and Views
   * to organize the database queries used to retrieve and display that 
   * data.  By making use of CCK, Views, and the other required support
   * modules, we are able to leverage the labor of those other modules
   * rather than reinventing many wheels.
   *
   * Sometimes however, accessing the data handled by those helper modules
   * require somewhat convoluted interfaces or private APIs.  This should
   * not pose a problem unless those modules undergo a major revision, and
   * their APIs change as a result (much like what happens when new Drupal
   * major version changes are released.  It is important to keep an eye out
   * for any major changes to the module dependencies listed on the Module
   * Admin screen.  Major changes should be tested on a test site before
   * deploying to the live server to make sure no changes are needed in
   * Model Library first.
   *
   * Theming for the pages used by this module, including the Views displays
   * used here, are covered by a CSS file and templates.  The CSS is located
   * in modellibrary/includes/ and the templates are in modellibrary/tpl/.
   * These files are registered below with the Drupal Theming Engine and
   * Views.
   */

/* Load module include files */
module_load_include('inc', 'modellibrary', 'includes/modellibrary.add_form');
module_load_include('inc', 'modellibrary', 'includes/modellibrary.helper.functions');


/**
 * Implementation of hook_help()
 */
function modellibrary_help($path, $arg) {
  if ($path == 'admin/help#modellibrary') {
    $txt = 'The NSF Model Library module provides an interface for accessing the OpenABM model library.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_init()
 */
function modellibrary_init() {
  drupal_add_css(drupal_get_path('module', 'modellibrary') .'/includes/modellibrary.css');
}

/**
 * Implementation hook_views_api()
 *
 * This function registers our coded Views stored in modellibrary/includes.
 * This allows the module to autoinstall a default set of views in the 
 * Views system when the module is activated.  The drawback is that any changes
 * then made to the views must be re-exported to the module to ensure if it
 * is ever reinstalled into a new installation, the default views are correct.
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'modellibrary') . '/includes',
  );
}


/**
 * Implementation of hook_theme()
 * 
 * Theme templates for this modules are stored in modellibrary/tpl.
 * We register them here so the theming engine know to use them (plus
 * it is tidier to keep the tpl files in this module rather than over
 * in the theme directory.)
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_theme($existing) {
  return array(
    'views_view_fields__modelversion__page_7' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--modelversion--page-7',
      'original hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__model__page_1' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--model--page-1',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__model__page_2' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--model--page-2',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__model__page_5' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--model--page-5',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__modelversion' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--modelversion',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view__model__block_1' => array(
      'arguments' => array('view' => NULL),
      'template' => 'views-view--model--block-1',
      'original hook' => 'views_view',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_fields__model__block_1' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--model--block-1',
      'original hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
  );
}

/**
 * Implementation of hook_imagecache_default_presets().
 *
 * Autoinstall the two imagecache presets used by modellibrary. 
 * Technically, there will probably be some errors when trying to install
 * this module in a clean system, because the 'Preview' and 'Thumbnail'
 * presets each pass off to their Landscape and Portrait variants by their
 * ImageCache ids (e.g. 'portrait' => '3'), which will probably be incorrect
 * if any other presets have previosuly been created. In that case, the
 * preset ids should be offset by the appropriate amount. (Current ids are
 * calculated assuming 'Thumbnail' is the first preset in the system = 1.) 
 */
function modellibrary_imagecache_default_presets() {
  $presets = array();
  $presets['Thumbnail'] = array (
    'presetname' => 'Thumbnail',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_aspect',
        'data' => 
        array (
          'portrait' => '3',
          'landscape' => '2',
          'ratio_adjustment' => '1',
        ),
      ),
    ),
  );

  $presets['Thumbnail-Landscape'] = array (
    'presetname' => 'Thumbnail-Landscape',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '100',
          'height' => '',
          'upscale' => 0,
        ),
      ),
      1 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_definecanvas',
        'data' => 
        array (
          'RGB' => 
          array (
            'HEX' => 'DDDDDD',
          ),
          'under' => 1,
          'exact' => 
          array (
            'width' => '100',
            'height' => '100',
            'xpos' => 'center',
            'ypos' => 'center',
          ),
          'relative' => 
          array (
            'leftdiff' => '',
            'rightdiff' => '',
            'topdiff' => '',
            'bottomdiff' => '',
          ),
        ),
      ),
      2 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      3 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '16',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  $presets['Thumbnail-Portrait'] = array (
    'presetname' => 'Thumbnail-Portrait',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '-10',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '',
          'height' => '100',
          'upscale' => 0,
        ),
      ),
      1 => 
      array (
        'weight' => '-9',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_definecanvas',
        'data' => 
        array (
          'RGB' => 
          array (
            'HEX' => 'DDDDDD',
          ),
          'under' => 1,
          'exact' => 
          array (
            'width' => '100',
            'height' => '100',
            'xpos' => 'center',
            'ypos' => 'center',
          ),
          'relative' => 
          array (
            'leftdiff' => '',
            'rightdiff' => '',
            'topdiff' => '',
            'bottomdiff' => '',
          ),
        ),
      ),
      2 => 
      array (
        'weight' => '-8',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      3 => 
      array (
        'weight' => '-7',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '16',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  $presets['Preview'] = array (
    'presetname' => 'Preview',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_aspect',
        'data' => 
        array (
          'portrait' => '6',
          'landscape' => '5',
          'ratio_adjustment' => '1',
        ),
      ),
    ),
  );

  $presets['Preview-Landscape'] = array (
    'presetname' => 'Preview-Landscape',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '250',
          'height' => '',
          'upscale' => 0,
        ),
      ),
      1 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_definecanvas',
        'data' => 
        array (
          'RGB' => 
          array (
            'HEX' => 'DDDDDD',
          ),
          'under' => 1,
          'exact' => 
          array (
            'width' => '250',
            'height' => '250',
            'xpos' => 'center',
            'ypos' => 'center',
          ),
          'relative' => 
          array (
            'leftdiff' => '',
            'rightdiff' => '',
            'topdiff' => '',
            'bottomdiff' => '',
          ),
        ),
      ),
      2 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      3 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '16',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  $presets['Preview-Portrait'] = array (
    'presetname' => 'Preview-Portrait',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '',
          'height' => '250',
          'upscale' => 1,
        ),
      ),
      1 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_definecanvas',
        'data' => 
        array (
          'RGB' => 
          array (
            'HEX' => 'DDDDDD',
          ),
          'under' => 1,
          'exact' => 
          array (
            'width' => '250',
            'height' => '250',
            'xpos' => 'center',
            'ypos' => 'center',
          ),
          'relative' => 
          array (
            'leftdiff' => '',
            'rightdiff' => '',
            'topdiff' => '',
            'bottomdiff' => '',
          ),
        ),
      ),
      2 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      3 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '16',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  return $presets;
}

/**
 * Implementation of hook_menu()
 */
function modellibrary_menu() {
  global $user;

  // This item provides a default menu URL that redirects to the latest
  // model version.
  $items['model/%'] = array(
    'title' => 'View Model',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('model_redirect_view', array(1)),
    'access arguments' => array('view model'),
    'type' => MENU_CALLBACK,
  );

  // Legacy url; redirect to correct url.
  $items['model-archive/%'] = array(
    'title' => 'View Model',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('model_redirect_view', array(1)),
    'access arguments' => array('view model'),
    'type' => MENU_CALLBACK,
  );

  // This is the link for adding a new model
  $items['model/add'] = array(
    'title' => 'Add Model',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('model_add_form', array(1)),
    'access arguments' => array('create model'),
    'type' => MENU_CALLBACK,
  );

  // This is the official link for editing a model.
  $items['model/%/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('model_add_form', array(1, 2)),
    'access callback' => 'model_edit_access',
    'access arguments' => array('edit', array(1), 'edit own model'),
    'type' => MENU_CALLBACK,
  );

  // This is the link for enabling (publishing) a model.
  $items['model/%/enable'] = array(
    'title' => 'Publish',
    'description' => "",
    'page callback' => 'enable_model',
    'page arguments' => array(array(1)),
    'access callback' => 'model_edit_access',
    'access arguments' => array('edit', array(1), 'edit own model'),
    'type' => MENU_CALLBACK,
  );

  // This is the link for disabling a model.
  $items['model/%/disable'] = array(
    'title' => 'Disable',
    'description' => "",
    'page callback' => 'disable_model',
    'page arguments' => array(array(1)),
    'access callback' => 'model_edit_access',
    'access arguments' => array('edit', array(1), 'edit own model'),
    'type' => MENU_CALLBACK,
  );

  // This is the base menu link for the model/%nid/version/%num menu tabs.
  // It forwards to the latest model version at: model/%nid/version/%num/view
/*  $items['model/%/version/%/view'] = array(
    'title' => 'View',
    'description' => "",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('view model'),
    'weight' => -5,
  ); */

  /*
   * Menu: model/%nid/version/%num/view
   * The default menu tab is provided by Views.
   */

  // This is the Edit model tab which redirects to the official edit address.
  $items['model/%/version/%/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('model_redirect_edit', array(1, 3)),
    'access callback' => 'model_edit_access',
    'access arguments' => array('edit', array(1), 'edit own model'),
    'type' => MENU_LOCAL_TASK,
  );

 /* The following menu items are generated as menu tabs 
  * (type = MENU_LOCAL_TASK). Tabs require a base menu item or page
  * ('models/') plus a tab menu item that corresponds to that default
  * page.  Additionally, there must be at least two tab items defined
  * in order for the tabs to display.
  *
  * In this case, the base menu item is generated by Views (models/).
  * One tab must be created to be used when the base page is 
  * displayed ('models/browse') and that menu tab is also set as the
  * default tab (MENU_DEFAULT_LOCAL_TASK). Any additional tabs to be
  * displayed on the page are then created.
  */
  $items['models/browse'] = array(
    'title' => 'Browse',
    'description' => 'Click to browse the model archive.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'weight' => 0,
  );

  $items['models/mymodels'] = array(
    'title' => 'My Models',
    'description' => 'Click to view your models.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'redirect_to_user_models',
    'access callback' => 'user_is_logged_in',
    'weight' => 2,
  );

  $items['models/search'] = array(
    'title' => 'Search',
    'description' => 'Click to search for a model.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('search/apachesolr_search/', 'filters=type%3Amodel&retain-filters=1'),
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['models/add'] = array(
    'title' => 'Add',
    'description' => 'Click to add a new model.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'add_model_if_permitted',
    'access callback' => TRUE,
    'weight' => 1,
  );

  /*
  $items['models/add/biblio'] = array(
    'title' => 'Add Biblio Reference',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('model/add'),
    //'access callback' => TRUE,    
    //'access callback' => 'user_access',
    'access arguments' => array('create model'),
    'weight' => 3,
  );
   */

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function modellibrary_menu_alter(&$items) {
  $items['user/%user/view']['title'] = 'Profile';

  $items['download_count']['file'] = 'download_count.pages.inc';
  $items['download_count']['file path'] = drupal_get_path('module', 'modellibrary') .'/includes';
}

/**
 * Implementation of hook_perm().
 */
function modellibrary_perm() {
  return array(
    'view model',
    'create model', 
    'edit own model', 'edit any model', 
    'delete own model', 'delete any model',
    'administer models'
  );
}
 
/**
 * Implementation of hook_access().
 */
function model_edit_access($op, $node, $account) {
  global $user;

  $view_args = array(arg($node[0])); // The display we are using takes an argument
  $display_id = 'page_6';   // We are accessing the View Model display...
  $view = views_get_view('model'); // ...from the model View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view

  // Grant access if the user is the root user, if the user has 'edit any model' access, or
  // has 'edit own model' access AND is the model's owner.
  return (($user->uid == 1) || user_access('edit any model') || (user_access('edit own model') && $user->uid == $view->render_field('uid', 0)));
}

/**
 * Implementation of hook_apachesolr_search_result_alter()
 *
 * This function alters values in each individual result generated by the Apache
 * Solr search engine. Changes made here occur prior to final processing by
 * hook_apachesolr_process_results().
 */
function modellibrary_apachesolr_search_result_alter(&$doc) {
  if ($doc->type == 'model') {
    // replace default node path with Model Library model URL
    $doc->path = 'model/'. $doc->nid;
  }

  return $doc;
}

function add_model_if_permitted() {
  global $user;
  $item = menu_get_item('model/add');

  if ($user->uid == 1 || $item['access']) {
    drupal_goto('model/add');
  }
  else {
    drupal_set_message('Please <a style="font-weight: bold;" href="/user">log in</a> to add a new model.');
    drupal_goto('models/browse');
  }
}

function redirect_to_user_models() {
  global $user;

  drupal_goto('user/'. $user->uid .'/models');
}

function enable_model() {
  $modelnid = arg(1);
  $model = node_load($modelnid);
  $version = load_modelversion($modelnid);

  // Now we need to determine whether this model meets publication standard
  // If not, then the published (status) and Enabled flags are turned off.
  // If so, then the Published flag is turned on.  The model owner is only allowed to
  // Enable the model once it is Published.

  // 10/25/2011: Logic got squirrely on ensuring if and only if Replicated? = True, then Reference must also have text.  So temporarily removed until
  // Biblio tie-in is finished.
  if ($version->field_modelversion_license[0]['value'] > '') {
    $model->status = 1;
    $model = node_submit($model);
    node_save($model);
  } 

  // Make sure this isn't occurring on the Dev server, before we post to Twitter
  // TODO: perhaps change to a system variable that we toggle, Enable/Disable Twitter
  global $base_root;
  if ($base_root != 'http://dev.comses.asu.edu') {
    modellibrary_post_twitter($model);
  }
  drupal_goto('model/'. $modelnid);
}

function disable_model() {
  $modelnid = arg(1);
  $model = node_load($modelnid);

  $model->status = 0;
  $model = node_submit($model);
  node_save($model);

  drupal_goto('model/'. $modelnid);
}

/*
 * Function for posting models to OpenABM-CoMSES Twitter account.
 * This code is adapted from the Twitter Post module
 */
function modellibrary_post_twitter($node) {
  module_load_include('inc', 'twitter');
  $openabm_twitter = 437897011; // uid for the openabm_comses Twitter account
  $twitter_account = twitter_account_load($openabm_twitter);

  $status = 'New Model: '. $node->title .' '. twitter_shorten_url(url('model/'. $node->nid, array('absolute' => TRUE)));

  try {
    $result = twitter_set_status($twitter_account, $status);
    drupal_set_message(t('Successfully posted to Twitter'));
  }
  catch (TwitterException $e) {
    drupal_set_message(t('An error occurred when posting to twitter: %code %error',
      array('%code' => $result->code, '%error' => $result->error)), 'warning');
  }
}

function cleanmodels() {
  $query = "SELECT n.nid FROM {node} n WHERE n.type = 'model' ORDER BY n.nid";
  $results = db_query($query);

  while ($nid = db_result($results)) {
    $modelnid = $nid;

    $model = node_load($modelnid);
    $version = load_modelversion($modelnid);

watchdog('modellibrary', 'modellibrary.module (472): code_fid: '. $version->field_modelversion_code_fid, NULL, WACHDOG_INFO);

    if (($model->field_model_replicated[0]['value'] == 1 && $model->field_model_reference[0]['value'] == "") || $version->field_modelversion_license[0]['value'] == '' || $version->field_modelversion_code_fid == '' || $version->field_modelversion_documentation_fid == '') {
      $model->status = 0;
      $model->field_model_enabled[0]['value'] = 0;
    }
    else {
      $model->status = 1;
      $model->field_model_enabled[0]['value'] = 1;
    } 
    $model = node_submit($model);
    node_save($model);
  }

  drupal_goto('models/browse');
}

function model_redirect_view() {
  // We need to parse the url arguments to check whether a text URI has been entered
  // or the model NID. For backwards compatibility, an old-style URL with the
  // model URI must be converted to the current NID-format URL.

  $arg = arg(1);

  if (preg_match("/^[+]?\d*$/", $arg)) { 
    // The model argument is numeric, thus a model NID

    // The following block programmatically executes a Views display
    // First we need to set the arguments to be passed to Views
    $view_args = array($arg); // The display we are using takes an argument
    $display_id = 'page_1';   // We are accessing the Latest Version display...
    $view = views_get_view('modelversion'); // ...from the modelversion View
    $view->set_arguments($view_args); // Send Views the arguments it needs
    $view->set_display($display_id);  // and tell it which display we are accessing
    $view->pre_execute(); // run any preprocessing
    $view->execute(); // then execute the view

    // Note that execute() doesn't actually output the View, it just runs the
    // database queries.  However, it does set the page title based on the Title
    // setting in the View display.  So if we were going to be displaying data
    // on a page, we would have to override the page title if we didn't like
    // the View title.

    // render_field() actually fully renders the field with any widgets configured
    // for that field.  In this case, we are just retrieving the Version Number
    // which is rendered as plain text.  We could also retrieve the raw content
    // from within the View result, but for most purposes we don't want that
    // because that data hasn't been preprocessed, filtered, and doesn't provide
    // any widget functionality.
    drupal_goto('model/'. $arg .'/version/'. $view->render_field('field_modelversion_number_value', 0) .'/view', NULL, NULL, 301);
  }

  else {
    // The model argument is a text URI
    $view_args = array($arg); // The display we are using takes an argument
    $display_id = 'page_2';   // We are accessing the Latest Version display...
    $view = views_get_view('modelversion'); // ...from the modelversion View
    $view->set_arguments($view_args); // Send Views the arguments it needs
    $view->set_display($display_id);  // and tell it which display we are accessing
    $view->pre_execute(); // run any preprocessing
    $view->execute(); // then execute the view

    drupal_goto('model/'. $view->render_field('field_modelversion_modelnid_value', 0) .'/version/'. $view->render_field('field_modelversion_number_value', 0) .'/view');
  }
}

function model_redirect_edit() {
  $modelnid = arg(1);
  drupal_goto('model/'. $modelnid .'/edit');
}

/**
 * Implementation of hook_form_alter
 *
 * This alters the Body field on all site forms so when the field is selected, a
 * tooltip is displayed with information on using Markdown for formatting content.
 * The goal was to make Markdown more visible as an option to the site users.
 * This isn't Model Library specific, so really doesn't belong here, but I
 * didn't want to create a new module *just* for this. (Comment added: 9/28/2012 NDR)
 */
function modellibrary_form_alter(&$form, &$form_state, $form_id) {
  #$form['title']['#description'] = '<p>' . t('Enter a title for the '. $form['type']['#value'] .' item.') . '</p>';
  $form['body_field']['body']['#description'] = '<p>' . t('<p>Use Markdown syntax to easily format text.</p><p>Quick Tips:</p><ul><li>Two or more spaces at a line\'s end = Line break</li><li>Double returns = Paragraph</li><li>*Single asterisks* or _single underscores_ = <em>Emphasis</em></li><li>**Double** or __double__ = <strong>Strong</strong></li><li>This is [a link](http://the.link.example.com "The optional title text")</li><li>* Item = Unordered Lists</li><li>1. Item = Ordered Lists</li></ul><p>For complete details on the Markdown syntax, see the <a href="http://daringfireball.net/projects/markdown/basics">Markdown documentation</a> and <a href="http://michelf.com/projects/php-markdown/extra/">Markdown Extra documentation</a> for tables, footnotes, and more.</p>') . '</p>';
}
