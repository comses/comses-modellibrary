<?php
/** @file modellibrary.module
 *
 *  CoMSES Computational Model Library
 *  Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
 *      Modeling for the SocioEcological Sciences (CoMSES Net)
 *  
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/* Load module include files */
module_load_include('inc', 'modellibrary', 'includes/modellibrary.add_form');
module_load_include('inc', 'modellibrary', 'includes/modellibrary.helper.functions');

/**
 * Implementation of hook_help()
 */
function modellibrary_help($path, $arg) {
  if ($path == 'admin/help#modellibrary') {
    $txt = 'The CoMSES Computational Model Library module provides an interface for accessing the OpenABM model library. ';
    return '<p>' . t($txt) . '</p>';
  }
}

/**
 * Implementation of hook_init()
 */
function modellibrary_init() {
  drupal_add_css(drupal_get_path('module', 'modellibrary') . '/includes/modellibrary.css');
}

/**
 * Implementation hook_views_api()
 *
 * This function registers our coded Views stored in modellibrary/includes.
 * This allows the module to autoinstall a default set of views in the 
 * Views system when the module is activated.  The drawback is that any changes
 * then made to the views must be re-exported to the module to ensure if it
 * is ever reinstalled into a new installation, the default views are correct.
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'modellibrary') . '/includes',
  );
}

/**
 * Implementation of hook_theme()
 * 
 * Theme templates for this modules are stored in modellibrary/tpl.
 * We register them here so the theming engine know to use them (plus
 * it is tidier to keep the tpl files in this module rather than over
 * in the theme directory.)
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_theme($existing, $type, $theme, $path) {
  $module_path = drupal_get_path('module', 'modellibrary');

  $themes['views_view_fields__model_library__page_3'] = array(
    'template' => 'views-view-fields--model-library--page-3',
    'path' => $module_path . '/tpl',
    'base hook' => 'views_view_fields',
    'type' => 'module',
    'theme_path' => $module_path,
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
    ),
  );

  $themes['views_view_table__model_library__page'] = array(
    'template' => 'views-view-table--model-library--page',
    'path' => $module_path . '/tpl',
    'base hook' => 'views_view_table',
    'type' => 'module',
    'theme_path' => $module_path,
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_table',
    ),
  );

  $themes['views_view_table__model_library__page_1'] = array(
    'template' => 'views-view-table--model-library--page-1',
    'path' => $module_path . '/tpl',
    'base hook' => 'views_view_table',
    'type' => 'module',
    'theme_path' => $module_path,
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_table',
    ),
  );

  return $themes;
}

/**
 * Implementation of hook_menu()
 */
function modellibrary_menu() {
  global $user;

  // This item provides a default menu URL that redirects to the latest
  // model version.
  $items['model/%'] = array(
    'title' => 'View Model',
    'description' => "",
    'page callback' => 'modellibrary_redirect_view',
    'page arguments' => array(1),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('view model')),
    'type' => MENU_CALLBACK,
  );

  // Legacy url; redirect to correct url.
  $items['model-archive/%'] = array(
    'title' => 'View Model',
    'description' => "",
    'page callback' => 'modellibrary_redirect_view',
    'page arguments' => array(1),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('view model')),
    'type' => MENU_CALLBACK,
  );

  // This is the link for adding a new model
  $items['model/%ctools_js/add'] = array(
    'title' => 'Add Model',
    'description' => "",
    'page callback' => 'modellibrary_wizard',
    'page arguments' => array(1),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('create model')),
    'type' => MENU_CALLBACK,
  );

  // This is the official link for editing a model.
  $items['model/%/%ctools_js/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'modellibrary_wizard',
    'page arguments' => array(2),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('edit any model', 'edit own model')),
    'type' => MENU_CALLBACK,
  );

  // This is the link for enabling (publishing) a model.
  $items['model/%/%ctools_js/publish'] = array(
    'title' => 'Publish',
    'description' => "",
    'page callback' => 'modellibrary_publish_confirm',
    'page arguments' => array(1,2),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('edit any model', 'edit own model')),
    'type' => MENU_CALLBACK,
  );

  // This is the link for disabling a model.
#  $items['model/%/disable'] = array(
#    'title' => 'Disable',
#    'description' => "",
#    'page callback' => 'disable_model',
#    'page arguments' => array(array(1)),
#    'access callback' => 'modellibrary_edit_access_callback',
#    'access arguments' => array(array('edit any model', 'edit own model')),
#    'type' => MENU_CALLBACK,
#  );


 /* The following menu items are generated as menu tabs 
  * (type = MENU_LOCAL_TASK). Tabs require a base menu item or page
  * ('models/') plus a tab menu item that corresponds to that default
  * page.  Additionally, there must be at least two tab items defined
  * in order for the tabs to display.
  *
  * In this case, the base menu item is generated by Views (models/).
  * One tab must be created to be used when the base page is 
  * displayed ('models/browse') and that menu tab is also set as the
  * default tab (MENU_DEFAULT_LOCAL_TASK). Any additional tabs to be
  * displayed on the page are then created.
  */
  
  /*
   * Menu: model/%nid/version/%num/view
   * The default menu tab is provided by Views.
   */

  // This is the Edit model tab which redirects to the official edit address.
  $items['model/%/version/%/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'modellibrary_redirect_edit',
    'page arguments' => array(1,3),
    'access callback' => 'modellibrary_edit_access_callback',
    'access arguments' => array(array('edit any model', 'edit own model')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  /*
   * Menu: models/
   * The parent menu is provided by Views.
   * 
   * Menu: models/browse
   * Is provided by Views in the Browse Models display.
   */

  #$items['models/browse'] = array(
  #  'title' => 'Browse',
  #  'description' => 'Click to browse the model archive. ',
  #  'type' => MENU_DEFAULT_LOCAL_TASK,
  #  'access callback' => TRUE,
  #  'weight' => 0,
  #);

  $items['models/mymodels'] = array(
    'title' => 'My Models',
    'description' => 'Click to view your models. ',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'redirect_to_user_models',
    'access callback' => 'user_is_logged_in',
    'weight' => 2,
  );

  $items['models/search'] = array(
    'title' => 'Search',
    'description' => 'Click to search for a model. ',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('search/models'),
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['models/add'] = array(
    'title' => 'Add',
    'description' => 'Click to add a new model. ',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'add_model_if_permitted',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['models/help'] = array(
    'title' => 'Help',
    'description' => '',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('page/model-library-tutorial'),
    'access callback' => TRUE,
    'weight' => 20,
  );

  $items['models/years'] = array(
    'title' => 'Model Publication Years',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'modellibrary_display_model_years',
    'access callback' => TRUE,
    'weight' => 1,
  );

  return $items;
}


/**
 * Implementation of hook_permission().
 */
function modellibrary_permission() {
  return array(
    'view model' => array(
      'title' => t('View Model'),
      'description' => t('View models in the Model Library'),
    ),
    'create model' => array(
      'title' => t('Create New Models'),
      'description' => t('Add new models to the Model Library'),
    ),
    'edit own model' => array(
      'title' => t('Edit Own Model'),
      'description' => t('Edit own models only, in the Model Library'),
    ), 
    'edit any model' => array(
      'title' => t('Edit Any Model'),
      'description' => t('Edit any model in the Model Library'),
    ), 
    'rate model' => array(
      'title' => t('Rate Model'),
      'description' => t('Rate any model in the Model Library'),
    ), 
    'administer models' => array(
      'title' => t('Administer Model Library Settings'),
      'description' => t('Administer the model library settings'),
    ),
  );
}
 
/**
 * Implementation of modellibrary_access_callback().
 *
 * Based on core node_access() function.
 */
function modellibrary_edit_access_callback($perms) {
  global $user;

  // User #1 has all access
  if ($user->uid == 1) {
    return TRUE;
  }

  foreach ($perms as $item) {
    switch ($item) {
      case 'view model':
        if (user_access($item))
          return TRUE;
        break;

      case 'create model':
        if (user_access($item))
          return TRUE;
        break;

      case 'edit own model':
        $node = node_load(arg(1));
        if (user_access($item) && $user->uid == $node->uid)
          return TRUE;
        break;

      case 'edit any model':
        if (user_access($item))
          return TRUE;
        break;

      case 'rate model':
        if (user_access($item))
          return TRUE;
        break;

      case 'administer models':
        if (user_access($item))
          return TRUE;
        break;
    }
  }

  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 */
function modellibrary_menu_alter(&$items) {
  #$items['user/%user/view']['title'] = 'Profile';

  #$items['download_count']['file'] = 'download_count.pages.inc';
  #$items['download_count']['file path'] = drupal_get_path('module', 'modellibrary') . '/includes';

  // alter 'model' and 'modelversion' nodes
  $items['node/%node']['page callback'] = 'modellibrary_node_page_view';

  // alter the model search menu to be a menu tab
  #$items['models/search']['type'] = MENU_LOCAL_TASK;
  
}

/**
 * Redirect node views for 'model' and 'modelversion' nodes
 *
 * Only admins should be permitted to access the 'model' and 'modelversion' nodes. All other users
 * need to be redirected to the proper Model view page.
 */
function modellibrary_node_page_view($node) {
  global $user;

  if (($node->type == 'model' || $node->type == 'modelversion') && !($user->uid == 1 || user_access('administer models'))) {
    if ($node->type == 'model')
      drupal_goto('model/' . $node->nid); // redirect to proper Model view page
    else
      drupal_goto('model/' . $node->field_modelversion_model[LANGUAGE_NONE][0]['nid']); // redirect to proper Model view page
  } 
  else {
    // return core node view. This code is adapted from the core Node module, node_page_view function.
    drupal_set_title($node->title);
    return node_show($node, NULL);
  }
}

/**
 * Implements hook_node_view_alter()
 *
 * Store the Model comment form in a static variable, so we can embed in the Model view page.
 * Storing a form in a static variable is a cringe-worthy, crude solution, but the Drupal 7 core just
 * doesn't permit manipulating comment forms the way we need.
 */
function modellibrary_node_view_alter(&$build){
  if (in_array($build['#node']->type, array('modelversion'))) {
    modellibrary_static_comments($build['#node']->nid, $build);
  }
}

/*
 * This breaks just about every rule in the book, but we really don't have any other choice. 
 * This solution is adapted from the Node Comment Block module (http://drupal.org/project/node_comment_block).
 */
function modellibrary_static_comments($nid, $build = false, $node = false) {
  $comments = &drupal_static(__FUNCTION__);

  if ($build) {
  } 
  else {
    #normal behavior will be that the node calls this function before
    if (!isset($comments[$nid])) {
      $comments[$nid]['links'] = '';
      $comments[$nid]['comments'] = comment_node_page_additions($node);
      // add redirect destiantion to the comment form action. submitting comment now returns to the model page.
      $comments[$nid]['comments']['comment_form']['#action'] = $comments[$nid]['comments']['comment_form']['#action'] .'?destination=/model/' . $comments[$nid]['comments']['comment_form']['#node']->field_modelversion_model['und'][0]['nid'];
    }

    unset($comments[$nid]['comments']['comments']);
    return $comments[$nid];
  }
}

/**
 * Implementation of hook preprocess_page
 * 
 * Insert Google Scholar citation tags into page header when viewing
 * a model page.
 *
 * @param array $variables
 */
function modellibrary_preprocess_page(&$variables) {
  //using path
  if(arg(0) == 'model' && arg(4) == 'view'){
    //load the node node
    $node = node_load(arg(1));

    // Only add citation metadata on published models
    if ($node->status == 1) {
      // the meta content.
      $google_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'citation_title',
          'content' => check_plain($node->title) .' (Version '. arg(3) .')',
        ),
        '#weight' => 10,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Title',
          'content' => check_plain($node->title) .' (Version '. arg(3) .')',
        ),
        '#weight' => 20,
      );

      if (isset($node->field_model_author[LANGUAGE_NONE])) {
        foreach ($node->field_model_author[LANGUAGE_NONE] as $key)
          $author_refs[] = $key['value'];

        $authors = entity_load('field_collection_item', $author_refs);
      }
      else
        $authors = array();

      if (count($authors) > 0) {
        $i = 0;
        foreach ($authors as $index => $instance) {
          $author_text  = $instance->field_model_authorlast[LANGUAGE_NONE][0]['safe_value'];
          $author_text .= ', '. $instance->field_model_authorfirst[LANGUAGE_NONE][0]['safe_value'];
          if (isset($instance->field_model_authormiddle[LANGUAGE_NONE][0]['safe_value']))
            $author_text .= ' '. $instance->field_model_authormiddle[LANGUAGE_NONE][0]['safe_value'];

          $google_cite_element[] = array(
            '#tag' => 'meta',
            '#attributes' => array(
              'name' => 'citation_author',
              'content' => $author_text,
            ),
            '#weight' => 11,
          );
          $dublin_cite_element[] = array(
            '#tag' => 'meta',
            '#attributes' => array(
              'name' => 'DC.Creator',
              'content' => $author_text,
            ),
            '#weight' => 21,
          );
          $i++;
        }
      }
      else {
        $sql = "SELECT name FROM {node} INNER JOIN {users} ON node.uid = users.uid WHERE node.type = 'model' AND node.nid = :nid";
        $username = db_query($sql, array(':nid' => arg(1)))->fetchField();

        $google_cite_element[] = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'citation_author',
            'content' => $username,
          ),
          '#weight' => 12,
        );
        $dublin_cite_element[] = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'DC.Creator',
            'content' => $username,
          ),
          '#weight' => 22,
        );
      }

      //$google_cite .= '<meta name="citation_online_date" content="'. date('Y/m/d', $node->created) .'">'. "\n";
      $google_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'citation_publication_date',
          'content' => date('Y/m/d', $node->created),
        ),
        '#weight' => 13,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Date',
          'content' => date('Y/m/d', $node->created),
        ),
        '#weight' => 23,
      );

      $google_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'citation_journal_title',
          'content' => 'CoMSES Computational Model Library',
        ),
        '#weight' => 14,
      );
      $dublin_cite = 'CoMSES Computational Model Library. Retrieved from: ';
      if (isset($node->field_model_handle[LANGUAGE_NONE][0]['safe_value'])) $dublin_cite .= 'http://hdl.handle.net/'. $node->field_model_handle[LANGUAGE_NONE][0]['safe_value'];
      else $dublin_cite .= 'http://www.openabm.org/model/'. $node->nid .'/version/'. arg(3) .'/view';
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.bibliographicCitation',
          'content' => $dublin_cite,
        ),
        '#weight' => 24,
      );

      $google_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'citation_publisher',
          'content' => 'CoMSES Network',
        ),
        '#weight' => 15,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Publisher',
          'content' => 'CoMSES Network',
        ),
        '#weight' => 25,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Type',
          'content' => 'Software',
        ),
        '#weight' => 26,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Type',
          'content' => 'ABM',
        ),
        '#weight' => 26,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Type',
          'content' => 'agent-based model',
        ),
        '#weight' => 26,
      );
      $dublin_cite_element[] = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'DC.Description',
          'content' => strip_tags($node->body[LANGUAGE_NONE][0]['safe_value']),
        ),
        '#weight' => 27,
      );

      if (isset($node->field_model_handle[LANGUAGE_NONE][0]['safe_value'])) {
        $dublin_cite_element[] = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'DC.Identifier',
            'content' => 'http://hdl.handle.net/'. $node->field_model_handle[LANGUAGE_NONE][0]['safe_value'],
          ),
          '#weight' => 28,
        );
      } else {
        $dublin_cite_element[] = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'DC.Identifier',
            'content' => 'http://www.openabm.org/model/'. $node->nid .'/version/'. arg(3) .'/view',
          ),
          '#weight' => 28,
        );
      }

      foreach ($google_cite_element as $element)
        drupal_add_html_head($element, $element['#attributes']['name']);

      $element = array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'schema.DC',
          'href' => 'http://purl.org/DC/elements/1.0/',
        ),
        '#weight' => 18,
      );
      drupal_add_html_head($element, $element['#attributes']['rel']);

      $element = array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'schema.DCTERMS',
          'href' => 'http://purl.org/DC/terms/',
        ),
        '#weight' => 19,
      );
      drupal_add_html_head($element, $element['#attributes']['rel']);

      foreach ($dublin_cite_element as $element)
        drupal_add_html_head($element, $element['#attributes']['name']);

    } # end-if node published
    else {
      // instruct search bots to not index, follow links, or archive this model (because it is unpublished)
      $noindex = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'robots',
          'content' => 'noindex,nofollow,noarchive',
        ),
      );
      drupal_add_html_head($noindex, $noindex['#attributes']['name']);

    } #end-else node unpublished
  } # end-if model view page
}

/**
 * Implementation of hook_js_alter();
 *
 * Remove the javascript that provides the show/hide summary functionality.
 * We want to make the summary edit field always visible.
 */
function modellibrary_js_alter(&$javascript) {
  // remove the JS that does the show/hide summary
  unset($javascript['modules/field/modules/text/text.js']);
}

/**
 * Implementation of hook_node_validate();
 *
 * Make the model summary field required.
 */
function modellibrary_node_validate($node, $form, &$form_state) {
  if ($node->type == 'model') {
    if (!isset($node->body['und'][0]['summary']) || !$node->body['und'][0]['summary']) {
      form_set_error('Node', t('You must enter a summary!'));
    } 
  }
}

/**
 * Implementation of modellibrary_display_model_years();
 *
 * Generate list of publication years in Model Library.
 */
function modellibrary_display_model_years() {
  // Lookup the publication years in the model library
  $sql = "SELECT DISTINCT year(from_unixtime(created)) AS `year` FROM `node` WHERE type = 'model' AND status = 1 ORDER BY year";
  $results = db_query($sql);

  $content = '<div>';
  while ($item = $results->fetchObject()) {
   $content .= '<div><a href="/models/' . $item->year . '/year">' . $item->year . '</a></div>'; 
  }
  $content .= '</div>';

  return $content;
}

/**
 * Implementation of add_model_if_permitted()
 */
function add_model_if_permitted() {
  global $user;

  if ($user->uid == 1 || user_access('create model')) {
    drupal_goto('model/nojs/add');
  }
  else {
    drupal_set_message(t('Please <a style="font-weight: bold;" href="/user">log in</a> to add a new model.'));
    drupal_goto('models/browse');
  }
}

/**
 * Implementation of redirect_to_user_models()
 */
function redirect_to_user_models() {
  global $user;

  drupal_goto('user/' . $user->uid . '/models');
}


/**
 * Implementation of modellibrary_publish_confirm_form()
 */
function modellibrary_publish_confirm_form($form, &$form_state) {
  $output = t('<h2>WAIT!</h2>');
  $output .= t('<p>You can publish your model, but be aware that this is a one-direction procedure. Right now your model is hidden from public view. Public search engines will not index this model so long as it remains unpublished. If you are going to submit this model as a part of a publication to a journal, you may want to keep the model unpublished until the journal review is completed.</p>');
  $output .= t('<p>When you publish this model, it will be public in the Model Library and indexed by public search engines. It will also be announced on the CoMSES Twitter account. Like journal publications, once a model has been published, it is Published and a part of the public record.</p>');
  $output .= t('<p>If you are ready to proceed and publish your model, click the button below.</p>');
  $output .= t('<p>I understand and wish to publish my model:</p>');

  $form['message'] = array(
    '#markup' => $output,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publish Model'),
  );

  return $form;
}

/**
 * Implementation of hook_form_submit()
 */
function modellibrary_publish_confirm_form_submit($form, &$form_state) {
  modellibrary_publish_model();
}

/**
 * Implementation of modellibrary_publish_confirm()
 */
function modellibrary_publish_confirm($nid, $js = FALSE) {
  $title = t('Publish This Model?');

  // Fall back if $js is not set.
  if (!$js) {
    return drupal_render(drupal_get_form('modellibrary_publish_confirm_form'));
  }

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  $form_state = array(
    #'title' => t($title),
    'ajax' => TRUE,
  );

  $output = ctools_modal_form_wrapper('modellibrary_publish_confirm_form', $form_state);

  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
    $output = array();
    ctools_add_js('ajax-responder');
    $output[] = ctools_modal_command_dismiss(t('Success'));
    if (isset($_GET['destination'])) {
      $output[] = ctools_ajax_command_redirect($_GET['destination']);
    }
    else {
      $output[] = ctools_ajax_command_reload();
    }
  }

  print ajax_render($output);
}

/**
 * Publish model so it is publicly visible
 */
function modellibrary_publish_model() {
  $modelnid = arg(1);
  $model = node_load($modelnid);

  $model->status = 1;
  node_save($model);

  // Make sure this isn't occurring on the Dev server, before we post to Twitter
  // @TODO: perhaps change to a system variable that we toggle, Enable/Disable Twitter
  global $base_root;
  if ($base_root != 'http://dev.comses.asu.edu' || $base_root != 'http://dev.openabm.org') {
    modellibrary_post_twitter($model);
  }
}

/**
 * Redirect user to Model View page
 */
function modellibrary_redirect_view() {
  // We need to parse the url arguments to check whether a text URI has been entered
  // or the model NID. For backwards compatibility, an old-style URL with the
  // model URI must be converted to the current NID-format URL.

  $arg = arg(1);

  if (preg_match("/^[+]?\d*$/", $arg)) { 
    // The model argument is numeric, thus a model NID

    // Lookup the latest modelversion associated with the requested model nid
    $query = "SELECT modelversion_number.field_modelversion_number_value AS version_num FROM {node} node "
           . "LEFT JOIN {field_data_field_modelversion_model} modelversion_modelnid "
           . "ON node.nid = modelversion_modelnid.entity_id AND (modelversion_modelnid.entity_type = 'node'AND modelversion_modelnid.deleted = '0') "
           . "LEFT JOIN {field_data_field_modelversion_number} modelversion_number "
           . "ON node.nid = modelversion_number.entity_id AND (modelversion_number.entity_type = 'node' AND modelversion_number.deleted = '0') "
           . "WHERE (((modelversion_modelnid.field_modelversion_model_nid = :nid)) AND (((node.status = '1') AND (node.type IN ('modelversion'))))) "
           . "ORDER BY version_num DESC";
      
    $version_num = db_query_range($query, 0, 1, array(':nid' => $arg))->fetchField();

    drupal_goto('model/' . $arg . '/version/' . $version_num . '/view');
  }

  else {
    // Lookup the latest modelversion associated with the requested model uri
    $query = "SELECT modelversion_number.field_modelversion_number_value AS version_num, "
           . "modelversion_modelnid.field_modelversion_model_nid AS modelnid FROM {node} mv "
           . "LEFT JOIN {field_data_field_modelversion_uri} modelversion_uri ON mv.nid = modelversion_uri.entity_id "
           . "AND (modelversion_uri.entity_type = 'node' AND modelversion_uri.deleted = '0') "
           . "LEFT JOIN {field_data_field_modelversion_number} modelversion_number ON mv.nid = modelversion_number.entity_id "
           . "AND modelversion_number.entity_type = 'node' AND modelversion_number.deleted = '0' "
           . "LEFT JOIN {field_data_field_modelversion_model} modelversion_modelnid "
           . "ON mv.nid = modelversion_modelnid.entity_id AND (modelversion_modelnid.entity_type = 'node'AND modelversion_modelnid.deleted = '0') "
           . "WHERE modelversion_uri.field_modelversion_uri_value = 'artificialanasazi' AND mv.type IN ('modelversion') "
           . "ORDER BY version_num DESC ";

    $result = db_query_range($query, 0, 1, array(':uri' => $arg))->fetchObject();
    $vnum = $result->version_num;
    $modelnid = $result->modelnid;

    drupal_goto('model/' . $modelnid . '/version/' . $vnum . '/view');
  }
}

function modellibrary_redirect_edit() {
  $modelnid = arg(1);
  drupal_goto('model/' . $modelnid . '/nojs/edit');
}

/**
 * Implements hook_views_pre_render()
 * Insert the modal js and css for the Model Library view
 */
function modellibrary_views_pre_render(&$view) {
  if ($view->name == 'model_library' && $view->current_display == 'page_3') {
    // Here you can do any php you want to get the title you need for your view.
    $view->build_info['title'] = $view->result[0]->node_field_data_field_modelversion_model_title;
  
    // ** Insert modal setup **

    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');

    // Add CTools' javascript to the page.
    ctools_modal_add_js();

    // define our modal styling
    $throbber = theme('image', array('path' => ctools_image_path('loading_animation.gif', 'modellibrary'), 'alt' => t('Loading...'), 'title' => t('Loading')));
    $js_settings = array(
      'modellibrary-modal-medium' => array(
        'modalSize' => array(
          'type' => variable_get('modellibrary_modal_popup_medium_type', 'fixed'),
          'width' => floatval(variable_get('modellibrary_modal_popup_medium_width', 550)),
          'height' => floatval(variable_get('modellibrary_modal_popup_medium_height', 450)),
        ),
        'modalOptions' => array(
          'opacity' => floatval(variable_get('modellibrary_modal_opacity', 0.85)),
          'background' => variable_get('modellibrary_modal_background_color', '#000'),
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'ModelLibraryModal',
        'throbber' => $throbber,
        'closeText' => t('Close'),
      ),
      'modellibrary-modal-large' => array(
        'modalSize' => array(
          'type' => variable_get('modellibrary_modal_popup_large_type', 'scale'),
          'width' => floatval(variable_get('modellibrary_modal_popup_large_width', 0.8)),
          'height' => floatval(variable_get('modellibrary_modal_popup_large_height', 0.8)),
        ),
        'modalOptions' => array(
          'opacity' => floatval(variable_get('modellibrary_modal_opacity', 0.85)),
          'background' => variable_get('modellibrary_modal_background_color', '#000'),
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'ModelLibraryModal',
        'throbber' => $throbber,
        'closeText' => t('Close'),
      ),
    );

    drupal_add_js($js_settings, 'setting');

    // Add our own js and CSS for the modal.
    ctools_add_css('modellibrary_modal', 'modellibrary', 'includes');
    ctools_add_js('modellibrary_modal', 'modellibrary', 'includes');
  }
}

/**
 * Implementation of hook_apachesolr_search_result_alter()
 *
 * This function alters values in each individual result generated by the Apache
 * Solr search engine. Changes made here occur prior to final processing by
 * hook_apachesolr_process_results().
 */
function modellibrary_apachesolr_search_result_alter(&$doc) {
  if ($doc->bundle == 'model') {
    // replace default node path with Model Library model URL
    $doc->path = 'model/' . $doc->entity_id;
    $doc->url = '/model/' . $doc->entity_id;
  }

  // Alter profile nodes to direct to User Account
  if ($doc->bundle == 'profile') {
    $doc->bundle = 'user';
    $doc->bundle_name = 'User';
    $doc->path = 'user/' . $doc->is_uid;
    $doc->url = '/user/' . $doc->is_uid;
  }

  return $doc;
}

/*
 * Function for posting models to OpenABM-CoMSES Twitter account.
 * This code is adapted from the Twitter Post module
 */
function modellibrary_post_twitter($node) {
  module_load_include('inc', 'twitter');

  $openabm_twitter = 437897011; // uid for the openabm_comses Twitter account
  $twitter_account = twitter_account_load($openabm_twitter);
  $status = 'New Model: ' . $node->title . ' ' . twitter_shorten_url(url('model/' . $node->nid, array('absolute' => TRUE)));
  if (twitter_set_status($twitter_account, $status)) {
    drupal_set_message(t('Successfully posted to Twitter'));
  }
}

