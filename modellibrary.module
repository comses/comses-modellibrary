<?php
// $Id: $
  /**
   * @file
   * This is the new NSF Model Library module for OpenABM.org. This 
   * implementation stores models as nodes within Drupal's node system. 
   * This is accomplished using CCK to create custom fields and Views
   * to organize the database queries used to retrieve and display that 
   * data.  By making use of CCK, Views, and the other required support
   * modules, we are able to leverage the labor of those other modules
   * rather than reinventing many wheels.
   *
   * Sometimes however, accessing the data handled by those helper modules
   * require somewhat convoluted interfaces or private APIs.  This should
   * not pose a problem unless those modules undergo a major revision, and
   * their APIs change as a result (much like what happens when new Drupal
   * major version changes are released.  It is important to keep an eye out
   * for any major changes to the module dependencies listed on the Module
   * Admin screen.  Major changes should be tested on a test site before
   * deploying to the live server to make sure no changes are needed in
   * Model Library first.
   *
   * THeming for the pages used by this module, including the Views displays
   * used here, are covered by a CSS file and templates.  The CSS is located
   * in modellibrary/includes/ and the templates are in modellibrary/tpl/.
   * These files are registered below with the Drupal Theming Engine and
   * Views.
   */

/**
 * Implementation of hook_help()
 */
function modellibrary_help($path, $arg) {
  if ($path == 'admin/help#modellibrary') {
    $txt = 'The NSF Model Library module provides an interface for accessing the OpenABM model library.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_init()
 */
function modellibrary_init() {
  drupal_add_css(drupal_get_path('module', 'modellibrary') .'/includes/modellibrary.css');
//  drupal_add_js(drupal_get_path('module', 'modellibrary') .'/includes/modellibrary.js');
}

/**
 * Implementation hook_views_api()
 *
 * This function registers our coded Views stored in modellibrary/includes.
 * This allows the module to autoinstall a default set of views in the 
 * Views system when the module is activated.  The drawback is that any changes
 * then made to the views must be re-exported to the module to ensure if it
 * is ever reinstalled into a new installation, the default views are correct.
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'modellibrary') . '/includes',
  );
}


/**
 * Implementation of hook_theme()
 * 
 * Theme templates for this modules are stored in modellibrary/tpl.
 * We register them here so the theming engine know to use them (plus
 * it is tidier to keep the tpl files in this module rather than over
 * in the theme directory.)
 *
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modellibrary_theme($existing) {
  return array(
    'views_view_fields__model__page_6' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--model--page-6',
      'original hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_fields__modelversion__page_7' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--modelversion--page-7',
      'original hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__model' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--model',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
    'views_view_table__modelversion' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--modelversion',
      'original hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'modellibrary') .'/tpl',
    ),
  );
}

/**
 * Implementation of phptemplate_preprocessor_hook()
 *
 * This preprocessor function corresponds to the main Views template used in
 * viewing a model.  We are inserting a javascript function for BeautyTips to
 * display a popup balloon when the Share button is clicked on a model.
 */
function modellibrary_preprocessor_views_view_fields__modelversion__page_7(&$vars) {
}

/**
 * Implementation of hook_imagecache_default_presets().
 *
 * Autoinstall the two imagecache presets used by modellibrary.
 */
function mymodule_imagecache_default_presets() {
  $presets = array();
  $presets['Icon'] = array (
    'presetname' => 'Icon',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      1 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => 
        array (
          'width' => '50',
          'height' => '50',
        ),
      ),
      2 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '10',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  $presets = array();
  $presets['Preview'] = array (
    'presetname' => 'Preview',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => 
        array (
          'width' => '250',
          'height' => '250',
        ),
      ),
      1 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_coloractions',
        'action' => 'imagecache_convert',
        'data' => 
        array (
          'format' => 'image/png',
        ),
      ),
      2 => 
      array (
        'weight' => '0',
        'module' => 'imagecache_canvasactions',
        'action' => 'canvasactions_roundedcorners',
        'data' => 
        array (
          'radius' => '15',
          'independent_corners_set' => 
          array (
            'independent_corners' => 0,
            'radii' => 
            array (
              'tl' => '',
              'tr' => '',
              'bl' => '',
              'br' => '',
            ),
          ),
        ),
      ),
    ),
  );

  return $presets;
}

/**
 * Implementation of hook_menu()
 */
function modellibrary_menu() {
  global $user;

  // This item provides a default menu URL that redirects to the latest
  // model version.  
  $items['model/%'] = array(
    'title' => 'View Model',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_model_redirect_view', array(1)),
    'access callback' => TRUE,
    //'access arguments' => array('create model'),
    'type' => MENU_CALLBACK,
  );
  
  // This is the link for adding a new model
  $items['model/add'] = array(
    'title' => 'Add Model',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_model_add_form', array(1)),
    'access arguments' => array('create model'),
    'type' => MENU_CALLBACK,
  );

  // This is the official link for editing a model.
  $items['model/%/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_model_add_form', array(1, 2)),
    'access callback' => TRUE,
    //'access arguments' => array('modify model'),
    'type' => MENU_CALLBACK,
  );

  // This is the link for enabling a model.
  $items['model/%/enable'] = array(
    'title' => 'Enable',
    'description' => "",
    'page callback' => '_enable_model',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    //'access arguments' => array('modify model'),
    'type' => MENU_CALLBACK,
  );

  // This is the base menu link for the model/%uri/version/%num menu tabs.
  // It forwards to the latest model version at: model/%uri/version/%num/view
  $items['model/%/version/%/view'] = array(
    'title' => 'View',
    'description' => "",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'weight' => -5,
  );

  // This is the link for sharing a model, which will be displayed later in a modal frame.
  $items['model/%/version/%/share'] = array(
    'title' => 'Share Model',
    'description' => "",
    'page callback' => '_share_model',
    'page arguments' => array(array(1, 3)),
    'access callback' => TRUE,
    //'access arguments' => array('modify model'),
    'type' => MENU_CALLBACK,
  );

  /*
   * Menu: model/%uri/version/%num/view
   * The default menu tab is provided by Views.
   */

  // This is the Edit model tab which redirects to the official edit address.
  $items['model/%/version/%/edit'] = array(
    'title' => 'Edit',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_model_redirect_edit', array(1, 3)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

 /* The following menu items are generated as menu tabs 
  * (type = MENU_LOCAL_TASK). Tabs require a base menu item or page
  * ('models/') plus a tab menu item that corresponds to that default
  * page.  Additionally, there must be at least two tab items defined
  * in order for the tabs to display.
  *
  * In this case, the base menu item is generated by Views (models/).
  * One tab must be created to be used when the base page is 
  * displayed ('models/browse') and that menu tab is also set as the
  * default tab (MENU_DEFAULT_LOCAL_TASK). Any additional tabs to be
  * displayed on the page are then created.
  */
  $items['models/browse'] = array(
    'title' => 'Browse',
    'description' => 'Click to browse the model archive.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'weight' => 0,
  );

  $items['models/mymodels'] = array(
    'title' => 'My Models',
    'description' => 'Click to view your models.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('users/'. $user->name .'/models'),
    'access arguments' => array('user_is_logged_in'),
    'weight' => 1,
  );

  $items['models/search'] = array(
    'title' => 'Search',
    'description' => 'Click to search for a model.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('search/luceneapi_node/', 'type[model]=model'),
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['models/add'] = array(
    'title' => 'Add',
    'description' => 'Click to add a new model.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('model/add'),
    'access callback' => TRUE,
    'weight' => 3,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modellibrary_perm() {
  return array(
    'view model',
    'create model', 
    'edit own model', 'edit any model', 
    'delete own model', 'delete any model'
  );
}
 
/**
 * Implementation of hook_access().
 */
function modellibrary_access($op, $node, $account) {
  if ($op == 'view') {
    return (user_access('view model', $account));
  }
  elseif ($op == 'create') {
    return (user_access('create model', $account));
  }
  elseif ($op == 'update') {
    return (user_access('edit any model', $account) || (user_access('edit own model', $account) && ($account->uid == $node->uid)));
  }
  elseif ($op == 'delete') {
    return (user_access('delete any model', $account) || (user_access('delete own model', $account) && ($account->uid == $node->uid)));
  }
}

function _enable_model() {
  $uri = arg(1);
  $model = _load_model($uri);
  $version = _load_modelversion($uri);

  // Now we need to determine whether this model meets publication standard
  // If not, then the published (status) and Enabled flags are turned off.
  // If so, then the Published flag is turned on.  The model owner is only allowed to
  // Enable the model once it is Published.
  if (
       $model->field_model_teaser[0]['value'] > "" &&
       ($model->field_model_replicated[0]['value'] == 0 || $model->field_model_reference[0]['value'] > "") ||
       $model->title > "" &&
       $model->body > "" &&
       ($version->field_modelversion_language[0]['value'] > '' || $version->field_modelversion_otherlang[0]['value'] > '') &&
       $version->field_modelversion_os[0]['value'] > '' &&
       $version->field_modelversion_platform[0]['value'] > '' &&
       $version->field_modelversion_license[0]['value'] > '' ) {
    $model->field_model_enabled[0]['value'] = 1;
  } 
  $model = node_submit($model);
  node_save($model);

  drupal_goto('model/'. $uri);
}

function _model_redirect_view() {
  $uri = arg(1);

  // The following block programmatically executes a Views display
  // First we need to set the arguments to be passed to Views
  $view_args = array($uri); // The display we are using takes an argument
  $display_id = 'page_1';   // We are accessing the Latest Version display...
  $view = views_get_view('modelversion'); // ...from the modelversion View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view
  // Note that execute() doesn't actually output the View, it just runs the
  // database queries.  However, it does set the page title based on the Title
  // setting in the View display.  So if we were going to be displaying data
  // on a page, we would have to override the page title if we didn't like
  // the View title.

  // render_field() actually fully renders the field with any widgets configured
  // for that field.  In this case, we are just retrieving the Version Number
  // which is rendered as plain text.  We could also retrieve the raw content
  // from within the View result, but for most purposes we don't want that
  // because that data hasn't been preprocessed, filtered, and doesn't provide
  // any widget functionality.
  drupal_goto('model/'. $uri .'/version/'. $view->render_field('field_modelversion_number_value', 0) .'/view');
}

function _model_redirect_edit() {
  $uri = arg(1);
  drupal_goto('model/'. $uri .'/edit');
}


define(MODEL_STEPS, 5);  // Number of steps in _model_add_form()

/* Implementation of Drupal Form API hook_form
 *
 * This form is used for both adding new Models and editing existing Models.
 * This dual functionality is handled through url arguments.  Additionally,
 * this form handles both the Model and Model Version content types.  The goal
 * is to make model versions as unobtrusive as possible.  Currently, when a model
 * is added or updated, this form and its submit code processes both content types
 * and determines automatically whether a model version is to be updated or a
 * new version needs to be created.  Currently, any changes to Version fields
 * other than the uploaded files will only result in the latest version being
 * being updated. If any of the version files are changed, then a new Version
 * is created.  No versioning is done with the Model node, but we might consider
 * merging Model and Version types into a single Model content type, which is
 * versioned as a single unit.
 */
function _model_add_form($form_state) {
  module_load_include('inc', 'content', 'includes/content.node_form');  // Must have this in order to call content_field_form later.

  if (arg(2) == 'edit') {
    $action = 'edit';
    $uri = arg(1);
  }
  else {
    $action = 'add';
  }
  $action_text = "";

  if ($action == 'edit') {
    // We have the model URI and we need the NID
    $view_args = array($uri);
    $display_id = 'page_6'; // Model view
    $model_view = views_get_view('model');
    $model_view->set_arguments($view_args);
    $model_view->set_display($display_id);
    $model_view->pre_execute();
    $model_view->execute();

    $modelnid = $model_view->render_field('nid', 0);
    $model = node_load($modelnid);

    // Now we need to look up the Version NID
    $view_args = array($uri);
    $display_id = 'page_1'; // Latest Version view
    $version_view = views_get_view('modelversion');
    $version_view->set_arguments($view_args);
    $version_view->set_display($display_id);
    $version_view->pre_execute();
    $version_view->execute();

    $versionnid = $version_view->render_field('nid', 0);
    $version = node_load($versionnid);

    $action_text = "Edit";
  } 
  else {
    $action_text = "Add New";
    $versionnum = helper_get_max_versionnum($modelnid);
  }

  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
    // set the form encoding type
    $form['#attributes']['enctype'] = "multipart/form-data";
  }
  
  // If this is an edit, we need to pull in the current values from the node
  if ($action == 'edit') {
    $node = _load_model($uri);
    $edit_value = array();
    $edit_value['title'] = $node->title;
    $edit_value['description'] = $node->body;
    $edit_value['field_model_uri'] = $node->field_model_uri[0]['value'];
    $edit_value['field_model_teaser'] = $node->field_model_teaser[0]['value'];
    $edit_value['field_model_replicated'] = $node->field_model_replicated[0]['value'];
    //watchdog('modellibrary', 'modellibrary.module (532): replicated: '. $default_value['field_model_replicated'], NULL, WACHDOG_INFO);
    $edit_value['field_model_reference'] = $node->field_model_reference[0]['value'];
    //watchdog('modellibrary', 'modellibrary.module (534): reference: '. $default_value['field_model_reference'], NULL, WACHDOG_INFO);
    //$default_value['field_model_enabled'] = $node->field_model_enabled[0]['value'];
    $edit_value['field_model_image'] = $node->field_model_image;
    $edit_value['field_model_video'] = $node->field_model_video;

    $node = _load_modelversion($uri);
    $edit_value['notes'] = $node->body;
    $edit_value['field_modelversion_language'] = $node->field_modelversion_language;
    $edit_value['field_modelversion_otherlang'] = $node->field_modelversion_otherlang;
    $edit_value['field_modelversion_langversion'] = $node->field_modelversion_langversion;
    $edit_value['field_modelversion_os'] = $node->field_modelversion_os;
    $edit_value['field_modelversion_osversion'] = $node->field_modelversion_osversion;
    $edit_value['field_modelversion_platform'] = $node->field_modelversion_platform;
    $edit_value['field_modelversion_platformver'] = $node->field_modelversion_platformver;
    $edit_value['field_modelversion_license'] = $node->field_modelversion_license;
    $edit_value['field_modelversion_review'] = $node->field_modelversion_review;
    $edit_value['field_modelversion_runconditions'] = $node->field_modelversion_runconditions;
    $edit_value['field_modelversion_code'] = $node->field_modelversion_code;
    $edit_value['field_modelversion_documentation'] = $node->field_modelversion_documentation;
    $edit_value['field_modelversion_sensitivity'] = $node->field_modelversion_sensitivity;
    $edit_value['field_modelversion_dataset'] = $node->field_modelversion_dataset;
    $edit_value['field_modelversion_addfiles'] = $node->field_modelversion_addfiles;
  }

  //Don't lose our old data when returning to a page with data already typed in.
  //$default_value = '';
  if (isset($form_state['storage']['values'])) {
    $default_value = $form_state['storage']['values'];
  }

  // We need to set the page title since executing the views earlier caused
  // those views to change the page title.  This line has to be after
  // all executed views.
  drupal_set_title($action_text .' Model - Step '. $form_state['storage']['step'] . ' of '. MODEL_STEPS);

  switch ($form_state['storage']['step']) {
    case 1: // page 1
      $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('The human-friendly name for this model.'),
        '#size' => 60,
        '#maxlength' => 60,
        '#default_value' => isset($default_value['title']) ? $default_value['title'] : $edit_value['title'],
        //'#weight' => -5,
        '#required' => TRUE,
        //'#element_validate' => array('_model_add_element_validate'),
      );

      if ($action == 'add') {
        $form['field_model_uri'] = array(
          '#type' => 'textfield',
          '#title' => t('URI'),
          '#description' => t('The computer-friendly identifier for this model. Only lowercase letters, numbers, and underscore are allowable.'),
          '#size' => 30,
          '#maxlength' => 30,
          '#default_value' => isset($default_value['field_model_uri']) ? $default_value['field_model_uri'] : $edit_value['field_model_uri'],
          //'#weight' => -5,
          '#required' => TRUE,
          //'#element_validate' => array('_model_add_element_validate'),
        );
      } 
      else {
        $form['field_model_uri'] = array(
          '#type' => 'value',
          '#value' => $model->field_model_uri[0]['value'],
        );
      }
 
      $form['field_model_teaser'] = array(
        '#type' => 'textarea',
        '#title' => t('Teaser'),
        '#description' => t('The model teaser'),
        '#cols' => 50,
        '#rows' => 3,
        '#default_value' => isset($default_value['field_model_teaser']) ? $default_value['field_model_teaser'] : $edit_value['field_model_teaser'],
        //'#weight' => 0,
        '#required' => FALSE,
      );

      $form['body_filter']['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#description' => t('The model\'s description'),
        '#cols' => 50,
        '#rows' => 10,
        '#default_value' => isset($default_value['description']) ? $default_value['description'] : $edit_value['description'],
      );
      $form['body_filter']['filter'] = filter_form($model->format);
      //$form['body_filter']['#weight'] = -3;

      /* The following block uses CCK's internal functions to retrieve and render
       * the CCK fields.  The advantage to accessing the data in this manner
       * is that CCK takes care of generating the widgets on our form, including
       * file and image uploads, taxonomy tags, and so on. These fields are
       * configured in the Content Type management screens.
       */
      $fields = array('field_model_tags'); // array list of the fields to be accessed
      foreach ($fields as $name) {
        //Create the field by calling the CCK API:
        $field = content_fields($name);
        // This is a non-display container for passing the field information along:
        $form['#field_info'][$name] = $field;
        // If you set the field value here it will be used as default for the field,
        // see line 67 of file content.node_form.inc.:
        $form_state['values'][$name] = isset($default_value[$name]) ? $default_value[$name] : $edit_value[$name];
        // This does the element rendering:
        $element = (array)content_field_form($form, $form_state, $field);
        // Add the fields to the form:
        $form += $element;
      }

      break;

    case 2: // page 2

      $form['replication'] = array(
        '#type' => 'fieldset',
        '#title' => t('Model Replication Info'),
      );

      $form['replication']['field_model_replicated'] = array(
        '#type' => 'checkbox',
        '#title' => t('Replicated Model?'),
        '#description' => t('If this is checked, the model is a replication of another model, published or otherwise. You must also provide the bibliographic reference to that model in the field below.'),
        '#default_value' => isset($default_value['field_model_replicated']) ? $default_value['field_model_replicated'] : $edit_value['field_model_replicated'],
        //'#element_validate' => array('_model_add_element_validate'),
        //'#weight' => 7,
      );
      $form['replication']['field_model_reference'] = array(
        '#type' => 'textarea',
        '#title' => t('Model Reference'),
        '#description' => t('The bibliographic reference for the original model implementation.'),
        '#cols' => 50,
        '#rows' => 5,
        //'#weight' => 8,
        '#default_value' => isset($default_value['field_model_reference']) ? $default_value['field_model_reference'] : $edit_value['field_model_reference'],
      ); 

      // Generate the CCK fields
      $fields = array('field_model_image', 'field_model_video');
      foreach ($fields as $name) {
        $field = content_fields($name);
        $form['#field_info'][$name] = $field;
        $form_state['values'][$name] = isset($default_value[$name]) ? $default_value[$name] : $edit_value[$name];
        $element = (array)content_field_form($form, $form_state, $field);
        $form += $element;
      }
      break;

    case 3: // Page 3
      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Instructions for Page 3.</h3></div>',
        '#weight' => -20,
      );

      $form['version_number'] = array(
        '#type' => 'value',
        '#value' => $versionnum,
      );

      $form['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Version Notes'),
        '#cols' => 50,
        '#rows' => 5,
        '#default_value' => isset($default_value['notes']) ? $default_value['notes'] : $edit_value['notes'],
      );
      //$form['body_filter']['filter'] = filter_form($version->format);
      //$form['body_filter']['#weight'] = -3;

      // Generate the CCK fields
      $fields = array('field_modelversion_language', 'field_modelversion_otherlang', 'field_modelversion_langversion', 'field_modelversion_os', 'field_modelversion_osversion', 'field_modelversion_platform', 'field_modelversion_platformver');
      foreach ($fields as $name) {
        $field = content_fields($name);
        $form['#field_info'][$name] = $field;
        $form_state['values'][$name] = isset($default_value[$name]) ? $default_value[$name] : $edit_value[$name];
        $element = (array)content_field_form($form, $form_state, $field);
        $form += $element;                    
      }
      break;

    case 4: // page 4
      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Instructions for Page 4.</h3></div>',
        '#weight' => -20,
      );

      // CCK Fields
      $fields = array('field_modelversion_code', 'field_modelversion_documentation', 'field_modelversion_sensitivity', 'field_modelversion_dataset', 'field_modelversion_addfiles');
      foreach ($fields as $name) {
        $field = content_fields($name);
        $form['#field_info'][$name] = $field;
        $form_state['values'][$name] = isset($default_value[$name]) ? $default_value[$name] : $edit_value[$name];
        $element = (array)content_field_form($form, $form_state, $field);
        $form += $element; 
      }
      break;

    case 5: // page 5
      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Instructions for Page 5.</h3></div>',
        '#weight' => -20,
      );
      
      // CCK Fields
      $fields = array('field_modelversion_license', 'field_modelversion_review', 'field_modelversion_runconditions');
      foreach ($fields as $name) {
        $field = content_fields($name);
        $form['#field_info'][$name] = $field;
        $form_state['values'][$name] = isset($default_value[$name]) ? $default_value[$name] : $edit_value[$name];
        $element = (array)content_field_form($form, $form_state, $field);
        $form += $element; 
      }
      
      break;
  }

  // Back button
  if ($form_state['storage']['step'] > 1) {
    $form['back'] = array( //corresponds to 'edit-back' in form_submit
      '#value' => 'Back',
      '#type' => 'submit',
      '#weight' => 20
    );
  }

  //'Next' appears at every step except for the final page as 'Submit'
  if ($form_state['storage']['step'] < MODEL_STEPS) {
    $form['next'] = array(//corresponds to 'edit-next' in form_submit
      '#type' => 'submit',
      '#value' => 'Next',
      '#weight' => 21
    );
  }
  else {
    $form['next'] = array(//corresponds to 'edit-next' in form_submit
      '#type' => 'submit',
      '#value' => 'Submit',
      '#weight' => 21
    );
  }

  return $form;
}

/**
 * Implementation of hook_validate().
 *
 */
function _model_add_form_validate($form, &$form_state) {
  if (arg(2) == 'edit') {
    $action = 'edit';
    $uri = arg(1);
  }
  else {
    $action = 'add';
  }

  if ($form_state['storage']['step'] == 1) { 
    if ($action == 'add' && helper_check_if_cck_fieldvalue_exists('field_model_uri', $form_state['values']['field_model_uri'])) {
      form_set_error('', t('That URI is already in use.  Please select a different value.'));
    }

    // Verify URI only contains valid characters
    if ($action == 'add' && !(preg_match('/^[a-z\d_]{5,20}$/i', $form_state['values']['field_model_uri']))) {
      form_set_error('', t('Invald characters entered in URI.  Only alphanumeric characters and the underscore are permitted.  Please select a different value.'));
    }
  }


  if ($form_state['storage']['step'] == 2) {
    if ($form_state['values']['field_model_replicated'] == 1 ) {
      form_set_error('', t('You have flagged this model as a replication.  You must also enter the bibliographic reference to the original model implementation.'));
    }
  }
}

function _model_add_element_validate($element, &$form_state) {
  //drupal_set_message('validating field: '. $element['#name']);
}


/**
 * Implementation of hook_submit().
 *
 */
function _model_add_form_submit($form, &$form_state) {
  //multistep processing. If this is the first page, we need to create the 
  // storage area for previous pages of the form
  if (!$form_state['storage']['values']) {
    $form_state['storage']['values'] = array();
  }

  //increment the button, overwrite the storage values with the new values, and return
  if ($form_state['clicked_button']['#id'] == 'edit-back') {
    $form_state['storage']['step']--;
    $form_state['storage']['values'] = $form_state['storage']['values'] + $form_state['values'];
    return;
  } 
  elseif ($form_state['clicked_button']['#id'] == 'edit-next' && $form_state['storage']['step'] < MODEL_STEPS) {
    $form_state['storage']['step']++;
    $form_state['storage']['values'] = $form_state['storage']['values'] + $form_state['values'];
    return;
  }

  //Once this is the last step, save the data
  global $user;  // allows us to look up the logged-in user data

  // eh, I think this is required to run drupal_execute later when saving the nodes.
  module_load_include('inc', 'node', 'node.pages'); 
  
  if (arg(2) == 'edit') {
    $action = 'edit';
    $uri = arg(1);
    //watchdog('modellibrary', 'modellibrary.module (753): uri: '. $uri, NULL, WACHDOG_INFO);
  }
  else {
    $action = 'add';
    $uri = $form_state['storage']['values']['field_model_uri'];
    //watchdog('modellibrary', 'modellibrary.module (753): uri: '. $uri, NULL, WACHDOG_INFO);
  }

  $model = new stdClass();

  if ($action == 'edit') {
    $model = _load_model($uri); // if we are editing, load the model
  } 
  else {
    $model->type = 'model'; // otherwise prep the new node
  }

  // Setup form_state array for the drupal_execute function.
  // This might be a little cumbersome, but I am not sure
  // drupal_execute can process the field values
  // we stored in $form_state[storage]
  $new_state = array();  
  $node_updated = FALSE; // flag to indicate whether any fields have been changed in an update

  // drupal_execute() will use the values in $new_state for generating the new node
  $new_state['values']['title'] = $form_state['storage']['values']['title'];
  $modeltitle = $new_state['values']['title']; // will need this later for the Version node
  $new_state['values']['body'] = $form_state['storage']['values']['description'];
  $new_state['values']['type'] = 'model';  
  $new_state['values']['status'] = 0;
  $new_state['values']['promote'] = 0;
  $new_state['values']['sticky'] = 0;
  $new_state['values']['format'] = 1;
  $new_state['values']['language'] = 'en';
  if ($action == 'add') {
    $new_state['values']['name'] =  $user->name;
  } 
  else {
    $new_state['values']['name'] =  $user->name; // TODO: figure out how to retain the original user when editing
  }

  //    print_r($form['storage']['values']['field_model_tags']);

  $new_state['values']['field_model_uri'][0]['value'] = $form_state['storage']['values']['field_model_uri'];
  $new_state['values']['field_model_teaser'][0]['value'] = $form_state['storage']['values']['field_model_teaser'];
  $new_state['values']['field_model_public'][0]['value'] = $form_state['storage']['values']['field_model_public'];
  $new_state['values']['field_model_featured'][0]['value'] = $form_state['storage']['values']['field_model_featured'];
  $new_state['values']['field_model_replicated'][0]['value'] = $form_state['storage']['values']['field_model_replicated'];
  $new_state['values']['field_model_reference'][0]['value'] = $form_state['storage']['values']['field_model_reference'];
  if ($action == 'add') {
    $new_state['values']['field_model_enabled'][0]['value'] = 0;
  }


//watchdog('modellibrary', 'modellibrary.module (902): title: '. $new_state['values']['title']);
//watchdog('modellibrary', 'modellibrary.module (903): title: '. $new_state['values']['body']);
//watchdog('modellibrary', 'modellibrary.module (904): title: '. $new_state['values']['field_model_teaser'][0]['value']);

  $new_state['values']['field_model_tags'][0]['value'] = $form_state['storage']['values']['field_model_tags'];

  // The imagefield has to be loaded into the temp node variable in order for drupal_execute() to process it.
  $model->field_model_image = $form_state['storage']['values']['field_model_image'];
  // Like the imagefield, this field has to be loaded into the temp node variable in order for drupal_execute() to process it.
  $model->field_model_video = $form_state['storage']['values']['field_model_video'];
  $new_state['values']['op'] = t('Save');  // This seems to be a required value

  // There is an alternate method for saving nodes using node_save().  However,
  // node_save() doesn't handle the Image and Video CCK fields properly (or at least
  // I was never able to figure out how to get it to work properly.) node_save() is
  // more commonly used and discussed in the Drupal community, however there are
  // pros and cons with each method.  node_save() doesn't process any validation or
  // preprocess settings configured for a content type.  drupal_execute does, but it
  // also is heavier than node_save() for processing overhead (probably because of the
  // preprocessing, which to my mind is really the intended behavior in Drupal.)
  drupal_execute('model_node_form', $new_state, (object) $model); 
  $errors = form_get_errors();
  if (count($errors)) {
    // Deal with any errors generated by drupal_execute()
    drupal_set_message("Error saving model: \n". $errors);
  }


  //Now we need to process the version data and add a new version if necessary
  $version = new stdClass();

  if ($action == 'edit') {
    $version = _load_modelversion($uri);  
  } 

  // We need to retrieve the NID for the new model
  $view_args = array($uri);
  $display_id = 'page_6'; // Model view
  $model_view = views_get_view('model');
  $model_view->set_arguments($view_args);
  $model_view->set_display($display_id);
  $model_view->pre_execute();
  $model_view->execute();

  $modelnid = $model_view->render_field('nid', 0);

  // Setup form_state array for the drupal_execute function.
  $new_state = array();  
 
  $new_state['values']['title'] = $form_state['storage']['values']['title'] ." - Version ". helper_get_max_versionnum($modelnid);
  $new_state['values']['body'] = $form_state['storage']['values']['notes'];
  $new_state['values']['type'] = 'modelversion';  // drupal_execute() will use these values for generating the new node
  $new_state['values']['status'] = 1;
  $new_state['values']['promote'] = 0;
  $new_state['values']['sticky'] = 0;
  $new_state['values']['format'] = 1;
  $new_state['values']['language'] = 'en';
  $new_state['values']['name'] =  $user->name;
  $new_state['values']['field_modelversion_modelnid'][0]['value'] = $modelnid;
  $new_state['values']['field_modelversion_language'] = $form_state['storage']['values']['field_modelversion_language'];
  $new_state['values']['field_modelversion_otherlang'] = $form_state['storage']['values']['field_modelversion_otherlang'];
  $new_state['values']['field_modelversion_langversion'] = $form_state['storage']['values']['field_modelversion_langversion'];
  $new_state['values']['field_modelversion_os'] = $form_state['storage']['values']['field_modelversion_os'];
  $new_state['values']['field_modelversion_osversion'] = $form_state['storage']['values']['field_modelversion_osversion'];
  $new_state['values']['field_modelversion_platform'] = $form_state['storage']['values']['field_modelversion_platform'];
  $new_state['values']['field_modelversion_platformver'] = $form_state['storage']['values']['field_modelversion_platformver'];
  $new_state['values']['field_modelversion_license'] = $form_state['values']['field_modelversion_license'];
  $new_state['values']['field_modelversion_review'] = $form_state['values']['field_modelversion_review'];
  $new_state['values']['field_modelversion_runconditions'] = $form_state['values']['field_modelversion_runconditions'];
  $new_state['values']['op'] = t('Save');  // This seems to be a required value

  $new_version = FALSE;  // flag to indicate a new version needs to be created.

  // If we are in Edit mode, then we need to check to see which fields have
  // been changed.  For most fields, if any changes have been made, we want to update
  // the current version.  However, if any of the file upload fields have been changed
  // we are going to create a new version.
  if ($action == 'edit') {  
    if ($version->field_modelversion_code[0]['fid'] != $form_state['storage']['values']['field_modelversion_code'][0]['fid']) {
      $new_version = TRUE;
    } 
    elseif ($version->field_modelversion_documentation[0]['fid'] != $form_state['storage']['values']['field_modelversion_documentation'][0]['fid']) {
      $new_version = TRUE;
    } 
    elseif ($version->field_modelversion_sensitivity[0]['fid'] != $form_state['storage']['values']['field_modelversion_sensitivity'][0]['fid']) {
      $new_version = TRUE;
    } 
    elseif ($version->field_modelversion_dataset[0]['fid'] != $form_state['storage']['values']['field_modelversion_dataset'][0]['fid']) {
      $new_version = TRUE;
    } 
    elseif ($version->field_modelversion_addfiles[0]['fid'] != $form_state['storage']['values']['field_modelversion_addfiles'][0]['fid']) {
      $new_version = TRUE;
    }
  } 
  else {
    $new_version = TRUE;    
  }

  if ($new_version) {
    $version = new stdClass();
    $version->type = 'modelversion';
    $new_state['values']['title'] = $form_state['storage']['values']['title'] ." - Version ". helper_get_next_versionnum($model->nid);
    $new_state['values']['field_modelversion_number'][0]['value'] = helper_get_next_versionnum($model->nid);
    $new_state['values']['field_modelversion_uri'][0]['value'] = $form_state['storage']['values']['field_model_uri'];
  }

  $version->field_modelversion_code = $form_state['storage']['values']['field_modelversion_code']; 
  $version->field_modelversion_documentation = $form_state['storage']['values']['field_modelversion_documentation']; 
  $version->field_modelversion_sensitivity = $form_state['storage']['values']['field_modelversion_sensitivity']; 
  $version->field_modelversion_dataset = $form_state['storage']['values']['field_modelversion_dataset'];  
  $version->field_modelversion_addfiles = $form_state['storage']['values']['field_modelversion_addfiles']; 

  //clear the storage and rebuild so the form doesn't rebuild and #redirect works
  $form_state['rebuild'] = '';
  unset($form_state['storage']);

  drupal_execute('modelversion_node_form', $new_state, (object) $version); 
  $errors = form_get_errors();

  if (count($errors)) {
    // Deal with any errors generated by drupal_execute()
    drupal_set_message("Error saving model: \n". $errors);
  }

  $node = _load_model($uri);
  $version = _load_modelversion($uri);

  // Now we need to determine whether this model meets publication standard
  // If not, then the published (status) and Enabled flags are turned off.
  // If so, then the Published flag is turned on.  The model owner is only allowed to
  // Enable the model once it is Published.
  if (
       $node->field_model_teaser[0]['value'] == "" ||
       ($node->field_model_replicated[0]['value'] == 1 && $node->field_model_reference[0]['value'] == "") ||
       $node->title == "" ||
       $node->body == "" ||
       $version->field_modelversion_license[0]['value'] == '' ) {
    $node->status = 0;
    $node->field_model_enabled[0]['value'] = 0;
  } 
  else {
    $node->status = 1;
  }
  $node = node_submit($node);
  node_save($node);

  drupal_goto('model/'. $uri);
}


/*
 *
 */
function _load_model($uri) {
    $view_args = array($uri);
    $display_id = 'page_6'; // Model view
    $model_view = views_get_view('model');
    $model_view->set_arguments($view_args);
    $model_view->set_display($display_id);
    $model_view->pre_execute();
    $model_view->execute();

    return node_load($model_view->render_field('nid', 0));
}

/*
 *
 */
function _load_modelversion($uri) {
    $view_args = array($uri);
    $display_id = 'page_1'; // Model view
    $version_view = views_get_view('modelversion');
    $version_view->set_arguments($view_args);
    $version_view->set_display($display_id);
    $version_view->pre_execute();
    $version_view->execute();

    return node_load($version_view->render_field('nid', 0));
}

/**
 * Retrieve highest version number in use for a given model.
 *
 * TODO Make field_modelversion_modelnid_value db structure agnostic, like the version number field
 *
 * @param $modelnid
 *
 * @return
 * Boolean indicating whether submitted value is already in use.
 */
function helper_get_max_versionnum($modelnid) {
  $table_versionnum = helper_cck_field_sql('field_modelversion_number', 'table');
  $column_versionnum = helper_cck_field_sql('field_modelversion_number', 'column');

  return db_result(db_query("SELECT MAX(t.%s) FROM {%s} t WHERE t.field_modelversion_modelnid_value = %d", $column_versionnum, $table_versionnum, $modelnid));
}

/**
 * Retrieve highest version number for a given model and return the next available number.
 *
 * TODO Make field_modelversion_modelnid_value db structure agnostic, like the version number field
 *
 * @param $modelnid
 *
 * @return
 * Boolean indicating whether submitted value is already in use.
 */
function helper_get_next_versionnum($modelnid) {
  $table_versionnum = helper_cck_field_sql('field_modelversion_number', 'table');
  $column_versionnum = helper_cck_field_sql('field_modelversion_number', 'column');

  return db_result(db_query("SELECT MAX(t.%s) FROM {%s} t WHERE t.field_modelversion_modelnid_value = %d", $column_versionnum, $table_versionnum, $modelnid)) + 1;
}

/**
 * Query appropriate table to check if a field value already exists in any given content.
 *
 * @param $field
 * @param $value
 *
 * @return
 * Boolean indicating whether submitted value is already in use.
 */
function helper_check_if_cck_fieldvalue_exists($field, $value) {
  $table = helper_cck_field_sql($field, 'table');
  $column = helper_cck_field_sql($field, 'column');

  if (db_result(db_query("SELECT COUNT(t.%s) FROM {%s} t WHERE LOWER(t.%s) = LOWER('%s')", $column, $table, $column, $value)) > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * function to get the TABLE or COLUMN for a CCK FIELD
 * method adapted from http://drewish.com/content/2010/06/correctly_accessing_cck_fields_in_sql_queries *
 *
 * This method is needed because CCK fields can be stored in the database in two different ways
 * depending on whether the field is shared between multiple content types or not.
 *
 * @param $field_name
 * @param $type 'table' or 'column' *
 * to get both table and column, run function twice with each $type
 */
function helper_cck_field_sql($field_name, $type) {
  $field = content_fields($field_name);
  $db_info = content_database_info($field);

  if ($type == 'table' && isset($db_info['table'])) {
    return $db_info['table'];
  }
  elseif ($type == 'column' && isset($db_info['columns']['value']['column'])) {
    return $db_info['columns']['value']['column'];
  }
    return NULL;
}


/* ************************************************************************ */
/*
define(VERSION_STEPS, 3);  // Number of steps in _modelversion_add_form()
function _modelversion_add_form($form_state) {
  module_load_include('inc', 'content', 'includes/content.node_form');  // Must have this in order to call content_field_form later.

  $modelnid = arg(1);
  $action = arg(3);
  $versionnid = arg(4);
  $action_text = "";

  // Load the model node and setup version variable
  $model = node_load($modelnid);
  $version = new stdClass();

  if ($action == 'edit') {
    $action_text = "Edit";
    $version = node_load($versionnid);
    $versionnum = $version->field_modelversion_number[0]['value'];
  } else {
    $action_text = "Add New";
    $versionnum = helper_get_max_versionnum($modelnid);
  }
  
  if (!$form_state['storage']['step']) {
    $form_state['storage']['step'] = 1;
    // set the form encoding type
    $form['#attributes']['enctype'] = "multipart/form-data";
  }

  $form_state['values'] = $form_state['storage']['values'];  //move previous values into storage
  drupal_set_title($action_text .' Model Version - Step '. $form_state['storage']['step'] . ' of '. VERSION_STEPS);

  switch($form_state['storage']['step']) {
    case 1: // page 1

      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Please enter the following information about this version of your model.</h3></div>',
        '#weight' => -20,
      );

      $form['version_number'] = array(
        '#type' => 'item',
        '#title' => t('Version Number'),
        //'#description' => t('The human-friendly name for this model.'),
        '#size' => 5,
        '#maxlength' => 5,
        '#value' => $versionnum,
        //'#weight' => -5,
        //'#required' => TRUE,
      );

      $form['body_filter']['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Version Notes'),
        //'#description' => t('The model\'s description'),
        '#cols' => 50,
        '#rows' => 10,
        '#default_value' => $version->body,
      );
      $form['body_filter']['filter'] = filter_form($version->format);
      //$form['body_filter']['#weight'] = -3;

      // These are the CCK fields we need to include in the form.
      $fields = array('field_modelversion_language', 'field_modelversion_otherlang', 'field_modelversion_langversion', 'field_modelversion_os', 'field_modelversion_osversion', 'field_modelversion_platform', 'field_modelversion_platformver');
      foreach ($fields as $name) {
        $field = content_fields($name);                  //Create the field by calling the CCK API.
        $form['#field_info'][$name] = $field;            // This is a non-display container for passing the field information along.
        $form_state['values'][$name] = $version->$name;  // If you set the field value here it will be used as default for the field, see line 67 of file content.node_form.inc.
        $element = (array)content_field_form($form, $form_state, $field);  // This does the element rendering.
        $form += $element;                               // Add the field to the form.
      }

      break;

    case 2: // page 2

      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Instructions for Page 2.</h3></div>',
        '#weight' => -20,
      );

      $fields = array('field_modelversion_code', 'field_modelversion_documentation', 'field_modelversion_sensitivity', 'field_modelversion_dataset', 'field_modelversion_addfiles');
      foreach ($fields as $name) {
        $field = content_fields($name);                  //Create the field by calling the CCK API.
        $form['#field_info'][$name] = $field;            // This is a non-display container for passing the field information along.
        $form_state['values'][$name] = $version->$name;  // If you set the field value here it will be used as default for the field, see line 67 of file content.node_form.inc.
        $element = (array)content_field_form($form, $form_state, $field);  // This does the element rendering.
        $form += $element;                               // Add the field to the form.
      }
      
      break;

    case 3: // page 3
      $form['help'] = array(
        '#value' => '<div class="setoff"><h3>Instructions for Page 3.</h3></div>',
        '#weight' => -20,
      );

      $fields = array('field_modelversion_license', 'field_modelversion_review', 'field_modelversion_runconditions');
      foreach ($fields as $name) {
        $field = content_fields($name);                  //Create the field by calling the CCK API.
        $form['#field_info'][$name] = $field;            // This is a non-display container for passing the field information along.
        $form_state['values'][$name] = $version->$name;  // If you set the field value here it will be used as default for the field, see line 67 of file content.node_form.inc.
        $element = (array)content_field_form($form, $form_state, $field);  // This does the element rendering.
        $form += $element;                               // Add the field to the form.
      }
      
      break;
  }

  // Back button
  if ($form_state['storage']['step'] > 1) {
    $form['back'] = array( //corresponds to 'edit-back' in form_submit
      '#value' => 'back',
      '#type' => 'submit',
      '#weight' => 20
    );
  }
  //'next' appears at every step
  $form['next'] = array(//corresponds to 'edit-next' in form_submit
    '#type' => 'submit',
    '#value' => 'submit',
    '#weight' => 21
  );

  return $form;
}
*/

/**
 * Implementation of hook_validate().
 *
 */
/* function _modelversion_add_form_validate($form, &$form_state) {
 
} */

/**
 * Implementation of hook_submit().
 *
 */
/* function _modelversion_add_form_submit($form, &$form_state) {
  //multistep processing
  if (!$form_state['storage']['values']) {
    $form_state['storage']['values'] = array();
  }

  //increment the button, overwrite the storage values with the new values, and return
  if ($form_state['clicked_button']['#id'] == 'edit-back') {
    $form_state['storage']['step']--;
    $form_state['storage']['values'] = $form_state['values'] + $form_state['storage']['values'];
    return;
  } elseif ($form_state['clicked_button']['#id'] == 'edit-next' && $form_state['storage']['step'] < VERSION_STEPS) {
    $form_state['storage']['step']++;
    $form_state['storage']['values'] = $form_state['values'] + $form_state['storage']['values'];
    return;
  }

  //if this is the last step, save the data
  global $user;

  module_load_include('inc', 'node', 'node.pages');  // new for Drupal 6
  
  $modelnid = arg(1);
  $action = arg(3);
  $versionnid = arg(4);
  $action_text = "";

  // Load the model node and setup version variable
  $model = node_load($modelnid);
  $version = new stdClass();

  if ($action == 'edit') {
    $version = node_load($versionnid);
  } else {
    $version->type = 'modelversion';
  }

  $new_state = array();  // Use to setup form_state array for the drupal_execute function.  This might be a little cumbersome, but I am not sure drupal_execute can handle processing the field values we stored in $form_state[storage]
  
  //$new_state['values'] = $form_state['storage']['values'];  // Grab the storage values
  //$new_state['values'] = $form_state['values'];  // Then grab the final page values

  if ($action == 'edit') {
    $new_state['values']['title'] = $version->title;
  } else {
    $new_state['values']['title'] = $model->title ." - Version ". helper_get_max_versionnum($modelnid);
  }

  $new_state['values']['body'] = $form_state['storage']['values']['notes'];
  $new_state['values']['type'] = 'modelversion';  // drupal_execute() will use these values for generating the new node
  $new_state['values']['status'] = 1;
  $new_state['values']['promote'] = 0;
  $new_state['values']['sticky'] = 0;
  $new_state['values']['format'] = 1;
  $new_state['values']['language'] = 'en';
  $new_state['values']['name'] =  $user->name;

  if ($action == 'add') {
    $new_state['values']['field_modelversion_number'][0]['value'] = helper_get_max_versionnum($modelnid);
    $new_state['values']['field_modelversion_modelnid'][0]['value'] = $modelnid;
    $new_state['values']['field_modelversion_uri'][0]['value'] = $model->field_model_uri[0]['value'];
  }
  $new_state['values']['field_modelversion_language'] = $form_state['storage']['values']['field_modelversion_language'];
  $new_state['values']['field_modelversion_otherlang'] = $form_state['storage']['values']['field_modelversion_otherlang'];
  $new_state['values']['field_modelversion_langversion'] = $form_state['storage']['values']['field_modelversion_langversion'];
  $new_state['values']['field_modelversion_os'] = $form_state['storage']['values']['field_modelversion_os'];
  $new_state['values']['field_modelversion_osversion'] = $form_state['storage']['values']['field_modelversion_osversion'];
  $new_state['values']['field_modelversion_platform'] = $form_state['storage']['values']['field_modelversion_platform'];
  $new_state['values']['field_modelversion_platformver'] = $form_state['storage']['values']['field_modelversion_platformver'];
  $new_state['values']['field_modelversion_license'] = $form_state['values']['field_modelversion_license'];
  $new_state['values']['field_modelversion_review'] = $form_state['values']['field_modelversion_review'];
  $new_state['values']['field_modelversion_runconditions'] = $form_state['values']['field_modelversion_runconditions'];

  $version->field_modelversion_code = $form_state['storage']['values']['field_modelversion_code']; 
  $version->field_modelversion_documentation = $form_state['storage']['values']['field_modelversion_documentation']; 
  $version->field_modelversion_sensitivity = $form_state['storage']['values']['field_modelversion_sensitivity']; 
  $version->field_modelversion_dataset = $form_state['storage']['values']['field_modelversion_dataset'];  
  $version->field_modelversion_addfiles = $form_state['storage']['values']['field_modelversion_addfiles']; 

  $new_state['values']['op'] = t('Save');  // This seems to be a required value

  //clear the storage and rebuild so the form doesn't rebuild and #redirect works
  $form_state['rebuild'] = '';
  unset($form_state['storage']);

  drupal_execute('modelversion_node_form', $new_state, (object) $version); 
  $errors = form_get_errors();

  if (count($errors)) {
    // Deal with any errors generated by drupal_execute()
    drupal_set_message("Error saving model: \n". $errors);
  }

  drupal_goto('model/'. $new_state['values']['field_modelversion_uri'][0]['value'] .'/version/'. $new_state['values']['field_modelversion_number'][0]['value']);
}
*/




/*
function _model_view() {
  $output = '';
  $view_args = array(arg(1));
  $display_id = 'page_6';
  
  $view = views_get_view('model');
  $view->set_arguments($view_args);
  $view->set_display($display_id);
  $view->pre_execute();
  $view->execute();

  $results = $view->result;
  //print '<pre>'; print_r($results); print '</pre>';

  $output .= '<div class="model-pane-1">';
  $output .= '<p>'. $view->render_field('field_fullname_value', 0) .'</p>';
  foreach ($view->result as $id => $result) {
    //print '<pre>'; print_r($result); print '</pre>';
    $output .= '<a class="tag" href="/category/models/'. $view->render_field('field_model_tags_value', $id) .'">'. $view->render_field('field_model_tags_value', $id) .'</a>';
  }
  $output .= '</div>';

  $display_id = 'page_4';
  $view = views_get_view('model');
  $view->set_arguments($view_args);
  $view->set_display($display_id);
  $view->pre_execute();
  $view->execute();
  //print '<pre>'; print_r($view->result); print '</pre>';

  $output .= '<div class="model-pane-2">';
  $output .= $view->render_field('field_model_image_fid', 0); 
  $output .= '</div>';


  $output .= '<div class="model-pane-3">';
  $output .= '<h2>Versions</h2>';

  $display_id = 'page_3';
  $view = views_get_view('modelversion');
  $view->set_arguments($view_args);
  $view->set_display($display_id);
  $view->pre_execute();
  $view->execute();
  //print '<pre>'; print_r($view->result); print '</pre>';
  $output .= '</div>';
  if (!empty($view)) {
    $output .= $view->execute_display($display_id , $view_args);
  }

  drupal_set_title(check_plain($results[0]->node_title));
  return $output;
}
*/


