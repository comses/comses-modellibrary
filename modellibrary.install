<?php
/**
 * Implementation of hook_install
 */
function modellibrary_install() {
  $query = "INSERT INTO {modellibrary_language} (id, name, weight) VALUES"
          ."(0, 'Other', 100),"
          ."(1, 'C', 0),"
          ."(2, 'C++', 0),"
          ."(3, 'Java', 0),"
          ."(4, 'Logo (variant)', 0),"
          ."(5, 'Perl', 0),"
          ."(6, 'Python', 0);";
  db_query($query);

  $query = "INSERT INTO {modellibrary_license} (id, name, address, weight) VALUES"
          ."(1, 'GNU GPL, Version 2', 'http://www.gnu.org/licenses/gpl-2.0.html', 0),"
          ."(2, 'GNU GPL, Version 3', 'http://www.gnu.org/licenses/gpl-3.0.html', 0),"
          ."(3, 'Apache License, Version 2.0', 'http://www.apache.org/licenses/LICENSE-2.0.html', 0),"
          ."(4, 'Creative Commons (cc by)', 'http://creativecommons.org/licenses/by/3.0/', 0),"
          ."(5, 'Creative Commons (cc by-sa)', 'http://creativecommons.org/licenses/by-sa/3.0/', 0),"
          ."(6, 'Creative Commons (cc by-nd)', 'http://creativecommons.org/licenses/by-nd/3.0', 0),"
          ."(7, 'Creative Commons (cc by-nc)', 'http://creativecommons.org/licenses/by-nc/3.0', 0),"
          ."(8, 'Creative Commons (cc by-nc-sa)', 'http://creativecommons.org/licenses/by-nc-sa/3.0', 0),"
          ."(9, 'Creative Commons (cc by-nc-nd)', 'http://creativecommons.org/licenses/by-nc-nd/3.0', 0),"
          ."(10, 'Academic Free License 3.0', 'http://www.opensource.org/licenses/afl-3.0.php', 0);";
  db_query($query);

  $query = "INSERT INTO {modellibrary_os} (id, name, weight) VALUES"
          ."(0, 'Other', 100),"
          ."(1, 'Linux', 0),"
          ."(2, 'Apple OS X', 0),"
          ."(3, 'Microsoft Windows', 0),"
          ."(4, 'Platform Independent', 0);";
  db_query($query);

  $query = "INSERT INTO {modellibrary_platform} (id, name, address, weight) VALUES"
          ."(0, 'Other', NULL, 100),"
          ."(1, 'Ascape 5', 'http://ascape.sourceforge.net/', 0),"
          ."(2, 'Breve', 'http://www.spiderland.org/', 0),"
          ."(3, 'Cormas', 'http://cormas.cirad.fr/en/outil/outil.htm', 0),"
          ."(4, 'DEVSJAVA', 'http://www.acims.arizona.edu/SOFTWARE/software.shtml', 0),"
          ."(5, 'Ecolab', 'http://ecolab.sourceforge.net/', 0),"
          ."(6, 'Mason', 'http://www.cs.gmu.edu/~eclab/projects/mason/', 0),"
          ."(7, 'MASS', 'http://mass.aitia.ai/', 0),"
          ."(8, 'MobilDyc', 'http://w3.avignon.inra.fr/mobidyc/index.php/English_summary', 0),"
          ."(9, 'NetLogo', 'http://ccl.northwestern.edu/netlogo/', 0),"
          ."(10, 'Repast', 'http://repast.sourceforge.net/', 0),"
          ."(11, 'Sesam', 'http://www.simsesam.de/', 0),"
          ."(12, 'StarLogo', 'http://education.mit.edu/starlogo/', 0),"
          ."(13, 'Swarm', 'http://www.swarm.org/', 0),"
          ."(14, 'AnyLogic', 'http://www.anylogic.com/', 0),"
          ."(15, 'Matlab', 'http://www.mathworks.com/products/matlab/', 0);";
  db_query($query);
}


/**
 * Implementation of hook_uninstall
 */
function modellibrary_uninstall() {
    // the type_name must be the type_name
    // as specified in the .def.inc file

    // Delete model and modelversion nodes first.

    #node_type_delete('model');
    #node_type_delete('modelversion');
    menu_rebuild();
}

function modellibrary_schema() {
  $schema['modellibrary_language'] = array(
    'description' => 'Table for programming language selection list options',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a language.',
        'type' => 'serial',
        'not null' => TRUE),
      'name' => array(
        'description' => 'The name of the programming language.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 128,
      ),
      'address' => array(
        'description' => 'The node id for the model being reviewed.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 255,
      ),
      'weight' => array(
        'description' => 'The weight field to set language order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
    ),
    'indexes' => array(
      'name'  => array('name'),
      'weight'  => array('weight'),
    ),
    'primary key'  => array('rid'),
  );

  $schema['modellibrary_license'] = array(
    'description' => 'Table for software license selection list options',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a license.',
        'type' => 'serial',
        'not null' => TRUE),
      'name' => array(
        'description' => 'The name of the license.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 128,
      ),
      'address' => array(
        'description' => 'The web address of the license.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 255,
      ),
      'weight' => array(
        'description' => 'The weight field to set license order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
    ),
    'indexes' => array(
      'name'  => array('name'),
      'weight'  => array('weight'),
    ),
    'primary key'  => array('rid'),
  );

  $schema['modellibrary_os'] = array(
    'description' => 'Table for operating system selection list options',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for an os.',
        'type' => 'serial',
        'not null' => TRUE),
      'name' => array(
        'description' => 'The name of the os.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 128,
      ),
      'weight' => array(
        'description' => 'The weight field to set OS order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
    ),
    'indexes' => array(
      'name'  => array('name'),
      'weight'  => array('weight'),
    ),
    'primary key'  => array('rid'),
  );

  $schema['modellibrary_platform'] = array(
    'description' => 'Table for software platform selection list options',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a platform.',
        'type' => 'serial',
        'not null' => TRUE),
      'name' => array(
        'description' => 'The name of the platform.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 128,
      ),
      'address' => array(
        'description' => 'The web address of the platform.',
        'type' => 'varchar',
        'not null' => FALSE,
        'default' => 0,
        'length' => 255,
      ),
      'weight' => array(
        'description' => 'The weight field to set platform order.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
    ),
    'indexes' => array(
      'name'  => array('name'),
      'weight'  => array('weight'),
    ),
    'primary key'  => array('rid'),
  );
}

/**
 * Add new Model Author fields in Field Collection
 */
function modellibrary_update_7000(&$sandbox) {
  // Load the controller class file.
  module_load_include('inc', 'entity', 'includes/entity.controller');

  // Create Model Author field collection
  $field = array(
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'field_name' => 'field_model_author',
    'label' => 'Model Author(s)',
    'module' => 'field_collection',
    'settings' => array(
      'hide_blank_items' => 1,
      'path' => '',
      'profile2_private' => FALSE,
    ),
    'translatable' => FALSE,
    'type' => 'field_collection',
  );
  field_create_field($field);
  $instance = array(
    'bundle' => 'model',
    'entity_type' => 'node',
    'field_name' => 'field_model_author',
    'label' => 'Model Author(s)',
    'description' => '',
    'required' => FALSE,
    'weight' => 2,
    'widget' => array(
      'type' => 'field_collection_embed',
      'weight' => 2,
    ),
  );
  field_create_instance($instance);


  //First Name
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_model_authorfirst',
    'label' => 'First Name or Initial',
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
      'profile2_private' => FALSE,
    ),
    'translatable' => FALSE,
    'type' => 'text',
  );
  field_create_field($field);
  $instance = array(
    'bundle' => 'field_model_author',
    'entity_type' => 'field_collection_item',
    'field_name' => 'field_model_authorfirst',
    'label' => 'First Name or Initial',
    'description' => 'Please enter author\'s given name or initial, for the model citation.',
    'required' => TRUE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //Middle Name
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_model_authormiddle',
    'label' => 'Middle Name or Initial',
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
      'profile2_private' => FALSE,
    ),
    'translatable' => FALSE,
    'type' => 'text',
  );
  field_create_field($field);
  $instance = array(
    'bundle' => 'field_model_author',
    'entity_type' => 'field_collection_item',
    'field_name' => 'field_model_authormiddle',
    'label' => 'Middle Name or Initial',
    'description' => 'Please enter author\'s middle name or initial, for the model citation.',
    'required' => FALSE,
    'weight' => 1,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );
  field_create_instance($instance);

  //Last Name
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_model_authorlast',
    'label' => 'Last Name or Initial',
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
      'profile2_private' => FALSE,
    ),
    'translatable' => FALSE,
    'type' => 'text',
  );
  field_create_field($field);
  $instance = array(
    'bundle' => 'field_model_author',
    'entity_type' => 'field_collection_item',
    'field_name' => 'field_model_authorlast',
    'label' => 'Last Name or Initial',
    'description' => 'Please enter author\'s last name or initial, for the model citation.',
    'required' => TRUE,
    'weight' => 2,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 2,
    ),
  );
  field_create_instance($instance);
  
}

/**
 * Copy old model author values to the new Model Author fields
 */
function modellibrary_update_7001(&$sandbox) {
  // copy field values over
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','node')
        ->entityCondition('bundle','model');
  $result = $query->execute();
  $nids = array_keys($result['node']);

  foreach ($nids as $index => $nid) {
    $delta = 0;
    $lang = LANGUAGE_NONE;

    $node = node_load($nid); // ...where $nid is the node id

    // Migrate Author 1
    if (isset($node->field_model_author1last[$lang][0])) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_model_author'));
      $field_collection_item->setHostEntity('node', $node);

      // First name
      $field_collection_item->field_model_authorfirst[$lang][0] = $node->field_model_author1first[$lang][0];
      // Middle name
      if (isset($node->field_model_author1middle[$lang][0]))
        $field_collection_item->field_model_authormiddle[$lang][0] = $node->field_model_author1middle[$lang][0];
      else 
        $field_collection_item->field_model_authormiddle[$lang][0] = '';
      // Last name
      $field_collection_item->field_model_authorlast[$lang][0] = $node->field_model_author1last[$lang][0];

      $field_collection_item->save();
    }

    // Migrate Author 2
    if (isset($node->field_model_author2last[$lang][0])) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_model_author'));
      $field_collection_item->setHostEntity('node', $node);

      // First name
      $field_collection_item->field_model_authorfirst[$lang][0] = $node->field_model_author2first[$lang][0];
      // Middle name
      if (isset($node->field_model_author2middle[$lang][0]))
        $field_collection_item->field_model_authormiddle[$lang][0] = $node->field_model_author2middle[$lang][0];
      else 
        $field_collection_item->field_model_authormiddle[$lang][0] = '';
      // Last name
      $field_collection_item->field_model_authorlast[$lang][0] = $node->field_model_author2last[$lang][0];

      $field_collection_item->save();
    }

    // Migrate Author 3
    if (isset($node->field_model_author3last[$lang][0])) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_model_author'));
      $field_collection_item->setHostEntity('node', $node);

      // First name
      $field_collection_item->field_model_authorfirst[$lang][0] = $node->field_model_author3first[$lang][0];
      // Middle name
      if (isset($node->field_model_author3middle[$lang][0]))
        $field_collection_item->field_model_authormiddle[$lang][0] = $node->field_model_author3middle[$lang][0];
      else 
        $field_collection_item->field_model_authormiddle[$lang][0] = '';
      // Last name
      $field_collection_item->field_model_authorlast[$lang][0] = $node->field_model_author3last[$lang][0];

      $field_collection_item->save();
    }

    // Migrate Author 4
    if (isset($node->field_model_author4last[$lang][0])) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_model_author'));
      $field_collection_item->setHostEntity('node', $node);

      // First name
      $field_collection_item->field_model_authorfirst[$lang][0] = $node->field_model_author4first[$lang][0];
      // Middle name
      if (isset($node->field_model_author4middle[$lang][0]))
        $field_collection_item->field_model_authormiddle[$lang][0] = $node->field_model_author4middle[$lang][0];
      else 
        $field_collection_item->field_model_authormiddle[$lang][0] = '';
      // Last name
      $field_collection_item->field_model_authorlast[$lang][0] = $node->field_model_author4last[$lang][0];

      $field_collection_item->save();
    }

    // Migrate Author 5
    if (isset($node->field_model_author5last[$lang][0])) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_model_author'));
      $field_collection_item->setHostEntity('node', $node);

      // First name
      $field_collection_item->field_model_authorfirst[$lang][0] = $node->field_model_author5first[$lang][0];
      // Middle name
      if (isset($node->field_model_author5middle[$lang][0]))
        $field_collection_item->field_model_authormiddle[$lang][0] = $node->field_model_author5middle[$lang][0];
      else 
        $field_collection_item->field_model_authormiddle[$lang][0] = '';
      // Last name
      $field_collection_item->field_model_authorlast[$lang][0] = $node->field_model_author5last[$lang][0];

      $field_collection_item->save();
    }
  }
}

/**
 * Delete unused fields from 'model' content type
 */
function modellibrary_update_7002(&$sandbox) {
  // delete fields
  $fields = array(
    'field_model_locked',
    'field_model_enabled',
    'field_model_author1first',
    'field_model_author1middle',
    'field_model_author1last',
    'field_model_author2first',
    'field_model_author2middle',
    'field_model_author2last',
    'field_model_author3first',
    'field_model_author3middle',
    'field_model_author3last',
    'field_model_author4first',
    'field_model_author4middle',
    'field_model_author4last',
    'field_model_author5first',
    'field_model_author5middle',
    'field_model_author5last',
  );

  foreach ($fields as $fieldname) {
    field_delete_field($fieldname);
  }

  field_purge_batch(count($fields) + 5);
}

/**
 * Add Node Reference to link modelversion nodes to their model nodes
 *
 * Replacing modelnid text field with a node reference. This enables proper JOINS between
 * model and modelversion nodes in Views.
 */
function modellibrary_update_7003(&$sandbox) {
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_model',
    'label' => 'Model',
    'module' => 'node_reference',
    'settings' => array(
      'profile2_private' => FALSE,
      'referenceable_types' => array(
        'biblio' => 0,
        'blog' => 0,
        'book' => 0,
        'event' => 0,
        'forum' => 0,
        'model' => 'model',
        'modelversion' => 0,
        'page' => 0,
        'panel' => 0,
        'poll' => 0,
        'site_update' => 0,
        'story' => 0,
        'video' => 0,
        'webform' => 0,
      ),
      'view' => array(
        'args' => array(),
        'display_name' => '',
        'view_name' => '',
      ),
    ),
    'translatable' => FALSE,
    'type' => 'node_reference',
  );
  field_create_field($field);
  $instance = array(
    'bundle' => 'modelversion',
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_model',
    'label' => 'Model',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'node_reference',
      'settings' => array(
        'autocomplete_match' => 'starts_with',
        'autocomplete_path' => 'node_reference/autocomplete',
        'size' => '60',
      ),
      'type' => 'node_reference_autocomplete',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

}

/**
 * Copy 'modelnid' fields to 'model' Node Reference fields
 */
function modellibrary_update_7004(&$sandbox) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','node')
        ->entityCondition('bundle','modelversion');
  $result = $query->execute();
  $nids = array_keys($result['node']);

  $delta = 0;
  $lang = LANGUAGE_NONE;

  foreach ($nids as $index => $nid) {
    $node = node_load($nid); 

    $node->field_modelversion_model[$lang][$delta]['nid'] = $node->field_modelversion_modelnid[$lang][$delta]['value'];

    node_save($node);
  }
}

/**
 * Delete unused 'modelnid' field
 */
function modellibrary_update_7005(&$sandbox) {
  field_delete_field('field_modelversion_modelnid');
  field_purge_batch(count($fields) + 5);
}

/**
 * Create options tables for dropdown fields
 */
function modellibrary_update_7006(&$sandbox) {
  $query = "CREATE TABLE IF NOT EXISTS {modellibrary_language} ("
          ."id bigint(20) unsigned NOT NULL AUTO_INCREMENT,"
          ."name varchar(128) DEFAULT NULL,"
          ."weight int(11) NOT NULL DEFAULT '0',"
          ."PRIMARY KEY (id),"
          ."UNIQUE KEY id (id),"
          ."KEY name (name),"
          ."KEY weight (weight)"
          .") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=8 ;";
  db_query($query);

  $query = "INSERT INTO {modellibrary_language} (id, name, weight) VALUES"
          ."(0, 'Other', 100),"
          ."(1, 'C', 0),"
          ."(2, 'C++', 0),"
          ."(3, 'Java', 0),"
          ."(4, 'Logo (variant)', 0),"
          ."(5, 'Perl', 0),"
          ."(6, 'Python', 0);";
  db_query($query);

  $query = "CREATE TABLE IF NOT EXISTS {modellibrary_license} ("
          ."id bigint(20) unsigned NOT NULL AUTO_INCREMENT,"
          ."name varchar(128) DEFAULT NULL,"
          ."address varchar(255) DEFAULT NULL,"
          ."weight int(11) NOT NULL DEFAULT '0',"
          ."PRIMARY KEY (id),"
          ."UNIQUE KEY id (id),"
          ."KEY name (name),"
          ."KEY weight (weight)"
          .") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=11 ;";
  db_query($query);

  $query = "INSERT INTO {modellibrary_license} (id, name, address, weight) VALUES"
          ."(1, 'GNU GPL, Version 2', 'http://www.gnu.org/licenses/gpl-2.0.html', 0),"
          ."(2, 'GNU GPL, Version 3', 'http://www.gnu.org/licenses/gpl-3.0.html', 0),"
          ."(3, 'Apache License, Version 2.0', 'http://www.apache.org/licenses/LICENSE-2.0.html', 0),"
          ."(4, 'Creative Commons (cc by)', 'http://creativecommons.org/licenses/by/3.0/', 0),"
          ."(5, 'Creative Commons (cc by-sa)', 'http://creativecommons.org/licenses/by-sa/3.0/', 0),"
          ."(6, 'Creative Commons (cc by-nd)', 'http://creativecommons.org/licenses/by-nd/3.0', 0),"
          ."(7, 'Creative Commons (cc by-nc)', 'http://creativecommons.org/licenses/by-nc/3.0', 0),"
          ."(8, 'Creative Commons (cc by-nc-sa)', 'http://creativecommons.org/licenses/by-nc-sa/3.0', 0),"
          ."(9, 'Creative Commons (cc by-nc-nd)', 'http://creativecommons.org/licenses/by-nc-nd/3.0', 0),"
          ."(10, 'Academic Free License 3.0', 'http://www.opensource.org/licenses/afl-3.0.php', 0);";
  db_query($query);

  $query = "CREATE TABLE IF NOT EXISTS {modellibrary_os} ("
          ."id bigint(20) unsigned NOT NULL AUTO_INCREMENT,"
          ."name varchar(128) DEFAULT NULL,"
          ."weight int(11) NOT NULL DEFAULT '0',"
          ."PRIMARY KEY (id),"
          ."UNIQUE KEY id (id),"
          ."KEY name (name),"
          ."KEY weight (weight)"
          .") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;";
  db_query($query);

  $query = "INSERT INTO {modellibrary_os} (id, name, weight) VALUES"
          ."(0, 'Other', 100),"
          ."(1, 'Linux', 0),"
          ."(2, 'Apple OS X', 0),"
          ."(3, 'Microsoft Windows', 0),"
          ."(4, 'Platform Independent', 0);";
  db_query($query);

  $query = "CREATE TABLE IF NOT EXISTS {modellibrary_platform} ("
          ."id bigint(20) unsigned NOT NULL AUTO_INCREMENT,"
          ."name varchar(128) DEFAULT NULL,"
          ."address varchar(255) DEFAULT NULL,"
          ."weight int(11) NOT NULL DEFAULT '0',"
          ."PRIMARY KEY (id),"
          ."UNIQUE KEY id (id),"
          ."KEY name (name),"
          ."KEY weight (weight)"
          .") ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=17 ;";
  db_query($query);

  $query = "INSERT INTO {modellibrary_platform} (id, name, address, weight) VALUES"
          ."(0, 'Other', NULL, 100),"
          ."(1, 'Ascape 5', 'http://ascape.sourceforge.net/', 0),"
          ."(2, 'Breve', 'http://www.spiderland.org/', 0),"
          ."(3, 'Cormas', 'http://cormas.cirad.fr/en/outil/outil.htm', 0),"
          ."(4, 'DEVSJAVA', 'http://www.acims.arizona.edu/SOFTWARE/software.shtml', 0),"
          ."(5, 'Ecolab', 'http://ecolab.sourceforge.net/', 0),"
          ."(6, 'Mason', 'http://www.cs.gmu.edu/~eclab/projects/mason/', 0),"
          ."(7, 'MASS', 'http://mass.aitia.ai/', 0),"
          ."(8, 'MobilDyc', 'http://w3.avignon.inra.fr/mobidyc/index.php/English_summary', 0),"
          ."(9, 'NetLogo', 'http://ccl.northwestern.edu/netlogo/', 0),"
          ."(10, 'Repast', 'http://repast.sourceforge.net/', 0),"
          ."(11, 'Sesam', 'http://www.simsesam.de/', 0),"
          ."(12, 'StarLogo', 'http://education.mit.edu/starlogo/', 0),"
          ."(13, 'Swarm', 'http://www.swarm.org/', 0),"
          ."(14, 'AnyLogic', 'http://www.anylogic.com/', 0),"
          ."(15, 'Matlab', 'http://www.mathworks.com/products/matlab/', 0);";
  db_query($query);

}

/**
 * Create options tables for dropdown fields
 */
function modellibrary_update_7007(&$sandbox) {
  //Language
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_language2',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_language2',
    'bundle' => 'modelversion',
    'label' => 'Programming Language',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //License
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_license2',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_license2',
    'bundle' => 'modelversion',
    'label' => 'Software License',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //OS
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_os2',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_os2',
    'bundle' => 'modelversion',
    'label' => 'Operating System',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //Platform
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_platform2',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_platform2',
    'bundle' => 'modelversion',
    'label' => 'Modeling Platform',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  // copy field values over
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','node')
        ->entityCondition('bundle','modelversion');
  $result = $query->execute();
  $nids = array_keys($result['node']);

  foreach ($nids as $index => $nid) {
    $delta = 0;
    $lang = LANGUAGE_NONE;
    $node = node_load($nid); // ...where $nid is the node id

    // Copy Language
    $node->field_modelversion_language2[$lang][0]['value'] = $node->field_modelversion_language[$lang][0]['value'];
    $node->field_modelversion_license2[$lang][0]['value'] = $node->field_modelversion_license[$lang][0]['value'];
    $node->field_modelversion_os2[$lang][0]['value'] = $node->field_modelversion_os[$lang][0]['value'];
    $node->field_modelversion_platform2[$lang][0]['value'] = $node->field_modelversion_platform[$lang][0]['value'];
    node_save($node);
  }

  // delete fields
  $fields = array(
    'field_modelversion_language',
    'field_modelversion_license',
    'field_modelversion_os',
    'field_modelversion_platform',
  );

  foreach ($fields as $fieldname) {
    field_delete_field($fieldname);
  }

  field_purge_batch(count($fields) + 5);

  // Recreate original fields

  //Language
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_language',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_language',
    'bundle' => 'modelversion',
    'label' => 'Programming Language',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //License
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_license',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_license',
    'bundle' => 'modelversion',
    'label' => 'Software License',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //OS
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_os',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_os',
    'bundle' => 'modelversion',
    'label' => 'Operating System',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //Platform
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_platform',
    'module' => 'number',
    'translatable' => FALSE,
    'type' => 'number_integer',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_platform',
    'bundle' => 'modelversion',
    'label' => 'Modeling Platform',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'number',
      'type' => 'number',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  // copy field values over
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','node')
        ->entityCondition('bundle','modelversion');
  $result = $query->execute();
  $nids = array_keys($result['node']);

  foreach ($nids as $index => $nid) {
    $delta = 0;
    $lang = LANGUAGE_NONE;
    $node = node_load($nid); // ...where $nid is the node id

    // Copy Language
    $node->field_modelversion_language[$lang][0]['value'] = $node->field_modelversion_language2[$lang][0]['value'];
    $node->field_modelversion_license[$lang][0]['value'] = $node->field_modelversion_license2[$lang][0]['value'];
    $node->field_modelversion_os[$lang][0]['value'] = $node->field_modelversion_os2[$lang][0]['value'];
    $node->field_modelversion_platform[$lang][0]['value'] = $node->field_modelversion_platform2[$lang][0]['value'];
    node_save($node);
  }

  // delete fields
  $fields = array(
    'field_modelversion_language2',
    'field_modelversion_license2',
    'field_modelversion_os2',
    'field_modelversion_platform2',
  );

  foreach ($fields as $fieldname) {
    field_delete_field($fieldname);
  }

  field_purge_batch(count($fields) + 5);
}

/**
 * Add Other field for Platforms and move fields into more consistent names
 */
function modellibrary_update_7008(&$sandbox) {
  //Other Platform
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_platform_oth',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_platform_oth',
    'bundle' => 'modelversion',
    'label' => 'Other Platform',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);
  

  //Language Version
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_language_ver',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_language_ver',
    'bundle' => 'modelversion',
    'label' => 'Language Version',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //Other Language
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_language_oth',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_language_oth',
    'bundle' => 'modelversion',
    'label' => 'Other Language',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //Platform Version
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_platform_ver',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_platform_ver',
    'bundle' => 'modelversion',
    'label' => 'Platform Version',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);

  //OS Version
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_os_version',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_os_version',
    'bundle' => 'modelversion',
    'label' => 'OS Version',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);


  // copy field values over
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','node')
        ->entityCondition('bundle','modelversion');
  $result = $query->execute();
  $nids = array_keys($result['node']);

  foreach ($nids as $index => $nid) {
    $delta = 0;
    $lang = LANGUAGE_NONE;
    $node = node_load($nid); // ...where $nid is the node id

    // Copy Language
    if ($node->field_modelversion_otherlang[$lang][0]['value'] > '') 
      $node->field_modelversion_language_oth[$lang][0]['value'] = $node->field_modelversion_otherlang[$lang][0]['value'];
    if ($node->field_modelversion_langversion[$lang][0]['value'] > '')
      $node->field_modelversion_language_ver[$lang][0]['value'] = $node->field_modelversion_langversion[$lang][0]['value'];
    if ($node->field_modelversion_platformver[$lang][0]['value'] > '')
      $node->field_modelversion_platform_ver[$lang][0]['value'] = $node->field_modelversion_platformver[$lang][0]['value'];
    if ($node->field_modelversion_osversion[$lang][0]['value'] > '')
      $node->field_modelversion_os_version[$lang][0]['value'] = $node->field_modelversion_osversion[$lang][0]['value'];
    node_save($node);
  }

  // delete fields
  $fields = array(
    'field_modelversion_otherlang',
    'field_modelversion_langversion',
    'field_modelversion_platformver',
    'field_modelversion_osversion',
  );

  foreach ($fields as $fieldname) {
    field_delete_field($fieldname);
  }

  field_purge_batch(count($fields) + 5);

}

/**
 * Remove unused fields (Locked, Errors)
 */
function modellibrary_update_7009(&$sandbox) {
  $fields = array(
    'field_model_locked',
    'field_model_enabled',
    'field_model_tags',
    'field_modelversion_locked',
    'field_modelversion_review',
  );

  foreach ($fields as $fieldname) {
    field_delete_field($fieldname);
  }

  field_purge_batch(count($fields) + 5);

}

/**
 * Add field for Other OS
 */
function modellibrary_update_7101(&$sandbox) {
  //Other OS
  $field = array(
    'cardinality' => 1,
    'field_name' => 'field_modelversion_os_oth',
    'module' => 'text',
    'translatable' => FALSE,
    'type' => 'text',
    'type_name' => 'modelversion',
  );
  field_create_field($field);
  $instance = array(
    'entity_type' => 'node',
    'field_name' => 'field_modelversion_os_oth',
    'bundle' => 'modelversion',
    'label' => 'Other OS',
    'description' => '',
    'required' => FALSE,
    'weight' => 0,
    'widget' => array(
      'module' => 'text',
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );
  field_create_instance($instance);
}
