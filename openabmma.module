<?php

// $Id$

/**
 * @file
 * 
 * Provides an agent based model archive within the Drupal framework.  This
 * involves the user creation of new model projects, ability to upload new
 * versions of an ABM project and edit associated metadata.  Members of a
 * review committee should also be able to "star" an ABM project to signify
 * its level of maturity and completeness.
 * 
 *
 */
function openabmma_block ($op='list', $delta=0)
{
    // listing of blocks, such as on the admin/block page
    if ($op == "list") {
        $block[0]["info"] = t("OpenABM Resource Links");
        return $block;
    }
    else if ($op == 'view') {
        $block_content = l ("My models", "models/") . "<br/>"
            . l ("Search models", "models/search") . "<br/>";
        //if (user_access ('administer content')) {
            $block_content .= "<br/>" . l ("Model licenses", "config/licenses");
            $block_content .= "<br/>" . l ("Member roles", "config/roles");
            $block_content .= "<br/>" . l ("Programming languages", "config/planguages");
            $block_content .= "<br/>" . l ("Frameworks", "config/frameworks");
        //}
        $block['subject'] = 'Model Archive';
        $block['content'] = $block_content;
        return $block;
    }
}
 
function openabmma_menu($may_cache) {

    $items = array();
    if ($may_cache) {
        // admin settings for model archive.  Right now I can only think of
        // group membership in the review committee as a configurable option.
        $items[] = array(
            'path' => 'admin/settings/openabmma',
            'title' => t('OpenABM Model Archive Settings'),
            'description' => t('Change model archive settings.'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_settings_form'),
            'type' => MENU_CALLBACK,
            'access' => user_access('administer site configuration')
            );
/*
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_newModel'),
            );
*/
/*
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_addModel',
            'type' => MENU_CALLBACK,
            );
*/

            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array ('openabmma_addModel')
            );

            $items[] = array(
            'path' => 'models/add/step01',
            'title' => t('Step 01 :: Adding a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_addModel01'),
            );

        $items[] = array(
            'path' => 'models/search',
            'title' => t('Search Models'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models',
            'title' => t('My models'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_showProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles',
            'title' => t('User roles'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showRoles',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses',
            'title' => t('Manage licenses'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showLicenses',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages',
            'title' => t('Programming languages listed'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showPLanguages',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks',
            'title' => t('Manage frameworks'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showFrameworks',
            'type' => MENU_CALLBACK
            );
    }
    else {
        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/add/version",
            'title' => t('Step 01 :: Adding a version to your model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_addVersion',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/add/" . arg(3) . "/step01",
            'title' => t('Step 01 :: Adding a version'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array ('openabmma_addVersion01'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/add/" . arg(3) . "/step02",
            'title' => t('Step 02 :: Adding a version'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array ('openabmma_addVersion02'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/add/" . arg(3) . "/step03",
            'title' => t('Step 03 :: Adding a version'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array ('openabmma_addVersion03'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/add/" . arg(3) . "/step04",
            'title' => t('Step 04 :: Adding a version'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array ('openabmma_addVersion04'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . "/" . arg(2) . "/reviewnote",
            'title' => t('Step 04 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_askIfReview),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step01",
            'title' => t('Step 01 :: Editing your model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form','callback arguments' => array(openabmma_addModel01),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step02",
            'title' => t('Step 02 :: Editing your model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel02),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step03",
            'title' => t('Step 03 :: Editing your model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel03),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step04",
            'title' => t('Step 04 :: Editing your model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel04),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step02",
            'title' => t('Step 02 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel02),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step03",
            'title' => t('Step 03 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel03),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step04",
            'title' => t('Step 04 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel04),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step05",
            'title' => t('Step 05 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel05),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/add/' . arg(3) . "/complete",
            'title' => t('Add new version complete'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_addVersionComplete',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles/delete/' . arg(3),
            'title' => t('Delete role'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteRole',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/search/' . arg (2),
            'title' => t('Search models'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses/delete/' . arg(3),
            'title' => t('Delete license'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteLicense',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages/delete/' . arg(3),
            'title' => t('Delete language'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deletePLanguages',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks/delete/' . arg(3),
            'title' => t('Delete framework'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteFramework',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files',
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files/' . arg(3),
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/metadata',
            'title' => t('Model metadata'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_metadata'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members/delete',
            'title' => t('Delete members'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_deleteMember',
            'callback arguments' => array(arg(1), arg(4)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members',
            'title' => t('Model members'),
            'description' => "",
            'access' => user_access ('modify models'),
            'callback' => 'openabmma_manageMembers',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/viewMetadata',
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('view models'),
            'callback' => 'openabmma_showMetaData',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1),
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('view models'),
            'callback' => 'openabmma_openProject',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );
    }

    return $items;
}

function openabmma_showMetaData ($pName='') {
    global $user;
    if ($pName == '')
        return '';

    $owner = openabmma_getModelOwner ($pName);
    if ($owner == "")
        drupal_goto ("models");

    if ($user->name != $owner && openabmma_inList ($user->name, openabmma_getModelMembers ($pName)) == -1)
    {
        openabmma_accessError ('Only model members can view metadata for a model.');
        return '';
    }

    $query = "SELECT owner_uid, name, title, description, model_language_id, os, framework, reference_text, examples, submittedReview, visible, replicatedModel, replicators, reference_url, license_id from openabm_model WHERE name='%s'";
    $result = (array) db_fetch_object (db_query ($query, $pName));
    $owner_uid = $result ['owner_uid'];
    $name = $result ['name'];
    $title = $result ['title'];
    $description = $result ['description'];
    $replicated = $result ['replicatedModel'] == "1" ? "Yes" : "No";
    $replicators = $result ['replicators'];
    $reference_url = $result ['reference_url'];
    $model_language_id = $result ['model_language_id'];
    $os = $result ['os'];
    $framework = $result ['framework'];
    $reference_text = $result ['reference_text'];
    $examples = $result ['examples'];
    $submittedReview = $result ['submittedReview'] == "1" ? "Yes" : "No";
    $visible = $result ['visible'] == "1" ? "Yes" : "No";
    $replicators = $result ['replicators'];
    $reference_url = $result ['reference_url'];
    $license_id = $result ['license_id'];

    $query = "SELECT name from openabm_model_language WHERE id=%d";
    $result = (array) db_fetch_object (db_query ($query, $model_language_id));
    $model_language_id = $result ['name'];

    $query = "SELECT license_text from openabm_license WHERE id=%d";
    $result = (array) db_fetch_object (db_query ($query, $license_id));
    $license_id = $result ['license_text'];

    $keywordList = '';
    $query = "SELECT keyword FROM openabm_model_keywords WHERE model_id=%d";
    $result = db_query ($query, openabmma_getModelId ($pName));
    while ($element = db_fetch_object ($result))
        $keywordList .= $element->keyword . ", ";
    $keywordList = substr ($keywordList, 0, strlen($keywordList)-2);

    $output = "<br/><p><table border='0' cellpadding='0' cellspacing='0' width='100%'>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model name:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $name . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model description:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $description . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model title:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $title . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Replicated model:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $replicated . "</i></td></tr>";
    if ($replicated == "Yes")
    {
        $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Replicators:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $replicators . "</i></td></tr>";
        $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Reference URL:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $reference_url . "</i></td></tr>";
    }

    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Visible to public:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $visible . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Programming language:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $model_language_id . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Operating System:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $os . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Framework:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $framework . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>License:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $license_id . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model keywords:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $keywordList . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>References:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $reference_text . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Examples:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $examples . "</i></td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Submitted for review:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $submittedReview . "</i></td></tr>";

    $output .= "</table>";

    $output .= "<p></p>" . l ("To change your metadata settings, click here", "models/edit/" . $pName . "/step01");
    return $output;
}

function openabmma_deletePLanguages ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_model_language WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/planguages");	
	return '';
}

function openabmma_showPLanguages ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_model_language";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this language from the list?')) window.location.replace('" . url("config/planguages/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " language(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_pLanguage);
	return $output;
}

function openabmma_add_pLanguage_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_model_language (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/planguages");
}

function openabmma_add_pLanguage ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new programming languages to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Language name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteFramework ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_framework WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/frameworks");
	return '';
}

function openabmma_showFrameworks ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_framework";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this framework from the list?')) window.location.replace('" . url("config/frameworks/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " framework(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_framework);
	return $output;
}

function openabmma_add_framework_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_framework (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/frameworks");
}

function openabmma_add_framework ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new framework to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Framework name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_askIfReview () {
	global $user;
	$pName = arg(1);
        // FIXME: duplicated code all over the place
	if ($user->name != openabmma_getModelOwner ($pName))
            return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

        // FIXME: use CSS instead of repeating style elements over and over
        // again.  Cardinal programming sin - Don't Repeat Yourself.


	$output .= "<br/><p><table border='0' cellpadding='0' cellspacing='0' width='100%'>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><b>Step 1</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'>Version description and visibility to public</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 2</b></td><td style='border-bottom: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa'>Code files, language and platform details</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 3</b></td><td style='border-bottom: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa'>License information, References, Examples and Sensitivity data</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 4</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Collecting documents for model review</td></tr>";
$output .= "</table>";

$output .= "<p>&nbsp;<br/>At this point, you have completed the basic requirements of submitting a version of a model to OpenABM.org.<br/>You could complete the process of adding your version to the OpenABM repository by clicking on the 'Finish' button below.</p>";

$output .= "<p>Alternatively, you could indicate the version is ready for a review by the committee at OpenABM.org. If you wish to submit your model for review, click the 'Proceed to Submit Version for Review' button. In that case, you would be directed to a page that asks for some more information such as the ODD protocol.</p>";

$output .= "<p><u>Note: You can submit the version for review at any time by clicking on the \"Send this version for review\" link in the model workspace.</u></p>";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#visible" => FALSE,
		"#description" => null,
	);

	$form ["details"]["model_name"] = array (
		"#type" => "item",
		"#title" => null,
		"#value" => $output,
		"#description" => null,
	);

	$form ["details"]["review"] = array (
		"#type" => "submit",
		"#value" => t("Proceed to Submit Version for Review"),
		"#submit" => TRUE
	);

	$form ["details"]["noreview"] = array (
		"#type" => "submit",
		"#value" => t("Finish the Add Version process"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_askIfReview_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(1);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$versionString = arg (2);
	$versionNumber = substr ($versionString, -1);

	if ($_POST ["op"] == "Proceed to Submit Version for Review")
		drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "/step04");
	else if ($_POST ["op"] == "Finish the Add Version process")
		drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "complete");
	else if ($_POST ["op"] == "Back")
		drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "/step03");
	else
		drupal_goto ("/");
}

function openabmma_uploadFile ($subdir, $formVar, $permission=0760) {
    if ($formVar == '')
        return;

    $dir = "files";
    if ($subdir != "")
        $dir .= "/" . $subdir;

    $is_writable = file_check_directory($dir, 1);
    if($is_writable) {
        $source = file_check_upload($formVar);
        if ($source == null)
            return null;
        // Security measure to prevent exploit of file.php.png
        $source->filename = upload_munge_filename($source->filename);

        if ($file = file_save_upload($source,$dir ))
        {
            //			if (image_get_info($file->filepath))
            //				drupal_set_message(t('New image saved.'));
            //			else
            //			{
            //				file_delete($file->filepath);
            //				drupal_set_message('Uploaded file does not appear to be a valid image file. Please try again.');
            //			}
            chmod (realpath ($dir . "/" . $source->filename), $permission);
            return $source->filename;
        }
        else
            return null;
    }
    else
        return null;
}

function openabmma_addVersion02_submit ($form_id, $edit)
{
	global $user;
	$errString = '';
	$pName = arg(1);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$action = arg(2);
	if ($_POST ["op"] == "Back")
		drupal_goto ("mymodels/" . $pName . "/add/version1/step01");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	openabmma_cleantmp ($pName . '/v' . $versionNumber . '/code');
	if (openabmma_uploadFile ($pName . '/v' . $versionNumber . '/code', 'version_code_file') == null)
	{
		drupal_set_message ("<font color='red'><b>Error uploading code file, please check the path of the file specified</b></font>");
		return;
	}

	if ($errString != "")
	{
		drupal_set_message ("<b><font color='red'>" . $errString . "</font></b>");
		return;
	}

	$query = "UPDATE openabm_model_version SET model_language_id=%d, os=%d, framework='%s' WHERE model_id=%d AND version_num=%d";

	db_query ($query, $edit ["version_language"], $edit ["os"], $edit ["framework"], openabmma_getModelId ($pName), $versionNumber);
	drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "/step03");
}

function openabmma_inList ($value, $arr)
{
	$c = 0;
	foreach ($arr as $val)
	{
		if ($val == $value)
			return $c;
		$c++;
	}

	return -1;
}

function get_openabmma_js_path() {
    return drupal_get_path('module', 'openabmma') . '/openabmma.js';
}

function openabmma_addVersion02 ($edit=null, $item=0) {
    global $user;
    $pName = arg(1);

    drupal_add_js( get_openabmma_js_path() );

    // FIXME: duplicated code
    if ($user->name != openabmma_getModelOwner ($pName))
        return openabmma_formAccessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

    // FIXME:this doesn't work anymore.
    $query = "SELECT model_language_id, os, framework FROM openabm_model_version WHERE model_id=%d AND version_num=%d";
    $result = (array) db_fetch_object (db_query ($query, openabmma_getModelId ($pName), $versionNumber));
    $progLang = $result ['model_language_id'];

    $os = $result ['os'];
    $framework = $result ['framework'];

    $form['#attributes'] = array('enctype' => "multipart/form-data");

    $form['#attributes']['onsubmit'] = 'return validate_code_submission()';

    $form["details"] = array(
            "#type" => 'fieldset',
            "#collapsible" => FALSE,
            "#collapsed" => FALSE,
            "#title" => null,
            "#description" => null,
            );

    $form ["details"]["version_code_file"] = array (
            "#type" => "file",
            "#title" => t("Code file (zipped):")
            );

    $languages = array ();
    $result = db_query ("SELECT id, name FROM openabm_model_language ORDER BY name");
    while ($node = db_fetch_object ($result))
        $languages [$node->id] = $node->name;

    $form ["details"]["version_language"] = array (
            "#type" => "select",
            "#title" => t("Programming Language:"),
            "#options" => $languages,
            "#default_value" => $edit ["prog_language"] == "" ? $progLang : $edit ["prog_language"],
            "#description" => null
            );

    $form ["details"]["other_language"] = array (
            "#type" => "textfield",
            "#title" => t("Other (if not mentioned in above list):"),
            "#maxlength" => 210,
            "#default_value" => $edit ["other_language"],
            "#required" => false
            );

// FIXME: add that crap that parses the output of "show columns from openabm_model_version like 'os'"
    $arrayElements = array ('Windows', 'Linux', 'Mac', 'Platform Independent', 'Other');

    $form ["details"]["os"] = array (
            "#type" => "select",
            "#title" => t("Operating System:"),
            "#default_value" => $edit ["os"] == "" ? openabmma_inList ($os, $arrayElements) : $edit ["os"],
            "#options" => $arrayElements,
            "#description" => null
            );

    $arrayElements = array ();
    $result = db_query ("SELECT name FROM openabm_framework ORDER BY name");
    while ($node = db_fetch_object ($result))
        $arrayElements [$node->name] = $node->name;
    $arrayElements ["Other"] = "Other";

    $form ["details"]["framework"] = array (
            "#type" => "select",
            "#title" => t("Framework used:"),
            "#default_value" => $edit ["framework"] == "" ? $framework : $edit ["framework"],
            "#options" => $arrayElements,
            "#description" => null
            );

    $form ["details"]["submit"] = array (
            "#type" => "submit",
            "#value" => t("Submit"),
            "#submit" => TRUE
            );

    $form ["details"]["cancel"] = array (
            "#type" => "submit",
            "#value" => t("Back"),
            "#submit" => TRUE
            );

    return ($form);	
}

function openabmma_cleantmp($directory)
{
	//FIXME: Better security checks to see which folder/files are being deleted
	if ($directory [0] == '/' || strpos ($directory, "../") != FALSE)
		return;

	if( !$dirhandle = @opendir("files/" . $directory))
		return;

	while(false !== ($filename = readdir($dirhandle)) )
	{
		if( $filename != "." && $filename != ".." )
		{
			$filename = $directory. "/". $filename;
//			drupal_set_message ($filename);
			@unlink($filename);
		}
	}
}

function openabmma_addVersion03_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(1);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	$action = arg(2);
	if ($_POST ["op"] == "Back")
		drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "/step02");

	openabmma_cleantmp ($pName . '/v' . $versionNumber . '/sensitivity');
        openabmma_uploadFile ($pName . '/v' . $versionNumber . '/sensitivity', 'version_sensitivity');
	$query = "UPDATE openabm_model_version SET license_id=%d, reference_text='%s', examples='%s' WHERE model_id=%d AND version_num=%d";
	db_query ($query, $edit ["version_licenseId"], $edit ["version_ref"], $edit ["version_examples"], openabmma_getModelId ($pName), $versionNumber);

	drupal_goto ("mymodels/" . $pName . "/version" . $versionNumber . "/reviewnote");
}

function openabmma_addVersion03 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(1);

        // FIXME: duplicated code
	if ($user->name != openabmma_getModelOwner ($pName))
            return openabmma_formAccessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	$query = "SELECT license_id, reference_text, examples FROM openabm_model_version WHERE id=%d AND version_num=%d";
	$result = (array) db_fetch_object (db_query ($query, openabmma_getModelId ($pName), $versionNumber));
	$licenseId = $result ['license_id'];

	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, name, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
            $licenseTypes [$node->id] = $node->name . " [" . $node->url . "]";

	$form ["details"]["version_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["version_licenseId"] == "" ? $licenseId : $edit ['version_licenseId'],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form ["details"]["version_ref"] = array (
		"#type" => "textarea",
		"#title" => "References:",
		"#default_value" => $edit ["version_ref"] == "" ? $refText : $edit ["version_ref"],
		"#maxlength" => 210,
		"#description" => t("Links to other hosted material of reference"),
		"#required" => false
	);

	$form ["details"]["version_examples"] = array (
		"#type" => "textarea",
		"#title" => "Examples:",
		"#default_value" => $edit ["version_examples"] == "" ? $examples : $edit ["version_examples"],
		"#maxlength" => 210,
		"#description" => t("Notes on how to use the version"),
		"#required" => false
	);

	$form ["details"]["version_sensitivity"] = array (
		"#type" => "file",
		"#description" => t("File containing sensitivity analysis"),
		"#title" => t("Sensitivity analysis:")
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addVersion04_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(1);

	$versionString = arg(3);
	$versionNumber = substr($versionString, -1);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	if ($_POST ["op"] == "Back")
		drupal_goto ("mymymodels/" . $pName . "/add/version" . $versionNumber . "/reviewnote");

	if ($edit ["model_inst"]['commented'] == '0' || $edit ["model_inst"]['cleanup'] == '0' || $edit ["model_inst"]['running'] == '0')
		drupal_set_message ("<b><font color='red'>Well-commented, cleanedup and running code is required before you submit your model for review!</font></b><br/>[Should we have a link to let the user still submit the model for review along with comments to the editor to justify that he should still be able to send his model for review?]");
	else
	{
		openabmma_cleantmp ($pName . '/v' . $versionNumber . '/odd');
		if (openabmma_uploadFile ($pName . '/v' . $versionNumber . '/odd', 'version_odd_file') == null)
		{
			drupal_set_message ("<font color='red'><b>Error uploading ODD file, please check the path of the file specified</b></font>");
			return;
		}

		openabmma_cleantmp ($pName . '/v' . $versionNumber . '/dataset');
		openabmma_uploadFile ($pName . '/v' . $versionNumber . '/dataset', 'version_dataset');

		openabmma_cleantmp ($pName . '/v' . $versionNumber . '/other');
		openabmma_uploadFile ($pName . '/v' . $versionNumber . '/other', 'version_other');

		$query = "UPDATE openabm_model_version SET submittedReview=1, run_conditions='%s' WHERE model_id=%d AND version_num=%d";
		db_query ($query, $edit ["version_conditions"], openabmma_getModelId ($pName), $versionNumber);
		drupal_goto ("mymodels/" . $pName . "/add/version" . $versionNumber . "/complete");
	}
}

function openabmma_addVersion04 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(1);
        // FIXME: duplicated code
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	$query = "SELECT run_conditions FROM openabm_model_version WHERE model_id=%d AND version_num=%d";
	$result = (array) db_fetch_object (db_query ($query, openabmma_getModelId ($pName), $versionNumber));
	$run_conditions = $result ['run_conditions'];

	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => "Components required for review",
	);

	$form ["details"]["version_odd_file"] = array (
		"#type" => "file",
		"#title" => t("ODD file (required):")
	);

	$form ["details"]["version_dataset"] = array (
		"#type" => "file",
		"#title" => t("Test data set (for running the version) - optional:")
	);

	$form ["details"]["version_conditions"] = array (
		"#type" => "textarea",
		"#title" => "Conditions or comments for running the code:",
		"#default_value" => $edit ["model_conditions"] == "" ? $run_conditions : $edit ["model_conditions"],
		"#maxlength" => 210,
		"#description" => t("Optional notes on running of version"),
		"#required" => false
	);

	$form ["details"]["version_other"] = array (
		"#type" => "file",
		"#title" => t("Additional document to be included with version submission (optional):")
	);

	$form["details"]["version_inst"] = array(
	'#type' => 'checkboxes',
	'#title' => t('Submission requirements:'),
	'#default_value' => "false",
	'#options' => array(
	'commented' => t('The code has been well commented'),
	'cleanup' => t('The code has been cleaned up'),
	'running' => t('The version can be run'),
		),
	'#description' => t(''),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addVersionComplete ()
{
	global $user;
	$pName = arg(1);
        // FIXME: duplicated code
	if ($user->name != openabmma_getModelOwner ($pName))
            return openabmma_formAccessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	$query = "SELECT submittedReview FROM openabm_model_version WHERE model_id=%d and version_num=%d";
	$result = (array) db_fetch_object (db_query ($query, $pName, $versionNumber));
	if ($result ['submittedReview'] == "1")
		$output = "<p><br/>Congratulations! Your model has been uploaded and submitted for review!</p>";
	else
		$output = "<p><br/>Congratulations! Your model has been uploaded!</p>";

	$webAddr = url ("mymodels/" . $pName, NULL, NULL, TRUE);
	$output .= "<p>Your model can be accessed via the URL:<br/>" . l($webAddr, $webAddr) . "</p>";
//	$output = 
	return $output;
}

function checkModelOwner( $pName ) {
    global $user;
    if ($user->name != openabmma_getModelOwner($pName)) {

    }
    else {
        return "";
    }
}

function openabmma_ownerError ()
{
	return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");
}

function openabmma_addVersion01_submit ($form_id, $edit) {
    $pName = arg(1);
	$action = arg(2);

    global $user;
    if ($edit ["newVersion"] == "1") {
        $newVersion = TRUE;
    }
    else {
        $newVersion = FALSE;
    }

        $ownerName = openabmma_getModelOwner( $pName );
        // FIXME: duplicated code
        if ($user->name != $ownerName)
            return openabmma_ownerError ();

    if ($pName == "" || $pName == null)
    {
        drupal_set_message ("<b><font color='red'>Model name is required</font></b>");
        return;
    }

    if ($_POST ["op"] == "Cancel")
        drupal_goto ("mymodels/" . $pName);

    $pCount = strlen ($pName);
    for ($i=0; $i<$pCount; $i++)
    {
        if ($pName [$i] == ' ')
        {
            $errorString = "Model name cannot contain spaces.";
            drupal_set_message ("<b><font color='red'>" . $errorString . "</font></b>");
            return;
        }
    }

	$versionNumber = $edit ["versionNumber"];
    $visible = $edit ["version_visibility"]["visibility"];
    if ($visible != '0')
        $visible = '1';

	if ($newVersion)
	{
            mkdir ("files/" . $pName . "/v" . $versionNumber . "/odd", 0755, TRUE);
            mkdir ("files/" . $pName . "/v" . $versionNumber . "/code", 0755, TRUE);
            mkdir ("files/" . $pName . "/v" . $versionNumber . "/other", 0755, TRUE);
            mkdir ("files/" . $pName . "/v" . $versionNumber . "/dataset", 0755, TRUE);
            mkdir ("files/" . $pName . "/v" . $versionNumber . "/sensitivity", 0755, TRUE);

            $query = "INSERT INTO openabm_model_version (model_id, description, visible, version_num, date_created) VALUES (%d, '%s', %d, %d, '%s')";
            db_query($query, openabmma_getModelId ($pName), $edit ["version_description"], $visible, $versionNumber, date("Y-m-d H:i:s"));
            drupal_goto("mymodels/" . $pName . "/add/version" . $versionNumber . "/step02");
        }
    else
    {
        $query = "UPDATE openabm_model_version SET version_num=%d, description='%s', visible=%d WHERE model_id=%d";
        db_query ($query, $versionNumber, $edit ["version_description"], $visible, openabmma_getModelId ($pName));
        drupal_goto("mymodels/" . $pName . "/add/version" . $versionNumber . "/step02");
    }
}

function openabmma_addVersion01 ($edit=null, $item=0)
{
	global $user;

	$pName = arg(1);
	$action = arg(2);

	$versionString = arg(3);
	$versionNumber = substr ($versionString, -1);

	if (is_numeric ($versionNumber))	// version number specified in URL
//	if ($action == "edit" || $action == "add")
		$newVersion = "0";
	else
		$newVersion = "1";

	if ($newVersion == "0")
	{
            // FIXME: duplicated code
            if ($user->name != openabmma_getModelOwner ($pName))
                return openabmma_formAccessError ("Only model owners can change metadata details of any version in the model. You are not registered as the owner of this model.");
	}

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_version WHERE model_id=%d", openabmma_getModelId ($pName)));
	$versionNumber = $result['max(id)'] + 1;

	$desc = '';
	$visible = FALSE;
	if ($newVersion == "0")
	{
		$query = "SELECT description, visible FROM openabm_model_version WHERE model_id=%d";
		$result = (array) db_fetch_object (db_query ($query, openabmma_getModelId ($pName)));

		$desc = $result ['description'];
		$visible = $result ['visible'];
		if ($visible == "1")
			$visible = TRUE;
		else
			$visible = FALSE;
	}

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

	$form ["details"]["newVersion"] = array (
		"#type" => "hidden",
		"#value" => $newVersion
	);

	$form ["details"]["versionNumber"] = array (
		"#type" => "hidden",
		"#value" => $versionNumber
	);
/*
	$form ["details"]["model_name"] = array (
		"#type" => "item",
		"#title" => t("Model name:"),
		"#description" => null,
		"#value" => $pName,
//		"#required" => true,		// Commented because clicking Cancel validates this field too!
		"#maxlength" => 210
//		'#autocomplete_path' => 'user/autocomplete',
	);
*/
	$form ["details"]["version_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of this version:"),
		"#default_value" => $edit ["version_description"] == "" ? $desc : $edit ["version_description"],
		"#description" => null,
		"#required" => false
	);

	if ($visible)
	{
		$form["details"]["version_visibility"] = array(
		'#type' => 'checkboxes',
		'#title' => t('Version visibility:'),
		"#attributes" => array ('checked' => 'checked'),
	//	'#default_value' => array (TRUE),
		'#options' => array(
		'visibility' => t('I want to make this version visible to all'),
			),
		'#description' => t('Enabling this option will make this version visible to public'),
		);
	}
	else
	{
		$form["details"]["version_visibility"] = array(
		'#type' => 'checkboxes',
		'#title' => t('Version visibility:'),
	//	'#default_value' => array (TRUE),
		'#options' => array(
		'visibility' => t('I want to make this version visible to all'),
			),
		'#description' => t('Enabling this option will make this version visible to public'),
		);
	}

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Cancel"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addModel_submit ($form_id, $edit)
{
    $action = arg(1);

    global $user;
    if ($edit ["newModel"] == "1") {
        $newModel = TRUE;
        $pName = $edit ["model_name"];
    }
    else {
        $newModel = FALSE;
        $pName = arg(2);
    }

    if ($_POST ["op"] == "Cancel")
        if ($action == "add")
            drupal_goto ("models");
        else if ($action == "edit")
        {
            $pName = arg(2);
            drupal_goto ("mymodels/" . $pName);
        }

    if (!$newModel) {
        $ownerName = openabmma_getModelOwner( $pName );
        // FIXME: duplicated code
        if ($user->name != $ownerName)
            return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");
    }

    if ($pName == "" || $pName == null)
    {
        drupal_set_message ("<b><font color='red'>Model name is a required field</font></b>");
        return;
    }

    $pCount = strlen ($pName);
    for ($i=0; $i<$pCount; $i++)
    {
        if ($pName [$i] == ' ')
        {
            $errorString = "Model name cannot contain spaces. Please re-enter the correct model name.";
            drupal_set_message ("<b><font color='red'>" . $errorString . "</font></b>");
            return;
        }
    }

    $replicated = $edit ["model_replicated"]["replica"];
    if ($replicated != '0')
        $replicated = '1';

    if ($newModel == TRUE) {
        if (openabmma_getModelId ($pName) != -1 && openabmma_getModelId ($pName) != '') {
            drupal_set_message ("<b><font color='red'>Another project with the same name exists. Please choose a different name</font></b>");
        }
        else {
            if ($replicated == '1') {
                if ($edit ["model_repl"] == "" || $edit ["model_refurl"] == "") {
                    drupal_set_message ("<b><font color='red'>Since this project is a replicated one, you need to enter information about the replicators and the reference URL.</font></b>");
                    return;
                }
            }

            $query = "INSERT INTO openabm_model (owner_uid, name, title, replicators, replicatedModel, reference) VALUES (%d, '%s', '%s', '%s', %d, '%s')";
            db_query($query, $user->uid, $pName, $edit ["model_title"], $edit ["model_repl"], $replicated, $edit ["model_refurl"]);

	$keywordList = $edit ["keywords"];
	$replaceList = "!@#$%^&*()+-|\\[]{}:;'\"<>,/?~` ";
	$replaceLen = strlen ($replaceList);
	for ($i=0; $i<$replaceLen; $i = $i+1)
            $keywordList = str_replace ($replaceList [$i], ",", $keywordList);

	$keywords = explode (",", $keywordList);

	$pId = openabmma_getModelId ($pName);
	$query = "DELETE FROM openabm_model_keywords WHERE model_id=%d";
	db_query ($query, $pId);

	$query = "INSERT INTO openabm_model_keywords (model_id, keyword) VALUES (%d, '%s')";
	for ($i=0; $i<count($keywords); $i++)
	{
		if ($keywords [$i] == '')
			continue;
		db_query ($query, $pId, trim ($keywords [$i]));
	}

	    drupal_goto("mymodels/" . $pName);
        }
    }
    else
    {
        if ($replicated == '1')
        {
            if ($edit ["model_repl"] == "" || $edit ["model_refurl"] == "")
            {
		drupal_set_message ("|" . $edit ["model_repl"] . "|" . $edit ["model_refurl"] . "|");
                drupal_set_message ("<b><font color='red'>Since this project is a replicated one, you need to enter information about the replicators and the reference URL.</font></b>");
                return;
            }
        }

        $query = "UPDATE openabm_model SET title='%s', replicatedModel=%d, replicators='%s', reference='%s' WHERE name='%s'";
        db_query ($query, $edit ["model_title"], $replicated, $edit ["model_repl"], $edit ["model_refurl"], $pName);

	$keywordList = $edit ["keywords"];
	$replaceList = "!@#$%^&*()+-|\\[]{}:;'\"<>,/?~` ";
	$replaceLen = strlen ($replaceList);
	for ($i=0; $i<$replaceLen; $i = $i+1)
            $keywordList = str_replace ($replaceList [$i], ",", $keywordList);

	$keywords = explode (",", $keywordList);

	$pId = openabmma_getModelId ($pName);
	$query = "DELETE FROM openabm_model_keywords WHERE model_id=%d";
	db_query ($query, $pId);

	$query = "INSERT INTO openabm_model_keywords (model_id, keyword) VALUES (%d, '%s')";
	for ($i=0; $i<count($keywords); $i++)
	{
		if ($keywords [$i] == '')
			continue;
		db_query ($query, $pId, trim ($keywords [$i]));
	}


        drupal_goto("mymodels/" . $pName);
    }
}

function openabmma_addModel ()
{
	global $user;

	$action = arg(1);
	$pName = arg(2);

	if ($action == "edit")
		$newModel = "0";
	else
		$newModel = "1";

	if ($newModel == "0")
	{
            // FIXME: duplicated code
            if ($user->name != openabmma_getModelOwner ($pName))
                return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");
	}

	$replicated = FALSE;	// Value for new models
	if ($newModel == "0")
	{
		$query = "SELECT title, replicatedModel, replicators, reference FROM openabm_model WHERE name='%s'";
		$result = (array) db_fetch_object (db_query ($query, $pName));
		$replicated = $result ['replicatedModel'];
		$projTitle = $result ['title'];
		if ($replicated == "1")
			$replicated = TRUE;
		else
			$replicated = FALSE;

		$replicators = $result ['replicators'];
		$refurl = $result ['reference'];

		$desc = $result ['description'];
	}

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

	$form ["details"]["model_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => null,
	);

	$form ["details"]["newModel"] = array (
		"#type" => "hidden",
		"#value" => $newModel
	);

	if ($newModel == "1")
	{
		$form ["details"]["model_name"] = array (
			"#type" => "textfield",
			"#title" => t("Model name (should not contain spaces):"),
			"#default_value" => $edit ["model_name"],
			"#description" => null,
	//		"#required" => true,		// Commented because clicking Cancel validates this field too!
			"#maxlength" => 210
		);
	}
	else
	{
		$form ["details"]["model_name"] = array (
			"#type" => "item",
			"#title" => t("Model name:"),
			"#description" => null,
			"#value" => arg(2),
	//		"#required" => true,		// Commented because clicking Cancel validates this field too!
			"#maxlength" => 210
		);
	}

	$form ["details"]["model_title"] = array (
		"#type" => "textfield",
		"#title" => t("Model title (human-friendly name):"),
		"#default_value" => $edit ["model_title"] == "" ? $projTitle : $edit ["model_title"],
		"#description" => null,
//		"#required" => true,		// Commented because clicking Cancel validates this field too!
		"#maxlength" => 210
	);

	if ($replicated)
	{
		$form["details"]["model_replicated"] = array(
		'#type' => 'checkboxes',
		"#attributes" => array ('checked' => 'checked'),
		'#title' => t("Model replication:"),
		'#options' => array(
		'replica' => t('Check this box is this a replicated model instead of an original model'),
			),
		'#description' => t('If the model you are submitting is your own implementation but an idea of somebody else, put a check mark here. If your model is your own idea, leave this box blank.'),
		);
	}
	else
	{
		$form["details"]["model_replicated"] = array(
		'#type' => 'checkboxes',
		'#title' => t("Model replication:"),
		'#options' => array(
		'replica' => t('Check this box is this a replicated model instead of an original model'),
			),
		'#description' => t('If the model you are submitting is your own implementation but an idea of somebody else, put a check mark here. If your model is your own idea, leave this box blank.'),
		);
	}

	$form ["details"]["model_repl"] = array (
		"#type" => "textfield",
		"#title" => t("Replicators (only for replicated models):"),
		"#default_value" => $edit ["model_repl"] == "" ? $replicators : $edit ["model_repl"],
		"#description" => t("If this model is a replicated model, enter the name of replicators here."),
		"#maxlength" => 210
	);

	$form ["details"]["model_refurl"] = array (
		"#type" => "textfield",
		"#title" => t("References (only for replicated models):"),
		"#default_value" => $edit ["model_refurl"] == "" ? $refurl : $edit ["model_refurl"],
		"#description" => t("If this model is a replicated model, enter references, if any."),
		"#maxlength" => 255
	);

	$form ["details"]["keywords"] = array (
		"#type" => "textfield",
		"#title" => "Keywords:",
		"#description" => t("Special words related to your project (separated by commas)"),
		"#default_value" => $edit ["keywords"] == "" ? $keywordList : $edit ["keywords"],
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Cancel"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addVersion ()
{
	global $user;
	$pName = arg(1);

	if ($user->name != openabmma_getModelOwner ($pName))
               return openabmma_accessError ("Only model owners can add versions to any model. You are not registered as the owner of this model");

    $output = "<p><br/>To upload a new model version, it can take a number of steps. The first three steps are mandatory.<p>&nbsp;</p>";
    $output .= "<table border='0' cellpadding='0' cellspacing='0' width='100%'>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><b>Step 1</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'>Version description and visibility to public</td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 2</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>Code files, language and platform details</td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 3</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>License information, References, Examples and Sensitivity data</td></tr>";
    $output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 4</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Collecting documents for version review</td></tr>";
    $output .= "</table>";
    $output .= "<p>&nbsp;</p>" . l ("Click here to proceed to first step", "mymodels/" . $pName . "/add/version/step01");	
    return $output;
}


function openabmma_searchProjects ()
{
	$searchText = arg(2);
	$output = drupal_get_form (openabmma_getSearchText);

	if ($searchText != '')
		$output .= "<br/>" . openabmma_doSearch ($searchText);
	return $output;
}

function openabmma_doSearch ($searchText='')
{
	if ($searchText == '')
		return "";

	$count=0;

	$ltext = strtolower ($searchText);
	$query = "SELECT name, description from openabm_model WHERE visible=1 AND (lower(name) LIKE '%%%s%%' OR lower(description) LIKE '%%%s%%' OR lower(reference_url) LIKE '%%%s%%' OR lower(keywords) LIKE '%%%s%%')";
	$result = db_query ($query, $ltext, $ltext, $ltext, $ltext);
	$count = count ($result);

	while ($proj = db_fetch_object ($result))
	{
		$count++;
		$output .= l ($proj->name, "mymodels/" . $proj->name) . "<br/><small>" . $proj->description . "</small><br/>&nbsp;<br/>";
	}

	$output = $count-1 . " result(s) matched your query.<br/>&nbsp;<br/>" . $output;
	return $output;
}

function openabmma_getSearchText_submit ($form_id, $edit)
{
	drupal_goto ("models/search/" . $edit ["text"]);
}

function openabmma_getSearchText ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => NULL,
	);

	$form ["details"]["text"] = array (
		"#type" => "textfield",
		"#title" => t("Search for:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_metadata_submit ($form_id, $edit)
{
	$visible = 0;
	if ($edit ["model_visibility"]["visibility"] != 0)
		$visible = 1;

//	if ($edit ["model_visibility"] == 1)	$edit ["model_visibility"] = "true";
//	else					$edit ["model_visibility"] = "false";

	$query = "UPDATE openabm_model SET description='%s', visible=%d, license_id=%d, reference_url='%s', keywords='%s' WHERE id=%d";
	db_query ($query, $edit["model_description"], $visible, $edit ["model_licenseId"], $edit ["ref_url"], $edit ["key"], $edit ["projId"]);
	drupal_goto ("mymodels/" . arg(1));
}

function openabmma_metadata ()
{
	global $user;

	$name = arg(1);

	if ($name == '')
		drupal_goto ("mymodels");

	if ($user->name != openabmma_getModelOwner ($name))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

        // FIXME: may need a separate query to grab all keywords for a given
        // project.
	$query = "SELECT description, visible, license_id, reference_url s FROM openabm_model WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));

	$visibility = $result ["visible"];
	if ($visibility == "1")	$visibility = "checked";
	else			$visibility = "false";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can change options for this project here."),
	);

	$form ["details"]["projId"] = array (
		'#type' => "hidden",
		'#value' => openabmma_getModelId ($name)
	);

	$form ["details"]["model_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of model:"),
		"#default_value" => $result ["description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $result ["reference_url"],
		"#description" => t("If your model is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $result ["keywords"],
		"#description" => t("Key words in your model to help us search among models"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result2 = db_query ("SELECT id, license_text, url FROM openabm_license");
	while ($node = db_fetch_object ($result2))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["model_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#value" => $result ["license_id"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["model_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#value' => array(true),
	'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
		),
	'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteMember ($name, $uid)
{
	global $user;
	// check if user is owner of this model
	$owner = openabmma_getModelOwner ($name);
	if ($owner != $user->name)
		return "Only the model owner can perform this function.";

	$query = "DELETE FROM openabm_model_member WHERE project_id=%d AND user_id=%d";

	$projectId = openabmma_getModelId ($name);

	if ($projectId == -1)
		return "Invalid project name";

	db_query ($query, $projectId, $uid);
	drupal_goto ("mymodels/" . $name . "/members");
	return "";
}

function openabmma_perm () {
	return array ('view models', 'modify models', 'review models');
}

function openabmma_showFiles ($projName='', $path='')
{
	$path = "";
	for ($i=3; arg($i) != ""; $i++)
		$path .= arg($i) . "/";

//	return $projName . "|" . $path;
	$connection = ssh2_connect ('libai.la.asu.edu');
	ssh2_auth_password($connection, 'asrane', 'notWorryingTooMuch');

	//$stream = ssh2_exec($connection, 'cd new/newTrialRep; svn update &> /home/asrane/ofile');
	$stream = ssh2_exec($connection, 'svn list -v file:///home/asrane/' . $projName . '/' . $path . ' &> /home/asrane/ofile');

	$stream = ssh2_exec($connection, 'cat /home/asrane/ofile');
	stream_set_blocking($stream, true);
 
	// The command may not finish properly if the stream is not read to end
	$fileContent = stream_get_contents($stream);
	$files = explode ("\n", $fileContent);
	foreach ($files as $value)
	{
		if ($value == null)
			break;
		for ($i=strlen ($value)-1; $value[$i] != ' '; $i--)
			;

		if (substr ($value, -1) == "/")
			$output .= substr($value, 0, $i) . " " . l (substr($value, $i+1), "mymodels/" . $projName . "/files/" . $path . substr($value, $i+1)) . "<br/>";
		else
			$output .= $value . "<br/>";
	}

	return $output;
}

function openabmma_manageMembers ($name='')
{
	global $user;
	if ($name == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($name);
	$query = "SELECT visible FROM openabm_model WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed model.";

	$output = "<br/><u>Owner</u>: " . $owner;

	$members = openabmma_showModelMembers ($name);

	if ($members != "")	$output .= "<br/>&nbsp;<br/><u>Members</u>: " . $members;
	else			$output .= "<br/>&nbsp;<br/>Currently there are no members in this model.";

	if ($user->name == $owner)
		$output .= "<br/>&nbsp;<br/>" . drupal_get_form (openabmma_addMember);

	return $output;
}

function openabmma_addMember ()
{
	global $user;

	$projName = arg (1);
	if ($projName == "")
		return null;

	if ($user->name != openabmma_getModelOwner ($projName))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member for this model here."),
	);

	$form ["details"]["projName"] = array (
		"#type" => "hidden",
		"#value" => $projName
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("User name:"),
		'#autocomplete_path' => 'user/autocomplete',
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

/*	$roleTypes = array ();
	$result = db_query ("SELECT id, name FROM openabm_role");
	while ($node = db_fetch_object ($result))
		$roleTypes [$node->id] = $node->name;

	$form ["details"]["role"] = array (
		"#type" => "select",
		"#title" => t("Role:"),
		"#default_value" => "1",
		"#options" => $roleTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addMember_submit ($form_id, $edit)
{
	global $user;
	$username = $edit ["name"];
	if ($username == $user->name)
	{
		drupal_set_message ("You already have owner privileges. You cannot add yourself as a Developer for this model.");
		return;
	}

	$userid = openabmma_getUserId ($username);
	if ($userid == -1)
	{
		drupal_set_message ("Invalid user name specified.");
		return;
	}

	$projName = $edit ["projName"];
	// get identifier (number) of the project
	$model_id = openabmma_getModelId ($projName);

	$query = "SELECT id FROM openabm_role WHERE name='Developer'";
	$result = (array) db_fetch_object (db_query ($query));
	$roleId = $result ['id'];

	$query = "SELECT id FROM openabm_model_member WHERE user_id=%d AND project_id=%d AND role=%d";
	$result = (array) db_fetch_object (db_query ($query, $userid, $model_id, $roleId));
	if ($result ['id'] != "")
	{
		drupal_set_message ("<b><font color='red'>This user has already been added as a member for this project.</font></b>");
		return;
	}

	$query = "INSERT INTO openabm_model_member (project_id, user_id, role) VALUES (%d, %d, $roleId)";
	db_query ($query, $model_id, $userid);
//	drupal_goto ("roles");
}

function openabmma_getModelId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model WHERE name='%s'", $name));
	$pId = $result ['id'];
	return $pId;
}

function openabmma_getUserId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT uid FROM users WHERE name='%s'", $name));
	$id = $result['uid'];

	if ($id == "")
		$id = -1;

	return $id;
}

function openabmma_getModelMembers ($name='')
{
	if ($name == '')
		return "";

	// get identifier (number) of the project
	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model WHERE name='%s'", $name));
	$model_id = $result ["id"];

	$query = "SELECT user_id FROM openabm_model_member WHERE project_id=%d";
	$result = db_query ($query, $model_id);
	$i = 0;
	while ($users = db_fetch_object ($result))
	{
		$userArr [$i] = openabmma_getUserName ($users->user_id);
		$i++;
	}

	return $userArr;
}

function openabmma_showModelMembers ($name='')
{
	if ($name == '')
		return "";

	// get identifier (number) of the project
	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model WHERE name='%s'", $name));
	$model_id = $result ["id"];

	$query = "SELECT user_id, role FROM openabm_model_member WHERE project_id=%d";
	$result = db_query ($query, $model_id);
	while ($users = db_fetch_object ($result))
		$output .= "<br/>" . openabmma_getUserName ($users->user_id) . "&nbsp;<small>[" . openabmma_getRoleName ($users->role) . "] - " . "<a href=\"javascript:if(confirm('Are you sure you want to remove this user from your model?')) window.location.replace('" . url("mymodels/" . $name . "/members/delete/" . $users->user_id) . "');\">Remove this user from my model</a></small>";
//l ("Remove this user from my model", "javascript:if(confirm('Really?')) window.location.replace('mymodels/" . $name . "/embers/delete/" . $users->user_id . "');") . "</small>";

	return $output;
}

function openabmma_getUserName ($uid)
{
	if ($uid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid=%d", $uid));
	$name = $result['name'];

	return $name;
}

function openabmma_getRoleName ($rid)
{
	if ($rid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM openabm_role WHERE id=%d", $rid));
	$name = $result['name'];

	return $name;
}

function openabmma_getModelOwner ($name='')
{
	if ($name == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid = (SELECT owner_uid FROM openabm_model WHERE name='%s')", $name));
	$owner = $result['name'];
	return $owner;
}

function openabmma_openProject ($pName='')
{
	global $user;
	if ($pName == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($pName);

	$output = "<br/>";
	$output .= l ("View current metadata configuration for this model", "mymodels/" . $pName . "/viewMetadata");

	if ($owner == $user->name)
	{
		$output .= "<br/>&nbsp;<br/>Owner options:";
		$output .= "<br/>" . l ("Manage members in this model", "mymodels/" . $pName . "/members");
		$output .= "<br/>" . l ("Change model metadata", "models/edit/" . $pName . "/step01");
	}

	$output .= openabmma_getFormattedVersionList ($pName);

	return $output;
}

function openabmma_getFormattedVersionList ($pName)
{
	if ($pName == '')
		return "";

	$versionCount = 0;
	$output  = "<p>&nbsp;</p><table border='0' width='100%' cellpadding='0' cellspacing='0'>";
	$output .= "<tr><td><b>Version Number</b></td><td><b>Description</b></td><td><b>Date Created</b></td><td>&nbsp;</td><td>&nbsp;</td></tr>";

	$query = "SELECT id, substr(description, 0, 100) as `descSummary`, date_created FROM openabm_model_version WHERE model_id = %d";
	$result = db_query ($query, openabmma_getModelId ($pName));
	while ($item = db_fetch_object ($result))
	{
		$versionCount++;
		$output .= "<tr><td>" . $item->id . "</td><td>" . $item->descSummary . "</td><td>" . $node->date_created . "</td><td>" . l ("edit", "mymodels/" . $pName . "/edit/version" . $item->id) . "</td><td>" . l ("delete", "mymodels/delete/version" . $item->id) . "</td></tr>";
	}

	$output .= "</table>";

	$finalOutput = "<p>&nbsp;</p>Currently there are " . $versionCount . " version(s) in this model.<br/>To add a new version, click " . l ("here", "mymodels/" . $pName . "/add/version") . "<br/>";
	if ($versionCount != 0)
		$finalOutput .= $output;

	return $finalOutput;
}

function openabmma_showProjects ()
{
	global $user;

	$count = 0;
	$output .= '<br/><u>Owned models:</u><p>&nbsp;</p><hr/><br/>';
	$query = "SELECT m.name, m.title FROM openabm_model m WHERE m.owner_uid=%d";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
            $count++;
            $output .= "<b>" . l ($node->title . " (" . $node->name . ")", "mymodels/" . $node->name) . "</b>&nbsp;";

            if ($node->visible == 1)	$output .= "[Public]";
            else				$output .= "[Private]";

            $output .= "&nbsp;<br/><small>" . $node->description . "<hr/>";
            $output .= "</small><br/>";
        }

	$output .= "Total <b>" . $count . "</b> owned model(s).<br/>&nbsp;<br/>";
	$count = 0;

	$output .= '<br/><u>Membered models:</u><p>&nbsp;</p><hr/><br/>';
	$query = "SELECT m.owner_uid, m.name, m.title, v.description, v.visible, B.role 
                  FROM openabm_model m INNER JOIN openabm_model_version v ON m.id=v.model_id, openabm_model_member B 
                  WHERE B.user_id=%d AND m.id = B.project_id";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$owner = openabmma_getUserName ($node->owner_uid);
		$output .= "<b>" . l ($node->title . " (" . $node->name . ")", "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "<br/>";
		$output .= "Owned by: <b>" . $owner . "</b></small><hr/><br/>";
	}

	$output .= "Total <b>" . $count . "</b> membered model(s).<br/>&nbsp;<br/>";
	$output .= "<br/>" . l ("To add new model, click here", "models/add");
	return $output;
}

function openabmma_showRoles ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_role";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this role?')) window.location.replace('" . url("config/roles/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
// l ("[delete]", "roles/delete/" . $node->id);
	}

	$output = "<br/>Total " . $count . " role(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_role);
	return $output;
}

function openabmma_add_role_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_role (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/roles");
}

function openabmma_add_role ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member role here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Role name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_showLicenses ()
{
	$count = 0;
	$output = '';
	$query = "SELECT id, name, license_text, url FROM openabm_license";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
            $count++;
            $output .= "<b>" . $node->name . "</b>&nbsp;<small>" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this license?')) window.location.replace('" . url("config/licenses/delete/" . $node->id) . "');\"><small>[Delete this]</small></a></small><br/>";
            //l ("[delete this]", "licenses/delete/" . $node->id) . "<br/>" . l($node->url, $node->url) . "</small><br/>&nbsp;<br/>";
	}
        return "There are currently " . $count . " license(s) available. <br/>&nbsp;<br/>" . $output . "<hr/><br/>" . drupal_get_form(openabmma_addLicense_form);
}

function openabmma_deleteLicense ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_license WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/licenses");	
	return '';
}

function openabmma_deleteRole ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_role WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/roles");
	return '';
}

function openabmma_addLicense_form_submit ($formid, $edit) {
    $query = "INSERT INTO openabm_license (name, license_text, url) VALUES ('%s', '%s', '%s')";
    db_query ($query, $edit['name'], $edit['license_text'], $edit ['url']);
}

function openabmma_addLicense_form ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new license here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("License Name:"),
		"#default_value" => null,
		"#description" => t("Name of the license"),
		"#maxlength" => 210,
		"#required" => true
	);
	$form ["details"]["license_text"] = array (
		"#type" => "textarea",
		"#title" => t("License Text:"),
		"#default_value" => null,
		"#description" => t("Full license text"),
		"#required" => true
	);

	$form ["details"]["url"] = array (
		"#type" => "textfield",
		"#title" => t("URL:"),
		"#default_value" => null,
		"#description" => t("Web address of license document"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_settings_form() {
    $form['openabmma_settings'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Testing'),
        '#options' => node_get_types('names'),
        '#default_value' => 'story',
        '#description' => t('Some description'),
        );
    $form['array_filter'] = array('#type' => 'hidden');
    return system_settings_form($form);
}

function openabmma_newModel ($edit=null, $item=0)
{
	global $user;

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM
        openabm_model"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can set the model properties here."),
	);

/*	$form ["details"]["model_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["model_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => t("Information about the owner of this model"),
	);

	$form ["details"]["model_name"] = array (
		"#type" => "textfield",
		"#title" => t("Model Name:"),
		"#default_value" => $edit ["model_name"],
		"#description" => null,
		"#maxlength" => 210,
//		'#autocomplete_path' => 'user/autocomplete',
		"#required" => true
	);

	$form ["details"]["model_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of model:"),
		"#default_value" => $edit ["model_description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $edit ["ref_url"],
		"#description" => t("If your model is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $edit ["key"],
		"#description" => t("Key words in your model to help us search among models"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["model_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["model_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["model_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#default_value' => "false",
	'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
		),
	'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return $form;
}

function openabmma_newModel_submit ($form_id, $edit)
{
	global $user;
	$query = "INSERT INTO openabm_model (owner_uid, name, title) VALUES (%d, '%s', '%s')";
	db_query ($query, $user->uid, $edit ['model_name'], $edit ['model_title']);
//	drupal_goto ("models");
	drupal_goto ("mymodels/" . $edit ['model_name'] . "/code");
}

function openabmma_accessError ($errorString)
{
	drupal_set_message ("<b><font color='red'>Access Error:</font></b><br/>" . $errorString . "<p>Click " . l ("here", "models") . " to go to your model workspace.</p>");
}

function openabmma_formAccessError ($errorString)
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null
	);

	$form ["details"]["name"] = array (
		"#type" => "item",
		"#title" => null,
		"#value" => "<b><font color='red'>Access error:</font></b><p>" . $errorString . "</p>",
	);

	return ($form);
}
