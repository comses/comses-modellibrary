<?php
$p = '';

// $Id$

/**
 * @file
 * 
 * Provides an agent based model archive within the Drupal framework.  This
 * involves the user creation of new model projects, ability to upload new
 * versions of an ABM project and edit associated metadata.  Members of a
 * review committee should also be able to "star" an ABM project to signify
 * its level of maturity and completeness.
 * 
 *
 */
function openabmma_block ($op='list', $delta=0)
{
	// listing of blocks, such as on the admin/block page
	if ($op == "list")
	{
		$block[0]["info"] = t("OpenABM Resource Links");
		return $block;
	}
	else if ($op == 'view')
	{
		$block_content = l ("My projects", "models/") . "<br/>"
			. l ("Search projects", "models/search") . "<br/>"
			;

		if (user_access ('administer content'))
		{
			$block_content .= "<br/>" . l ("Project licenses", "config/licenses");
			$block_content .= "<br/>" . l ("Member roles", "config/roles");
			$block_content .= "<br/>" . l ("Prog. languages listed", "config/planguages");
			$block_content .= "<br/>" . l ("OS listed", "config/os");
			$block_content .= "<br/>" . l ("Frameworks", "config/frameworks");
		}
		$block['subject'] = 'Model Archive';
		$block['content'] = $block_content;
		return $block;
	}
}

function openabmma_menu($may_cache) {

    $items = array();
    if ($may_cache) {
        // admin settings for model archive.  Right now I can only think of
        // group membership in the review committee as a configurable option.
        $items[] = array(
            'path' => 'admin/settings/openabmma',
            'title' => t('OpenABM Model Archive Settings'),
            'description' => t('Change model archive settings.'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_settings_form'),
            'type' => MENU_CALLBACK,
            'access' => user_access('administer site configuration')
            );
/*
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_newModel'),
            );
*/
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_addModel',
            'type' => MENU_CALLBACK,
            );

            $items[] = array(
            'path' => 'models/add/step01',
            'title' => t('Step 01 :: Adding a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_addModel01'),
            );

        $items[] = array(
            'path' => 'models/search',
            'title' => t('Search projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models',
            'title' => t('My projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles',
            'title' => t('User roles'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showRoles',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses',
            'title' => t('Manage licenses'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showLicenses',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages',
            'title' => t('Programming languages listed'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showPLanguages',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/os',
            'title' => t('Operating systems listed'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showOS',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks',
            'title' => t('Manage frameworks'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showFrameworks',
            'type' => MENU_CALLBACK
            );
    }
    else
    {
        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step02",
            'title' => t('Step 02 :: Add new model'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel02),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step03",
            'title' => t('Step 03 :: Add new model'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel03),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step04",
            'title' => t('Step 04 :: Add new model'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel04),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step05",
            'title' => t('Step 05 :: Add new model'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel05),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/reviewnote",
            'title' => t('Step 04 :: Add new model'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_askIfReview',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/complete",
            'title' => t('Add new model complete'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_addModelComplete',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles/delete/' . arg(3),
            'title' => t('Delete role'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteRole',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/search/' . arg (2),
            'title' => t('Search projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses/delete/' . arg(3),
            'title' => t('Delete license'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteLicense',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages/delete/' . arg(3),
            'title' => t('Delete language'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deletePLanguages',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks/delete/' . arg(3),
            'title' => t('Delete framework'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteFramework',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/os/delete/' . arg(3),
            'title' => t('Delete Operating System'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteOS',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files',
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files/' . arg(3),
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/metadata',
            'title' => t('Meta data'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_metadata'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members/delete',
            'title' => t('Delete members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_deleteMember',
            'callback arguments' => array(arg(1), arg(4)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members',
            'title' => t('Project members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_manageMembers',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1),
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('access content'),
            'callback' => 'openabmma_openProject',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );
    }

    return $items;
}

function openabmma_deletePLanguages ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_prog_lang WHERE progLangId=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/planguages");	
	return '';
}

function openabmma_showPLanguages ()
{
	$count = 0;
	$query = "SELECT progLangId, name FROM openabm_prog_lang";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this language from the list?')) window.location.replace('" . url("config/planguages/delete/" . $node->progLangId) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " language(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_pLanguage);
	return $output;
}

function openabmma_add_pLanguage_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_prog_lang (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/planguages");
}

function openabmma_add_pLanguage ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new programming languages to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Language name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteFramework ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_framework WHERE frameworkId=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/frameworks");
	return '';
}

function openabmma_showFrameworks ()
{
	$count = 0;
	$query = "SELECT frameworkId, name FROM openabm_framework";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this framework from the list?')) window.location.replace('" . url("config/frameworks/delete/" . $node->frameworkId) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " framework(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_framework);
	return $output;
}

function openabmma_add_framework_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_framework (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/frameworks");
}

function openabmma_add_framework ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new framework to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Framework name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteOS ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_os WHERE osId=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/os");
	return '';
}

function openabmma_showOS ()
{
	$count = 0;
	$query = "SELECT osId, name FROM openabm_os";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this OS from the list?')) window.location.replace('" . url("config/os/delete/" . $node->osId) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " Operating System(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_OS);
	return $output;
}

function openabmma_add_OS_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_os (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/os");
}

function openabmma_add_OS ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new Operating System to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("OS name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_askIfReview ()
{
	return "<p>&nbsp;<br/>At this point, you have completed the basic requirements of submitting a project and hosting it on OpenABM.org. If you wish to submit your model for review, click " . l ("Submit Model for Review", "models/add/" . arg(2) . "/step05") . ". The following page will guide you to through the requirements of submitting a model for review.<br/><p>&nbsp;</p>If you do not wish to submit your model for review now, click " . l ("My Projects", "models") . ". You could submit your model for review any time you wish to, by clicking on the 'Send model for review' link in the model workspace.";
}

function openabmma_uploadFile ($formVar)
{
	if ($formVar == '')
		return;

	$dir = "files";
	$is_writable = file_check_directory($dir, 1);
	if($is_writable)
	{
		$source = file_check_upload($formVar);     
		// Security measure to prevent exploit of file.php.png
		$source->filename = upload_munge_filename($source->filename);

		if ($file = file_save_upload($source,$dir ))
		{
			drupal_set_message ("Uploaded to " . $source->filename);

//			if (image_get_info($file->filepath))
//				drupal_set_message(t('New image saved.'));
//			else
//			{
//				file_delete($file->filepath);
//				drupal_set_message('Uploaded file does not appear to be a valid image file. Please try again.');
//			}
		}
	}
}

function openabmma_addModel02_submit ($form_id, $edit)
{
//	openabmma_uploadFile ('proj_code_file');
	drupal_goto ("models/add/" . arg(2) . "/step03");
}

function openabmma_addModel02 ($edit=null, $item=0)
{
	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Project Name:"),
		"#value" => arg (2),
		"#description" => null,
	);

	$form ["details"]["proj_code_file"] = array (
		"#type" => "file",
		"#title" => t("Code file (zipped):")
	);

	$languages = array ();
	$result = db_query ("SELECT name FROM openabm_prog_lang ORDER BY name");
	while ($node = db_fetch_object ($result))
		$languages [$node->name] = $node->name;
	$languages ["Other"] = "Other";

	$form ["details"]["proj_language"] = array (
		"#type" => "select",
		"#title" => t("Programming Language:"),
		"#options" => $languages,
		"#description" => null
	);

	$form ["details"]["other_language"] = array (
		"#type" => "textfield",
		"#title" => t("Other (if not mentioned in above list):"),
		"#maxlength" => 210,
		"#required" => false
	);

	$arrayElements = array ();
	$result = db_query ("SELECT name FROM openabm_os ORDER BY name");
	while ($node = db_fetch_object ($result))
		$arrayElements [$node->name] = $node->name;
	$arrayElements ["Other"] = "Other";

	$form ["details"]["os"] = array (
		"#type" => "select",
		"#title" => t("Operating System:"),
		"#default_value" => $edit ["os"],
		"#options" => $arrayElements,
		"#description" => null
	);

	$arrayElements = array ();
	$result = db_query ("SELECT name FROM openabm_framework ORDER BY name");
	while ($node = db_fetch_object ($result))
		$arrayElements [$node->name] = $node->name;
	$arrayElements ["Other"] = "Other";

	$form ["details"]["framework"] = array (
		"#type" => "select",
		"#title" => t("Framework used:"),
		"#default_value" => $edit ["framework"],
		"#options" => $arrayElements,
		"#description" => null
	);

/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel03_submit ($form_id, $edit)
{
	$keywordList = $edit ["keywords"];
	$keywordList = str_replace (" ", ",", $keywordList);
	$keywords = explode (",", $keywordList);

	for ($i=0; $i<count($keywords); $i++)
	{
		if ($keywords [$i] == '')
			continue;
		$query = "INSERT INTO openabm_model_keywords (proj_id, keyword) VALUES (" . openabmma_getProjectId (arg(2)) .  ", '" . $keywords [$i] . "');";
//		drupal_set_message ($query);
	}

	drupal_goto ("models/add/" . arg(2) . "/step04");
}

function openabmma_addModel03 ($edit=null, $item=0)
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Project Name:"),
		"#value" => arg (2),
		"#description" => null,
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form ["details"]["keywords"] = array (
		"#type" => "textfield",
		"#title" => "Keywords:",
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel04_submit ($form_id, $edit)
{
//	drupal_goto ("models/search/" . $edit ["text"]);

	drupal_goto ("models/add/" . arg(2) . "/reviewnote");
}

function openabmma_addModel04 ($edit=null, $item=0)
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => "Optional components",
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Project Name:"),
		"#value" => arg (2),
		"#description" => null,
	);
/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["proj_ref"] = array (
		"#type" => "textarea",
		"#title" => "References:",
		"#maxlength" => 210,
		"#description" => t("Links to other hosted material of reference"),
		"#required" => false
	);

	$form ["details"]["proj_examples"] = array (
		"#type" => "textarea",
		"#title" => "Examples:",
		"#maxlength" => 210,
		"#description" => t("Notes on how to use the model"),
		"#required" => false
	);

	$form ["details"]["proj_sensitivity"] = array (
		"#type" => "file",
		"#description" => t("File containing sensitivity data"),
		"#title" => t("Sensitivity:")
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel05_submit ($form_id, $edit)
{
//	openabmma_uploadFile ('proj_odd_file');
	if ($edit ["proj_inst"]['commented'] == '0' || $edit ["proj_inst"]['cleanup'] == '0' || $edit ["proj_inst"]['running'] == '0')
		drupal_set_message ("<b><font color='red'>Well-commented, cleanedup and running code is required before you submit your model for review!</font></b><br/>[Should we have a link to let the user still submit the model for review along with comments to the editor to justify that he should still be able to send his model for review?]");
	else
		drupal_goto ("models/add/" . arg(2) . "/complete");
}

function openabmma_addModel05 ($edit=null, $item=0)
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => "Components required for review",
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Project Name:"),
		"#value" => arg (2),
		"#description" => null,
	);
/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["proj_odd_file"] = array (
		"#type" => "file",
		"#title" => t("ODD file:")
	);

	$form["details"]["proj_inst"] = array(
	'#type' => 'checkboxes',
	'#title' => t('Project requirements:'),
	'#default_value' => "false",
	'#options' => array(
	'commented' => t('The code submitted has been commented well'),
	'cleanup' => t('Clean up code'),
	'running' => t('Running code'),
		),
	'#description' => t(''),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModelComplete ()
{
	return "New model added";
}

function openabmma_addModel01_submit ($form_id, $edit)
{
//	drupal_goto ("models/search/" . $edit ["text"]);

	drupal_goto ("models/add/" . $edit ["proj_name"] . "/step02");
}

function openabmma_addModel01 ($edit=null, $item=0)
{
	global $user;

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_project"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => null,
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "textfield",
		"#title" => t("Project Name:"),
		"#default_value" => $edit ["proj_name"],
		"#description" => null,
		"#maxlength" => 210,
//		'#autocomplete_path' => 'user/autocomplete',
		"#required" => true
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of project:"),
		"#default_value" => $edit ["proj_description"],
		"#description" => null,
		"#required" => false
	);
/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t('Project visibility:'),
	'#default_value' => "false",
	'#options' => array(
	'visibility' => t('I want to make my project visible to all'),
		),
	'#description' => t('Enabling this option will make your project visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addModel ()
{
	$output = "<p><br/>To create a new model, it can take 3-6 steps depending on whether your model is to be submitted for review or not. The first three steps are mandatory.<p>&nbsp;</p>";

$output .= "<table border='0' cellpadding='0' cellspacing='0' width='100%'>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><b>Step 1</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'>Project name, description and visibility to public</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 2</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>Code files, language and platform details</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 3</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>License information and keywords</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 4</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Optional</font></td><td style='border-bottom: thin solid #aaaaaa'>References, examples and senstivity information</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 5</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Sending model for review</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 6</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Collecting documents for model review</td></tr>";
$output .= "</table>";

$output .= "<p>&nbsp;</p>" . l ("Click here to proceed to first step", "models/add/step01");	

	return $output;
}

function openabmma_searchProjects ()
{
	$searchText = arg(2);
	$output = drupal_get_form (openabmma_getSearchText);

	if ($searchText != '')
		$output .= "<br/>" . openabmma_doSearch ($searchText);
	return $output;
}

function openabmma_doSearch ($searchText='')
{
	if ($searchText == '')
		return "";

	$count=0;

	$ltext = strtolower ($searchText);
	$query = "SELECT name, description from openabm_model_project WHERE visible=1 AND (lower(name) LIKE '%%%s%%' OR lower(description) LIKE '%%%s%%' OR lower(reference_url) LIKE '%%%s%%' OR lower(keywords) LIKE '%%%s%%')";
	$result = db_query ($query, $ltext, $ltext, $ltext, $ltext);
	$count = count ($result);

	while ($proj = db_fetch_object ($result))
	{
		$count++;
		$output .= l ($proj->name, "mymodels/" . $proj->name) . "<br/><small>" . $proj->description . "</small><br/>&nbsp;<br/>";
	}

	$output = $count-1 . " result(s) matched your query.<br/>&nbsp;<br/>" . $output;
	return $output;
}

function openabmma_getSearchText_submit ($form_id, $edit)
{
	drupal_goto ("models/search/" . $edit ["text"]);
}

function openabmma_getSearchText ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => NULL,
	);

	$form ["details"]["text"] = array (
		"#type" => "textfield",
		"#title" => t("Search for:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_metadata_submit ($form_id, $edit)
{
	$visible = 0;
	if ($edit ["proj_visibility"]["visibility"] != 0)
		$visible = 1;

//	if ($edit ["proj_visibility"] == 1)	$edit ["proj_visibility"] = "true";
//	else					$edit ["proj_visibility"] = "false";

	$query = "UPDATE openabm_model_project SET description='%s', visible=%d, license_id=%d, reference_url='%s', keywords='%s' WHERE id=%d";
	db_query ($query, $edit["proj_description"], $visible, $edit ["proj_licenseId"], $edit ["ref_url"], $edit ["key"], $edit ["projId"]);
	drupal_goto ("mymodels/" . arg(1));
}

function openabmma_metadata ()
{
	global $user;

	$name = arg(1);

	if ($name == '')
		drupal_goto ("mymodels");

	if ($user->name != openabmma_getModelOwner ($name))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$query = "SELECT description, visible, license_id, reference_url, keywords FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));

	$visibility = $result ["visible"];
	if ($visibility == "1")	$visibility = "checked";
	else			$visibility = "false";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can change options for this project here."),
	);

	$form ["details"]["projId"] = array (
		'#type' => "hidden",
		'#value' => openabmma_getProjectId ($name)
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of project:"),
		"#default_value" => $result ["description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $result ["reference_url"],
		"#description" => t("If your project is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $result ["keywords"],
		"#description" => t("Key words in your project to help us search among projects"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result2 = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result2))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#value" => $result ["license_id"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#value' => array(true),
	'#options' => array(
		'visibility' => t('I want to make my project visible to all'),
		),
	'#description' => t('Enabling this option will make your project visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteMember ($name, $uid)
{
	global $user;
	// check if user is owner of this project
	$owner = openabmma_getModelOwner ($name);
	if ($owner != $user->name)
		return "Only the project owner can perform this function.";

	$query = "DELETE FROM openabm_model_project_member WHERE project_id=%d AND user_id=%d";

	$projectId = openabmma_getProjectId ($name);

	if ($projectId == -1)
		return "Invalid project name";

	db_query ($query, $projectId, $uid);
	drupal_goto ("mymodels/" . $name . "/members");
	return "";
}

function openabmma_perm ()
{
	return array ('logged in');
}

function openabmma_showFiles ($projName='', $path='')
{
	$path = "";
	for ($i=3; arg($i) != ""; $i++)
		$path .= arg($i) . "/";

//	return $projName . "|" . $path;
	$connection = ssh2_connect ('libai.la.asu.edu');
	ssh2_auth_password($connection, 'asrane', 'notWorryingTooMuch');

	//$stream = ssh2_exec($connection, 'cd new/newTrialRep; svn update &> /home/asrane/ofile');
	$stream = ssh2_exec($connection, 'svn list -v file:///home/asrane/' . $projName . '/' . $path . ' &> /home/asrane/ofile');

	$stream = ssh2_exec($connection, 'cat /home/asrane/ofile');
	stream_set_blocking($stream, true);
 
	// The command may not finish properly if the stream is not read to end
	$fileContent = stream_get_contents($stream);
	$files = explode ("\n", $fileContent);
	foreach ($files as $value)
	{
		if ($value == null)
			break;
		for ($i=strlen ($value)-1; $value[$i] != ' '; $i--)
			;

		if (substr ($value, -1) == "/")
			$output .= substr($value, 0, $i) . " " . l (substr($value, $i+1), "mymodels/" . $projName . "/files/" . $path . substr($value, $i+1)) . "<br/>";
		else
			$output .= $value . "<br/>";
	}

	return $output;
}

function openabmma_manageMembers ($name='')
{
	global $user;
	if ($name == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($name);
	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed project.";

	$output = "<br/><u>Owner</u>: " . $owner;

	$members = openabmma_getModelMembers ($name);

	if ($members != "")	$output .= "<br/>&nbsp;<br/><u>Members</u>: " . $members;
	else			$output .= "<br/>&nbsp;<br/>Currently there are no members in this project.";

	if ($user->name == $owner)
		$output .= "<br/>&nbsp;<br/>" . drupal_get_form (openabmma_addMember);

	return $output;
}

function openabmma_addMember ()
{
	global $user;

	$projName = arg (1);
	if ($projName == "")
		return null;

	if ($user->name != openabmma_getModelOwner ($projName))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member for this project here."),
	);

	$form ["details"]["projName"] = array (
		"#type" => "hidden",
		"#value" => $projName
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("User name:"),
		'#autocomplete_path' => 'user/autocomplete',
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

/*	$roleTypes = array ();
	$result = db_query ("SELECT id, name FROM openabm_role");
	while ($node = db_fetch_object ($result))
		$roleTypes [$node->id] = $node->name;

	$form ["details"]["role"] = array (
		"#type" => "select",
		"#title" => t("Role:"),
		"#default_value" => "1",
		"#options" => $roleTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addMember_submit ($form_id, $edit)
{
	global $user;
	$username = $edit ["name"];
	if ($username == $user->name)
	{
		drupal_set_message ("You already have owner privileges. You cannot add yourself as a Developer for this project.");
		return;
	}

	$userid = openabmma_getUserId ($username);
	if ($userid == -1)
	{
		drupal_set_message ("Invalid user name specified.");
		return;
	}

	$projName = $edit ["projName"];
	// get identifier (number) of the project
	$proj_id = openabmma_getProjectid ($projName);

	$query = "INSERT INTO openabm_model_project_member (project_id, user_id, role) VALUES (%d, '%s', 3)";
	db_query ($query, $proj_id, $userid);
//	drupal_goto ("roles");
}

function openabmma_getProjectId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$pId = $result ['id'];
	return $pId;
}

function openabmma_getUserId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT uid FROM users WHERE name='%s'", $name));
	$id = $result['uid'];

	if ($id == "")
		$id = -1;

	return $id;
}

function openabmma_getModelMembers ($name='')
{
	if ($name == '')
		return "";

	// get identifier (number) of the project
	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$proj_id = $result ["id"];

	$query = "SELECT user_id, role FROM openabm_model_project_member WHERE project_id=%d";
	$result = db_query ($query, $proj_id);
	while ($users = db_fetch_object ($result))
		$output .= "<br/>" . openabmma_getUserName ($users->user_id) . "&nbsp;<small>[" . openabmma_getRoleName ($users->role) . "] - " . "<a href=\"javascript:if(confirm('Are you sure you want to remove this user from your project?')) window.location.replace('" . url("mymodels/" . $name . "/members/delete/" . $users->user_id) . "');\">Remove this user from my project</a>";
//l ("Remove this user from my project", "javascript:if(confirm('Really?')) window.location.replace('mymodels/" . $name . "/embers/delete/" . $users->user_id . "');") . "</small>";

	return $output;
}

function openabmma_getUserName ($uid)
{
	if ($uid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid=%d", $uid));
	$name = $result['name'];

	return $name;
}

function openabmma_getRoleName ($rid)
{
	if ($rid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM openabm_role WHERE id=%d", $rid));
	$name = $result['name'];

	return $name;
}

function openabmma_getModelOwner ($name='')
{
	if ($name == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid = (SELECT owner_uid FROM openabm_model_project WHERE name='%s')", $name));
	$owner = $result['name'];
	return $owner;
}

function openabmma_openProject ($id='')
{
	global $user;
	if ($id == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($id);

	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $id));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed project.";

	$output .= "<br/><a href='/svn'>View/download files in this project</a>";

	if ($owner == $user->name)
	{
		$output .= "<br/>&nbsp;<br/>" . l ("Manage members in this project", "mymodels/" . $id . "/members");
		$output .= "<br/>" . l ("Change project meta-data", "mymodels/" . $id . "/metadata");
	}

	return $output;
}

function openabmma_showProjects ()
{
	global $user;

	$count = 0;
	$output .= '<br/><u>Owned projects:</u><br/>&nbsp;';
	$query = "SELECT name, description, visible FROM openabm_model_project WHERE owner_uid=%d";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "</small><br/><small>";
		$output .= "</small><br/>";
	}

	$output .= "Total " . $count . " owned projects.<br/>&nbsp;<br/>";
	$count = 0;

	$output .= '<br/><u>Membered projects:<br/></u>&nbsp;<br/>';
	$query = "SELECT A.owner_uid, A.name, A.description, A.visible, B.role FROM openabm_model_project A, openabm_model_project_member B WHERE B.user_id=%d AND A.id = B.project_id";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$owner = openabmma_getUserName ($node->owner_uid);
		$output .= "<b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "<br/>";
		$output .= "Owned by: <b>" . $owner . "</b></small><br/>&nbsp;<br/>";
	}

	$output .= "Total " . $count . " membered projects.<br/>&nbsp;<br/>";
	$output .= "<br/>" . l ("To add new project, click here", "models/add");
	return $output;
}

function openabmma_showRoles ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_role";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this role?')) window.location.replace('" . url("config/roles/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
// l ("[delete]", "roles/delete/" . $node->id);
	}

	$output = "<br/>Total " . $count . " role(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_role);
	return $output;
}

function openabmma_add_role_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_role (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/roles");
}

function openabmma_add_role ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member role here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Role name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_showLicenses ()
{
	$count = 0;
	$output = '';
	$query = "SELECT id, license, url FROM openabm_license";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<b>" . $node->license . "</b>&nbsp;<small>" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this license?')) window.location.replace('" . url("config/licenses/delete/" . $node->id) . "');\"><small>[delete this]</small></a></small><br/>";
//l ("[delete this]", "licenses/delete/" . $node->id) . "<br/>" . l($node->url, $node->url) . "</small><br/>&nbsp;<br/>";
	}

	return "There are currently " . $count . " license(s). <br/>&nbsp;<br/>" . $output . "<hr/><br/>" . drupal_get_form(openabmma_addLicense_form);
}

function openabmma_deleteLicense ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_license WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/licenses");	
	return '';
}

function openabmma_deleteRole ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_role WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/roles");
	return '';
}

function openabmma_addLicense_form_submit ($formid, $edit)
{
	$query = "INSERT INTO openabm_license (license, url) VALUES ('%s', '%s')";
	db_query ($query, $edit['name'], $edit ['url']);
}

function openabmma_addLicense_form ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new license type here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("License Name:"),
		"#default_value" => null,
		"#description" => t("Name of the license"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["url"] = array (
		"#type" => "textfield",
		"#title" => t("URL:"),
		"#default_value" => null,
		"#description" => t("Web address of license document"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_settings_form() {
    $form['openabmma_settings'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Testing'),
        '#options' => node_get_types('names'),
        '#default_value' => 'story',
        '#description' => t('Some description'),
        );
    $form['array_filter'] = array('#type' => 'hidden');
    return system_settings_form($form);
}

function openabmma_newModel ($edit=null, $item=0)
{
	global $user;

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_project"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can set the project properties here."),
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => t("Information about the owner of this project"),
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "textfield",
		"#title" => t("Project Name:"),
		"#default_value" => $edit ["proj_name"],
		"#description" => null,
		"#maxlength" => 210,
//		'#autocomplete_path' => 'user/autocomplete',
		"#required" => true
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of project:"),
		"#default_value" => $edit ["proj_description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $edit ["ref_url"],
		"#description" => t("If your project is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $edit ["key"],
		"#description" => t("Key words in your project to help us search among projects"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#default_value' => "false",
	'#options' => array(
		'visibility' => t('I want to make my project visible to all'),
		),
	'#description' => t('Enabling this option will make your project visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return $form;
}

function openabmma_newModel_submit ($form_id, $edit)
{
	global $user;
	$query = "INSERT INTO openabm_model_project (owner_uid, name, description, visible, license_id, reference_url, keywords) VALUES (%d, '%s', '%s', %d, %d, '%s', '%s')";
	db_query ($query, $user->uid, $edit ['proj_name'], $edit ['proj_description'], $edit ["proj_visibility"], $edit ['proj_licenseId'], $edit ["ref_url"], $edit ["key"]);
//	drupal_goto ("models");
	drupal_goto ("mymodels/" . $edit ['proj_name'] . "/code");
}
