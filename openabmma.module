<?php
$p = 'notWorryingTooMuch';

// $Id$

/**
 * @file
 * 
 * Provides an agent based model archive within the Drupal framework.  This
 * involves the user creation of new model projects, ability to upload new
 * versions of an ABM project and edit associated metadata.  Members of a
 * review committee should also be able to "star" an ABM project to signify
 * its level of maturity and completeness.
 * 
 *
 */
function openabmma_block ($op='list', $delta=0)
{
	// listing of blocks, such as on the admin/block page
	if ($op == "list")
	{
		$block[0]["info"] = t("OpenABM Resource Links");
		return $block;
	}
	else if ($op == 'view')
	{
		$block_content = l ("My projects", "models/") . "<br/>"
			. l ("Search projects", "models/search") . "<br/>"
			;

		if (user_access ('administer content'))
		{
			$block_content .= "<br/>" . l ("Project licenses", "licenses");
			$block_content .= "<br/>" . l ("Member roles", "roles");
		}
		$block['subject'] = 'Model Archive';
		$block['content'] = $block_content;
		return $block;
	}
}

function openabmma_menu($may_cache) {

    $items = array();
    if ($may_cache) {
        // admin settings for model archive.  Right now I can only think of
        // group membership in the review committee as a configurable option.
        $items[] = array(
            'path' => 'admin/settings/openabmma',
            'title' => t('OpenABM Model Archive Settings'),
            'description' => t('Change model archive settings.'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_settings_form'),
            'type' => MENU_CALLBACK,
            'access' => user_access('administer site configuration')
            );

        $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_newModel'),
            );

        $items[] = array(
            'path' => 'models/search',
            'title' => t('Search projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models',
            'title' => t('My projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'roles',
            'title' => t('User roles'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showRoles',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'licenses',
            'title' => t('Manage licenses'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showLicenses',
            'type' => MENU_CALLBACK
            );

    }
    else
    {
        $items[] = array(
            'path' => 'roles/delete/' . arg(2),
            'title' => t('Delete role'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteRole',
            'callback arguments' => array(arg(2)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/search/' . arg (2),
            'title' => t('Search projects'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'licenses/delete/' . arg(2),
            'title' => t('Delete license'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteLicense',
            'callback arguments' => array(arg(2)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files',
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files/' . arg(3),
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/metadata',
            'title' => t('Meta data'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_metadata'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members/delete',
            'title' => t('Delete members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_deleteMember',
            'callback arguments' => array(arg(1), arg(4)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members',
            'title' => t('Project members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_manageMembers',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1),
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('access content'),
            'callback' => 'openabmma_openProject',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );
    }

    return $items;
}

function openabmma_searchProjects ()
{
	$searchText = arg(2);
	$output = drupal_get_form (openabmma_getSearchText);

	if ($searchText != '')
		$output .= "<br/>" . openabmma_doSearch ($searchText);
	return $output;
}

function openabmma_doSearch ($searchText='')
{
	if ($searchText == '')
		return "";

	$count=0;

	$ltext = strtolower ($searchText);
	$query = "SELECT name, description from openabm_model_project WHERE visible=1 AND (lower(name) LIKE '%%%s%%' OR lower(description) LIKE '%%%s%%' OR lower(reference_url) LIKE '%%%s%%' OR lower(keywords) LIKE '%%%s%%')";
	$result = db_query ($query, $ltext, $ltext, $ltext, $ltext);
	$count = count ($result);

	while ($proj = db_fetch_object ($result))
	{
		$count++;
		$output .= l ($proj->name, "mymodels/" . $proj->name) . "<br/><small>" . $proj->description . "</small><br/>&nbsp;<br/>";
	}

	$output = $count-1 . " result(s) matched your query.<br/>&nbsp;<br/>" . $output;
	return $output;
}

function openabmma_getSearchText_submit ($form_id, $edit)
{
	drupal_goto ("models/search/" . $edit ["text"]);
}

function openabmma_getSearchText ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => NULL,
	);

	$form ["details"]["text"] = array (
		"#type" => "textfield",
		"#title" => t("Search for:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_metadata_submit ($form_id, $edit)
{
//	if ($edit ["proj_visibility"] == 1)	$edit ["proj_visibility"] = "true";
//	else					$edit ["proj_visibility"] = "false";

	$query = "UPDATE openabm_model_project SET description='%s', visible=%d, license_id=%d, reference_url='%s', keywords='%s' WHERE id=%d";
	db_query ($query, $edit["proj_description"], $edit ["proj_visibility"], $edit ["proj_licenseId"], $edit ["ref_url"], $edit ["key"], $edit ["projId"]);
	drupal_goto ("mymodels/" . arg(1));
}

function openabmma_metadata ()
{
	global $user;

	$name = arg(1);

	if ($name == '')
		drupal_goto ("mymodels");

	if ($user->name != openabmma_getModelOwner ($name))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$query = "SELECT description, visible, license_id, reference_url, keywords FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));

	$visibility = $result ["visible"];
	if ($visibility == "1")	$visibility = "checked";
	else			$visibility = "false";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can change options for this project here."),
	);

	$form ["details"]["projId"] = array (
		'#type' => "hidden",
		'#value' => openabmma_getProjectId ($name)
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of project:"),
		"#default_value" => $result ["description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $result ["reference_url"],
		"#description" => t("If your project is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $result ["keywords"],
		"#description" => t("Key words in your project to help us search among projects"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result2 = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result2))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#value" => $result ["license_id"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#value' => array(true),
	'#options' => array(
		'visibility' => t('I want to make my project visible to all'),
		),
	'#description' => t('Enabling this option will make your project visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteMember ($name, $uid)
{
	global $user;
	// check if user is owner of this project
	$owner = openabmma_getModelOwner ($name);
	if ($owner != $user->name)
		return "Only the project owner can perform this function.";

	$query = "DELETE FROM openabm_model_project_member WHERE project_id=%d AND user_id=%d";

	$projectId = openabmma_getProjectId ($name);

	if ($projectId == -1)
		return "Invalid project name";

	db_query ($query, $projectId, $uid);
	drupal_goto ("mymodels/" . $name . "/members");
	return "";
}

function openabmma_perm ()
{
	return array ('logged in');
}

function openabmma_showFiles ($projName='', $path='')
{
	$path = "";
	for ($i=3; arg($i) != ""; $i++)
		$path .= arg($i) . "/";

//	return $projName . "|" . $path;
	$connection = ssh2_connect ('libai.la.asu.edu');
	ssh2_auth_password($connection, 'asrane', 'notWorryingTooMuch');

	//$stream = ssh2_exec($connection, 'cd new/newTrialRep; svn update &> /home/asrane/ofile');
	$stream = ssh2_exec($connection, 'svn list -v file:///home/asrane/' . $projName . '/' . $path . ' &> /home/asrane/ofile');

	$stream = ssh2_exec($connection, 'cat /home/asrane/ofile');
	stream_set_blocking($stream, true);
 
	// The command may not finish properly if the stream is not read to end
	$fileContent = stream_get_contents($stream);
	$files = explode ("\n", $fileContent);
	foreach ($files as $value)
	{
		if ($value == null)
			break;
		for ($i=strlen ($value)-1; $value[$i] != ' '; $i--)
			;

		if (substr ($value, -1) == "/")
			$output .= substr($value, 0, $i) . " " . l (substr($value, $i+1), "mymodels/" . $projName . "/files/" . $path . substr($value, $i+1)) . "<br/>";
		else
			$output .= $value . "<br/>";
	}

	return $output;
}

function openabmma_manageMembers ($name='')
{
	global $user;
	if ($name == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($name);
	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed project.";

	$output = "<br/><u>Owner</u>: " . $owner;

	$members = openabmma_getModelMembers ($name);

	if ($members != "")	$output .= "<br/>&nbsp;<br/><u>Members</u>: " . $members;
	else			$output .= "<br/>&nbsp;<br/>Currently there are no members in this project.";

	if ($user->name == $owner)
		$output .= "<br/>&nbsp;<br/>" . drupal_get_form (openabmma_addMember);

	return $output;
}

function openabmma_addMember ()
{
	global $user;

	$projName = arg (1);
	if ($projName == "")
		return null;

	if ($user->name != openabmma_getModelOwner ($projName))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member for this project here."),
	);

	$form ["details"]["projName"] = array (
		"#type" => "hidden",
		"#value" => $projName
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("User name:"),
		'#autocomplete_path' => 'user/autocomplete',
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

/*	$roleTypes = array ();
	$result = db_query ("SELECT id, name FROM openabm_role");
	while ($node = db_fetch_object ($result))
		$roleTypes [$node->id] = $node->name;

	$form ["details"]["role"] = array (
		"#type" => "select",
		"#title" => t("Role:"),
		"#default_value" => "1",
		"#options" => $roleTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addMember_submit ($form_id, $edit)
{
	global $user;
	$username = $edit ["name"];
	if ($username == $user->name)
	{
		drupal_set_message ("You already have owner privileges. You cannot add yourself as a Developer for this project.");
		return;
	}

	$userid = openabmma_getUserId ($username);
	if ($userid == -1)
	{
		drupal_set_message ("Invalid user name specified.");
		return;
	}

	$projName = $edit ["projName"];
	// get identifier (number) of the project
	$proj_id = openabmma_getProjectid ($projName);

	$query = "INSERT INTO openabm_model_project_member (project_id, user_id, role) VALUES (%d, '%s', 3)";
	db_query ($query, $proj_id, $userid);
//	drupal_goto ("roles");
}

function openabmma_getProjectId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$pId = $result ['id'];
	return $pId;
}

function openabmma_getUserId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT uid FROM users WHERE name='%s'", $name));
	$id = $result['uid'];

	if ($id == "")
		$id = -1;

	return $id;
}

function openabmma_getModelMembers ($name='')
{
	if ($name == '')
		return "";

	// get identifier (number) of the project
	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$proj_id = $result ["id"];

	$query = "SELECT user_id, role FROM openabm_model_project_member WHERE project_id=%d";
	$result = db_query ($query, $proj_id);
	while ($users = db_fetch_object ($result))
		$output .= "<br/>" . openabmma_getUserName ($users->user_id) . "&nbsp;<small>[" . openabmma_getRoleName ($users->role) . "] - " . l ("Remove this user from my project", "mymodels/" . $name . "/members/delete/" . $users->user_id) . "</small>";

	return $output;
}

function openabmma_getUserName ($uid)
{
	if ($uid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid=%d", $uid));
	$name = $result['name'];

	return $name;
}

function openabmma_getRoleName ($rid)
{
	if ($rid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM openabm_role WHERE id=%d", $rid));
	$name = $result['name'];

	return $name;
}

function openabmma_getModelOwner ($name='')
{
	if ($name == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid = (SELECT owner_uid FROM openabm_model_project WHERE name='%s')", $name));
	$owner = $result['name'];
	return $owner;
}

function openabmma_openProject ($id='')
{
	global $user;
	if ($id == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($id);

	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $id));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed project.";

	$output .= "<br/>" . l ("View/download files in this project", "mymodels/" . $id . "/files");
	$output .= "<br/>" . l ("Add files to this project", "mymodels/" . $id . "/addFiles");

	if ($owner == $user->name)
	{
		$output .= "<br/>&nbsp;<br/>" . l ("Manage members in this project", "mymodels/" . $id . "/members");
		$output .= "<br/>" . l ("Change project meta-data", "mymodels/" . $id . "/metadata");
	}

	return $output;
}

function openabmma_showProjects ()
{
	global $user;

	$count = 0;
	$output .= '<br/><u>Owned projects:</u><br/>&nbsp;';
	$query = "SELECT name, description, visible FROM openabm_model_project WHERE owner_uid=%d";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "</small><br/><small>";
		$output .= "</small><br/>";
	}

	$output .= "Total " . $count . " owned projects.<br/>&nbsp;<br/>";
	$count = 0;

	$output .= '<br/><u>Membered projects:<br/></u>&nbsp;<br/>';
	$query = "SELECT A.owner_uid, A.name, A.description, A.visible, B.role FROM openabm_model_project A, openabm_model_project_member B WHERE B.user_id=%d AND A.id = B.project_id";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$owner = openabmma_getUserName ($node->owner_uid);
		$output .= "<b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "<br/>";
		$output .= "Owned by: <b>" . $owner . "</b></small><br/>&nbsp;<br/>";
	}

	$output .= "Total " . $count . " membered projects.<br/>&nbsp;<br/>";
	$output .= "<br/>" . l ("To add new project, click here", "models/add");
	return $output;
}

function openabmma_showRoles ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_role";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . l ("[delete]", "roles/delete/" . $node->id);
	}

	$output = "<br/>Total " . $count . " role(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_role);
	return $output;
}

function openabmma_add_role_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_role (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("roles");
}

function openabmma_add_role ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member role here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Role name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_showLicenses ()
{
	$count = 0;
	$output = '';
	$query = "SELECT id, license, url FROM openabm_license";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<b>" . $node->license . "</b>&nbsp;<small>" . l ("[delete this]", "licenses/delete/" . $node->id) . "<br/>" . l($node->url, $node->url) . "</small><br/>&nbsp;<br/>";
	}

	return "There are currently " . $count . " license(s). <br/>&nbsp;<br/>" . $output . "<hr/><br/>" . drupal_get_form(openabmma_addLicense_form);
}

function openabmma_deleteLicense ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_license WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("licenses");	
	return '';
}

function openabmma_deleteRole ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_role WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("roles");
	return '';
}

function openabmma_addLicense_form_submit ($formid, $edit)
{
	$query = "INSERT INTO openabm_license (license, url) VALUES ('%s', '%s')";
	db_query ($query, $edit['name'], $edit ['url']);
}

function openabmma_addLicense_form ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new license type here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("License Name:"),
		"#default_value" => null,
		"#description" => t("Name of the license"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["url"] = array (
		"#type" => "textfield",
		"#title" => t("URL:"),
		"#default_value" => null,
		"#description" => t("Web address of license document"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_settings_form() {
    $form['openabmma_settings'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Testing'),
        '#options' => node_get_types('names'),
        '#default_value' => 'story',
        '#description' => t('Some description'),
        );
    $form['array_filter'] = array('#type' => 'hidden');
    return system_settings_form($form);
}

function openabmma_newModel ($edit=null, $item=0)
{
	global $user;

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_project"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can set the project properties here."),
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => t("Information about the owner of this project"),
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "textfield",
		"#title" => t("Project Name:"),
		"#default_value" => $edit ["proj_name"],
		"#description" => null,
		"#maxlength" => 210,
//		'#autocomplete_path' => 'user/autocomplete',
		"#required" => true
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of project:"),
		"#default_value" => $edit ["proj_description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $edit ["ref_url"],
		"#description" => t("If your project is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $edit ["key"],
		"#description" => t("Key words in your project to help us search among projects"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#default_value' => "false",
	'#options' => array(
		'visibility' => t('I want to make my project visible to all'),
		),
	'#description' => t('Enabling this option will make your project visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return $form;
}

function openabmma_newModel_submit ($form_id, $edit)
{
	global $user;
	$query = "INSERT INTO openabm_model_project (owner_uid, name, description, visible, license_id, reference_url, keywords) VALUES (%d, '%s', '%s', %d, %d, '%s', '%s')";
	db_query ($query, $user->uid, $edit ['proj_name'], $edit ['proj_description'], $edit ["proj_visibility"], $edit ['proj_licenseId'], $edit ["ref_url"], $edit ["key"]);
	drupal_goto ("models");
}
