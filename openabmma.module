<?php
$p = '';

// $Id$

/**
 * @file
 * 
 * Provides an agent based model archive within the Drupal framework.  This
 * involves the user creation of new model projects, ability to upload new
 * versions of an ABM project and edit associated metadata.  Members of a
 * review committee should also be able to "star" an ABM project to signify
 * its level of maturity and completeness.
 * 
 *
 */
function openabmma_block ($op='list', $delta=0)
{
	// listing of blocks, such as on the admin/block page
	if ($op == "list")
	{
		$block[0]["info"] = t("OpenABM Resource Links");
		return $block;
	}
	else if ($op == 'view')
	{
		$block_content = l ("My models", "models/") . "<br/>"
			. l ("Search models", "models/search") . "<br/>"
			;

		if (user_access ('administer content'))
		{
			$block_content .= "<br/>" . l ("Model licenses", "config/licenses");
			$block_content .= "<br/>" . l ("Member roles", "config/roles");
			$block_content .= "<br/>" . l ("Prog. languages listed", "config/planguages");
			$block_content .= "<br/>" . l ("OS listed", "config/os");
			$block_content .= "<br/>" . l ("Frameworks", "config/frameworks");
		}
		$block['subject'] = 'Model Archive';
		$block['content'] = $block_content;
		return $block;
	}
}
 
function openabmma_menu($may_cache) {

    $items = array();
    if ($may_cache) {
        // admin settings for model archive.  Right now I can only think of
        // group membership in the review committee as a configurable option.
        $items[] = array(
            'path' => 'admin/settings/openabmma',
            'title' => t('OpenABM Model Archive Settings'),
            'description' => t('Change model archive settings.'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_settings_form'),
            'type' => MENU_CALLBACK,
            'access' => user_access('administer site configuration')
            );
/*
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_newModel'),
            );
*/
            $items[] = array(
            'path' => 'models/add',
            'title' => t('Add a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_addModel',
            'type' => MENU_CALLBACK,
            );

            $items[] = array(
            'path' => 'models/add/step01',
            'title' => t('Step 01 :: Adding a new model'),
            'description' => t('Add a new model to the model archive.'),
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'type' => MENU_CALLBACK,
            'callback arguments' => array('openabmma_addModel01'),
            );

        $items[] = array(
            'path' => 'models/search',
            'title' => t('Search Models'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models',
            'title' => t('My models'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles',
            'title' => t('User roles'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showRoles',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses',
            'title' => t('Manage licenses'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showLicenses',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages',
            'title' => t('Programming languages listed'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showPLanguages',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/os',
            'title' => t('Operating systems listed'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showOS',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks',
            'title' => t('Manage frameworks'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_showFrameworks',
            'type' => MENU_CALLBACK
            );
    }
    else
    {
        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step01",
            'title' => t('Step 01 :: Editing your model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel01),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step02",
            'title' => t('Step 02 :: Editing your model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel02),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step03",
            'title' => t('Step 03 :: Editing your model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel03),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/edit/' . arg(2) . "/step04",
            'title' => t('Step 04 :: Editing your model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel04),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step01",
            'title' => t('Step 01 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel01),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step02",
            'title' => t('Step 02 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel02),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step03",
            'title' => t('Step 03 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel03),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step04",
            'title' => t('Step 04 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel04),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/step05",
            'title' => t('Step 05 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_addModel05),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/reviewnote",
            'title' => t('Step 04 :: Adding a new model'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array(openabmma_askIfReview),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/add/' . arg(2) . "/complete",
            'title' => t('Add new model complete'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_addModelComplete',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/roles/delete/' . arg(3),
            'title' => t('Delete role'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteRole',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'models/search/' . arg (2),
            'title' => t('Search models'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_searchProjects',
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/licenses/delete/' . arg(3),
            'title' => t('Delete license'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteLicense',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/planguages/delete/' . arg(3),
            'title' => t('Delete language'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deletePLanguages',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/frameworks/delete/' . arg(3),
            'title' => t('Delete framework'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteFramework',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'config/os/delete/' . arg(3),
            'title' => t('Delete Operating System'),
            'description' => "",
            'access' => user_access ('administer content'),
            'callback' => 'openabmma_deleteOS',
            'callback arguments' => array(arg(3)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files',
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/files/' . arg(3),
            'title' => t('Files'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_showFiles',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/metadata',
            'title' => t('Model metadata'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('openabmma_metadata'),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members/delete',
            'title' => t('Delete members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_deleteMember',
            'callback arguments' => array(arg(1), arg(4)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/members',
            'title' => t('Model members'),
            'description' => "",
            'access' => user_access ('logged in'),
            'callback' => 'openabmma_manageMembers',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1) . '/viewMetadata',
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('access content'),
            'callback' => 'openabmma_showMetaData',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );

        $items[] = array(
            'path' => 'mymodels/' . arg(1),
            'title' => arg(1),
            'description' => "",
            'access' => user_access ('access content'),
            'callback' => 'openabmma_openProject',
            'callback arguments' => array(arg(1)),
            'type' => MENU_CALLBACK
            );
    }

    return $items;
}

function openabmma_showMetaData ($pName='')
{
	global $user;
	if ($pName == '')
		return '';

	$owner = openabmma_getModelOwner ($pName);
	if ($owner == "")
		drupal_goto ("models");

	if ($user->name != $owner)
	{
		drupal_access_error ('Only model members can view metadata for a model.');
		return '';
	}

	$query = "SELECT owner_uid, name, description, model_language_id, os, framework, reference_text, examples, submittedReview, visible, replicatedModel, replicators, reference_url, license_id from openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	$owner_uid = $result ['owner_uid'];
	$name = $result ['name'];
	$description = $result ['description'];
	$replicated = $result ['replicatedModel'] == "1" ? "Yes" : "No";
	$replicators = $result ['replicators'];
	$reference_url = $result ['reference_url'];
	$model_language_id = $result ['model_language_id'];
	$os = $result ['os'];
	$framework = $result ['framework'];
	$reference_text = $result ['reference_text'];
	$examples = $result ['examples'];
	$submittedReview = $result ['submittedReview'] == "1" ? "Yes" : "No";
	$visible = $result ['visible'] == "1" ? "Yes" : "No";
	$replicators = $result ['replicators'];
	$reference_url = $result ['reference_url'];
	$license_id = $result ['license_id'];

	$query = "SELECT name from openabm_model_language WHERE id=%d";
	$result = (array) db_fetch_object (db_query ($query, $model_language_id));
	$model_language_id = $result ['name'];

	$query = "SELECT license_text from openabm_license WHERE id=%d";
	$result = (array) db_fetch_object (db_query ($query, $license_id));
	$license_id = $result ['license_text'];

	$keywordList = '';
	$query = "SELECT keyword FROM openabm_model_keywords WHERE proj_id=%d";
	$result = db_query ($query, openabmma_getProjectId ($pName));
	while ($element = db_fetch_object ($result))
		$keywordList .= $element->keyword . ", ";
	$keywordList = substr ($keywordList, 0, strlen($keywordList)-2);

	$output = "<br/><p><table border='0' cellpadding='0' cellspacing='0' width='100%'>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model name:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $name . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model description:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $description . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Replicated model:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $replicated . "</i></td></tr>";
	if ($replicated == "Yes")
	{
		$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Replicators:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $replicators . "</i></td></tr>";
		$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Reference URL:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $reference_url . "</i></td></tr>";
	}

$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Visible to public:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $visible . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Programming language:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $model_language_id . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Operating System:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $os . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Framework:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $framework . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>License:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $license_id . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Model keywords:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $keywordList . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>References:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $reference_text . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Examples:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $examples . "</i></td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa' width='30%'><b>Submitted for review:</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>" . $submittedReview . "</i></td></tr>";

$output .= "</table>";

$output .= "<p></p>" . l ("To change your metadata settings, click here", "models/edit/" . $pName . "/step01");
	return $output;
}

function openabmma_deletePLanguages ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_model_language WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/planguages");	
	return '';
}

function openabmma_showPLanguages ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_model_language";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this language from the list?')) window.location.replace('" . url("config/planguages/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " language(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_pLanguage);
	return $output;
}

function openabmma_add_pLanguage_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_model_language (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/planguages");
}

function openabmma_add_pLanguage ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new programming languages to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Language name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteFramework ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_framework WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/frameworks");
	return '';
}

function openabmma_showFrameworks ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_framework";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this framework from the list?')) window.location.replace('" . url("config/frameworks/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " framework(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_framework);
	return $output;
}

function openabmma_add_framework_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_framework (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/frameworks");
}

function openabmma_add_framework ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new framework to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Framework name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteOS ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_os WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/os");
	return '';
}

function openabmma_showOS ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_os";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this OS from the list?')) window.location.replace('" . url("config/os/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
	}

	$output = "<br/>Total " . $count . " Operating System(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_OS);
	return $output;
}

function openabmma_add_OS_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_os (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/os");
}

function openabmma_add_OS ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new Operating System to the list here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("OS name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_askIfReview ()
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

        // FIXME: use CSS instead of repeating style elements over and over
        // again.  Cardinal programming sin - Don't Repeat Yourself.
	$output = "<br/><p><table border='0' cellpadding='0' cellspacing='0' width='100%'>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><b>Step 1</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'>Model name, description and visibility to public</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 2</b></td><td style='border-bottom: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa'>Code files, language and platform details</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 3</b></td><td style='border-bottom: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa'>License information and keywords</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 4</b></td><td style='border-bottom: thin solid #aaaaaa'><i>[Complete]</i></td><td style='border-bottom: thin solid #aaaaaa'>References, examples and senstivity information</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 5</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Sending model for review</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 6</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Collecting documents for model review</td></tr>";
$output .= "</table>";

$output .= "<p>&nbsp;<br/>At this point, you have completed the basic requirements of submitting a model and hosting it on OpenABM.org.<br/>You could complete the process of adding your model to the OpenABM repository by clicking on the 'Finish' button below.</p>";

$output .= "<p>Alternatively, you could indicate the model is ready for a review by the committee at OpenABM.org. If you wish to submit your model for review, click the 'Proceed to Submit Model for Review' button. In that case, you would be directed to a page that asks for some more information such as the ODD protocol.</p>";

$output .= "<p><u>Note: You can submit the model for review at any time by clicking on the \"Send this model for review\" link in the model workspace.</u></p>";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#visible" => FALSE,
		"#description" => null,
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => null,
		"#value" => $output,
		"#description" => null,
	);

	$form ["details"]["review"] = array (
		"#type" => "submit",
		"#value" => t("Proceed to Submit Model for Review"),
		"#submit" => TRUE
	);

	$form ["details"]["noreview"] = array (
		"#type" => "submit",
		"#value" => t("Finish the Add Model process"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_askIfReview_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	if ($_POST ["op"] == "Proceed to Submit Model for Review")
		drupal_goto ("models/add/" . $pName . "/step05");
	else if ($_POST ["op"] == "Finish the Add Model process")
		drupal_goto ("models/add/" . $pName . "/complete");
	else if ($_POST ["op"] == "Back")
		drupal_goto ("models/add/" . $pName . "/step04");
	else
		drupal_goto ("/");
}

function openabmma_uploadFile ($subdir, $formVar, $permission=0660)
{
	if ($formVar == '')
		return;

	$dir = "files";
	if ($subdir != "")
		$dir .= "/" . $subdir;

	$is_writable = file_check_directory($dir, 1);
	if($is_writable)
	{
		$source = file_check_upload($formVar);
		if ($source == null)
			return null;
		// Security measure to prevent exploit of file.php.png
		$source->filename = upload_munge_filename($source->filename);

		if ($file = file_save_upload($source,$dir ))
		{
//			if (image_get_info($file->filepath))
//				drupal_set_message(t('New image saved.'));
//			else
//			{
//				file_delete($file->filepath);
//				drupal_set_message('Uploaded file does not appear to be a valid image file. Please try again.');
//			}
			chmod (realpath ($dir . "/" . $source->filename), $permission);
			return $source->filename;
		}
		else
			return null;
	}
	else
		return null;
}

function openabmma_addModel02_submit ($form_id, $edit)
{
	global $user;
	$errString = '';
	$pName = arg(2);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$action = arg(1);
	if ($_POST ["op"] == "Back")
		drupal_goto ("models/" . $action . "/" . $pName . "/step01");

	$pLang = $edit ["proj_language"];
	if ($pLang == "Other")
	{
		if ($edit ["other_language"] == '' || $edit ["other_language"] == null)
			$errString = "Please type in the programming language used for this model, if it is not mentioned in the list.";
		else
			$pLang = $edit ["other_language"];
	}

	if (openabmma_uploadFile ('code', 'proj_code_file') == null)
	{
		drupal_set_message ("<font color='red'><b>Error uploading file, please check the path of the file specified</b></font>");
		return;
	}

	if ($errString != "")
	{
		drupal_set_message ("<b><font color='red'>" . $errString . "</font></b>");
		return;
	}

	$query = "UPDATE openabm_model_project SET prog_lang='%s', os='%s', framework='%s' WHERE name='%s'";
# FIXME: This is probably broken - need to set it to the appropriate id
# instead of the string value.
//	$query = "UPDATE openabm_model_project SET model_language_id='" . $pLang . "', os='" . $edit ["os"] . "', framework='" . $edit ["framework"] . "' WHERE name='" . $pName . "'";

	db_query ($query, $pLang, $edit ["os"], $edit ["framework"], $pname);
	drupal_goto ("models/" . $action . "/" . $pName . "/step03");
}

function openabmma_inList ($value, $arr)
{
	foreach ($arr as $val)
		if ($val == $value)
			return 1;

	return 0;
}

function openabmma_addModel02 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(2);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$query = "SELECT language.name as prog_lang, os, framework FROM openabm_model_project project INNER JOIN openabm_model_language language ON project.model_language_id=language.id WHERE language.name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	$progLang = $result ['prog_lang'];
	$os = $result ['os'];
	$framework = $result ['framework'];
	
	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Model Name:"),
		"#value" => $pName,
		"#description" => null,
	);

	$form ["details"]["proj_code_file"] = array (
		"#type" => "file",
		"#title" => t("Code file (zipped):")
	);

	$languages = array ();
	$result = db_query ("SELECT name FROM openabm_model_language ORDER BY name");
	while ($node = db_fetch_object ($result))
		$languages [$node->name] = $node->name;
	$languages ["Other"] = "Other";

	$form ["details"]["proj_language"] = array (
		"#type" => "select",
		"#title" => t("Programming Language:"),
		"#options" => $languages,
		"#default_value" => $edit ["prog_language"] == "" ? (openabmma_inList ($progLang, $languages) == 1 ? $progLang : "Other") : $edit ["prog_language"],
		"#description" => null
	);

	$form ["details"]["other_language"] = array (
		"#type" => "textfield",
		"#title" => t("Other (if not mentioned in above list):"),
		"#maxlength" => 210,
		"#default_value" => $edit ["other_language"] == "" ? (openabmma_inList ($progLang, $languages) != 1 ? $progLang : "") : $edit ["prog_language"],
		"#required" => false
	);

	$arrayElements = array ();
	$result = db_query ("SELECT name FROM openabm_os ORDER BY name");
	while ($node = db_fetch_object ($result))
		$arrayElements [$node->name] = $node->name;
	$arrayElements ["Other / Platform Independent"] = "Other / Platform Independent";

	$form ["details"]["os"] = array (
		"#type" => "select",
		"#title" => t("Operating System:"),
		"#default_value" => $edit ["os"] == "" ? $os : $edit ["os"],
		"#options" => $arrayElements,
		"#description" => null
	);

	$arrayElements = array ();
	$result = db_query ("SELECT name FROM openabm_framework ORDER BY name");
	while ($node = db_fetch_object ($result))
		$arrayElements [$node->name] = $node->name;
	$arrayElements ["Other"] = "Other";

	$form ["details"]["framework"] = array (
		"#type" => "select",
		"#title" => t("Framework used:"),
		"#default_value" => $edit ["framework"] == "" ? $framework : $edit ["framework"],
		"#options" => $arrayElements,
		"#description" => null
	);

/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel03_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$action = arg(1);
	if ($_POST ["op"] == "Back")
		drupal_goto ("models/" . $action . "/" . $pName . "/step02");

	$keywordList = $edit ["keywords"];
	$replaceList = "!@#$%^&*()+-|\\[]{}:;'\"<>,/?~`";	// removed '.' and ' '
	$replaceLen = strlen ($replaceList);
	for ($i=0; $i<$replaceLen; $i = $i+1)
		$keywordList = str_replace ($replaceList [$i], ",", $keywordList);

	$keywords = explode (",", $keywordList);

	$pId = openabmma_getProjectId ($pName);
	$query = "DELETE FROM openabm_model_keywords WHERE proj_id=%d";
	db_query ($query, $pId);

	$query = "INSERT INTO openabm_model_keywords (proj_id, keyword) VALUES (%d, '%s')";
	for ($i=0; $i<count($keywords); $i++)
	{
		if ($keywords [$i] == '')
			continue;
//		$query = "INSERT INTO openabm_model_keywords (proj_id, keyword) VALUES (" . openabmma_getProjectId ($pName) .  ", '" . $keywords [$i] . "');";
		db_query ($query, $pId, trim ($keywords [$i]));
	}

	$query = "UPDATE openabm_model_project SET license_id=%d WHERE name='%s'";
//	$query = "UPDATE openabm_model_project SET license_id=" . $edit ["proj_licenseId"] . " WHERE name='" . $pName . "'";

	db_query ($query, $edit ["proj_licenseId"], $pName);

//	drupal_set_message ($query);

	drupal_goto ("models/" . $action . "/" . $pName . "/step04");
}

function openabmma_addModel03 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(2);

	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$query = "SELECT license_id FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	$licenseId = $result ['license_id'];

	$keywordList = '';
	$query = "SELECT keyword FROM openabm_model_keywords WHERE proj_id=%d";
	$result = db_query ($query, openabmma_getProjectId ($pName));
	while ($element = db_fetch_object ($result))
		$keywordList .= $element->keyword . ", ";
	$keywordList = substr ($keywordList, 0, strlen($keywordList)-2);

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Model Name:"),
		"#value" => $pName,
		"#description" => null,
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license_text, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license_text . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"] == "" ? $licenseId : $edit ['proj_licenseId'],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form ["details"]["keywords"] = array (
		"#type" => "textfield",
		"#title" => "Keywords:",
		"#default_value" => $edit ["keywords"] == "" ? $keywordList : $edit ["keywords"],
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel04_validate ()
{
	
}

function openabmma_addModel04_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$action = arg(1);
	if ($_POST ["op"] == "Back")
		drupal_goto ("models/" . $action . "/" . $pName . "/step03");

	if (openabmma_uploadFile ('sensitivity', 'proj_sensitivity') == null)
	{
		drupal_set_message ("<font color='red'><b>Error uploading file, please check the path of the file specified</b></font>");
		return;
	}

	$query = "UPDATE openabm_model_project SET reference_text='%s', examples='%s' WHERE name='%s'";
//	$query = "UPDATE openabm_model_project SET reference_text='" . $edit ["proj_ref"] . "', examples='" . $edit ["proj_examples"] . "' WHERE name='" . $pName . "'";

	db_query ($query, $edit ["proj_ref"], $edit ["proj_examples"], $pName);
//	drupal_set_message ($query);

	if ($action == "add")
		drupal_goto ("models/add/" . $pName . "/reviewnote");
	else
		if ($action == "edit")
			drupal_goto ("mymodels/" . $pName);
}

function openabmma_addModel04 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$query = "SELECT reference_text, examples FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	$refText = $result ['reference_text'];
	$examples = $result ['examples'];

	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => "Optional components",
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Model Name:"),
		"#value" => $pName,
		"#description" => null,
	);
/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["proj_ref"] = array (
		"#type" => "textarea",
		"#title" => "References:",
		"#default_value" => $edit ["proj_ref"] == "" ? $refText : $edit ["proj_ref"],
		"#maxlength" => 210,
		"#description" => t("Links to other hosted material of reference"),
		"#required" => false
	);

	$form ["details"]["proj_examples"] = array (
		"#type" => "textarea",
		"#title" => "Examples:",
		"#default_value" => $edit ["proj_examples"] == "" ? $examples : $edit ["proj_examples"],
		"#maxlength" => 210,
		"#description" => t("Notes on how to use the model"),
		"#required" => false
	);

	$form ["details"]["proj_sensitivity"] = array (
		"#type" => "file",
		"#description" => t("File containing sensitivity data"),
		"#title" => t("Sensitivity:")
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModel05_submit ($form_id, $edit)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_accessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	if ($_POST ["op"] == "Back")
		drupal_goto ("models/add/" . $pName . "/reviewnote");

	if ($edit ["proj_inst"]['commented'] == '0' || $edit ["proj_inst"]['cleanup'] == '0' || $edit ["proj_inst"]['running'] == '0')
		drupal_set_message ("<b><font color='red'>Well-commented, cleanedup and running code is required before you submit your model for review!</font></b><br/>[Should we have a link to let the user still submit the model for review along with comments to the editor to justify that he should still be able to send his model for review?]");
	else
	{
		if (openabmma_uploadFile ('odd', 'proj_odd_file') == null)
		{
			drupal_set_message ("<font color='red'><b>Error uploading file, please check the path of the file specified</b></font>");
			return;
		}

		$query = "UPDATE openabm_model_project SET submittedReview=1, run_conditions='%s' WHERE name='%s'";
		db_query ($query, $edit ["proj_conditions"], $pName);
		drupal_goto ("models/add/" . arg(2) . "/complete");
	}
}

function openabmma_addModel05 ($edit=null, $item=0)
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$query = "SELECT run_conditions FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	$run_conditions = $result ['run_conditions'];

	$form['#attributes'] = array('enctype' => "multipart/form-data");

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => "Components required for review",
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "item",
		"#title" => t("Model Name:"),
		"#value" => $pName,
		"#description" => null,
	);
/*
	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);
*/
	$form ["details"]["proj_odd_file"] = array (
		"#type" => "file",
		"#title" => t("ODD file:")
	);

	$form ["details"]["proj_dataset"] = array (
		"#type" => "file",
		"#title" => t("Test data set (for running the model):")
	);

	$form ["details"]["proj_conditions"] = array (
		"#type" => "textarea",
		"#title" => "Conditions or comments for running the code:",
		"#default_value" => $edit ["proj_conditions"] == "" ? $run_conditions : $edit ["proj_conditions"],
		"#maxlength" => 210,
		"#description" => t("Optional notes on running of model"),
		"#required" => false
	);

	$form ["details"]["proj_extra"] = array (
		"#type" => "file",
		"#title" => t("Additional document to be included with model submission (optional):")
	);

	$form["details"]["proj_inst"] = array(
	'#type' => 'checkboxes',
	'#title' => t('Model requirements:'),
	'#default_value' => "false",
	'#options' => array(
	'commented' => t('The code submitted has been commented well'),
	'cleanup' => t('Clean up code'),
	'running' => t('Running code'),
		),
	'#description' => t(''),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Back"),
		"#submit" => TRUE
	);

	return ($form);	
}

function openabmma_addModelComplete ()
{
	global $user;
	$pName = arg(2);
	if ($user->name != openabmma_getModelOwner ($pName))
		return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");

	$query = "SELECT submittedReview FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $pName));
	if ($result ['submittedReview'] == "1")
		$output = "<p><br/>Congratulations! Your model has been uploaded and submitted for review!</p>";
	else
		$output = "<p><br/>Congratulations! Your model has been uploaded!</p>";

	$webAddr = url ("mymodels/" . $pName, NULL, NULL, TRUE);
	$output .= "<p>Your model can be accessed via the URL:<br/>" . l($webAddr, $webAddr) . "</p>";
//	$output = 
	return $output;
}

function openabmma_addModel01_submit ($form_id, $edit)
{
	$action = arg(1);

	global $user;
	if ($edit ["newModel"] == "1")
	{
		$newModel = TRUE;
		$pName = $edit ["proj_name"];
	}
	else
	{
		$newModel = FALSE;
		$pName = arg(2);
	}

	if (!$newModel)
	{
		if ($user->name != openabmma_getModelOwner ($pName))
			return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");
	}

	if ($_POST ["op"] == "Cancel")
		if ($action == "add")
			drupal_goto ("models");
		else if ($action == "edit")
		{
			$pName = arg(2);
			drupal_goto ("mymodels/" . $pName);
		}

	if ($pName == "" || $pName == null)
	{
		drupal_set_message ("<b><font color='red'>Model name is a required field</font></b>");
		return;
	}

	$visible = $edit ["proj_visibility"]["visibility"];
	if ($visible != '0')
		$visible = '1';

	$replicated = $edit ["proj_replicated"]["replica"];
	if ($replicated != '0')
		$replicated = '1';

	if ($newModel == TRUE)
	{
		if (openabmma_getProjectId ($pName) != -1 && openabmma_getProjectId ($pName) != '')
			drupal_set_message ("<b><font color='red'>Another project with the same name exists. Please choose a different name</font></b>");
		else
		{
			$query = "INSERT INTO openabm_model_project (owner_uid, name, description, visible, replicatedModel, replicators, reference_url) VALUES (%d, '%s', '%s', %d, '%s', '%s')";

			db_query ($query, $user->uid, $pName, $edit ["proj_description"], $visible, $replicated, $edit ["proj_repl"], $edit ["proj_refurl"]);
			drupal_goto ("models/add/" . $pName . "/step02");
		}
	}
	else
	{
		$query = "UPDATE openabm_model_project SET description='%s', visible=%d, replicatedModel=%d, replicators='%s', reference_url='%s' WHERE name='%s'";
		db_query ($query, $edit ["proj_description"], $visible, $replicated, $edit ["proj_repl"], $edit ["proj_refurl"], $pName);
		drupal_goto ("models/add/" . $pName . "/step02");
	}
}

function openabmma_addModel01 ($edit=null, $item=0)
{
	global $user;

	$pName = arg(2);
	for ($argc=0; arg($argc) != ''; $argc++)
		;

	if ($argc == 4)
		$newModel = "0";
	else
		$newModel = "1";

	if ($newModel == "0")
	{
		if ($user->name != openabmma_getModelOwner ($pName))
			return openabmma_formAccessError ("Only model owners can change metadata details of any model. You are not registered as the owner of this model.");
	}

	$desc = '';
	$visible = "false";
	if ($newModel == "0")
	{
		$query = "SELECT replicatedModel, replicators, reference_url, description, visible FROM openabm_model_project WHERE name='%s'";
		$result = (array) db_fetch_object (db_query ($query, $pName));
		$replicated = $result ['replicatedModel'];
		if ($replicated == "1")
			$replicated = TRUE;
		else
			$replicated = FALSE;

		$replicators = $result ['replicators'];
		$refurl = $result ['reference_url'];
//		drupal_set_message 

		$desc = $result ['description'];
		$visible = $result ['visible'];
		if ($visible == "1")
			$visible = TRUE;
		else
			$visible = FALSE;
	}

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_project"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null,
	);

	$form ["details"]["proj_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => null,
	);

	$form ["details"]["newModel"] = array (
		"#type" => "hidden",
		"#value" => $newModel
	);

	if ($newModel == "1")
	{
		$form ["details"]["proj_name"] = array (
			"#type" => "textfield",
			"#title" => t("Model Name:"),
			"#default_value" => $edit ["proj_name"],
			"#description" => null,
	//		"#required" => true,		// Commented because clicking Cancel validates this field too!
			"#maxlength" => 210
	//		'#autocomplete_path' => 'user/autocomplete',
		);
	}
	else
	{
		$form ["details"]["proj_name"] = array (
			"#type" => "item",
			"#title" => t("Model Name:"),
			"#description" => null,
			"#value" => arg(2),
	//		"#required" => true,		// Commented because clicking Cancel validates this field too!
			"#maxlength" => 210
	//		'#autocomplete_path' => 'user/autocomplete',
		);
	}
	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of model:"),
		"#default_value" => $edit ["proj_description"] == "" ? $desc : $edit ["proj_description"],
		"#description" => null,
		"#required" => false
	);

	if ($replicated)
	{
		$form["details"]["proj_replicated"] = array(
		'#type' => 'checkboxes',
		"#attributes" => array ('checked' => 'checked'),
		'#title' => t("Model replication:"),
		'#options' => array(
		'replica' => t('Check this box is this a replicated model instead of an original model'),
			),
		'#description' => t('If the model you are submitting is your own implementation but an idea of somebody else, put a check mark here. If your model is your own idea, leave this box blank.'),
		);
	}
	else
	{
		$form["details"]["proj_replicated"] = array(
		'#type' => 'checkboxes',
		'#title' => t("Model replication:"),
		'#options' => array(
		'replica' => t('Check this box is this a replicated model instead of an original model'),
			),
		'#description' => t('If the model you are submitting is your own implementation but an idea of somebody else, put a check mark here. If your model is your own idea, leave this box blank.'),
		);
	}

	$form ["details"]["proj_repl"] = array (
		"#type" => "textfield",
		"#title" => t("Replicators (only for replicated models):"),
		"#default_value" => $edit ["proj_repl"] == "" ? $replicators : $edit ["proj_repl"],
		"#description" => t("If this model is a replicated model, enter the name of replicators here."),
		"#maxlength" => 210
	);

	$form ["details"]["proj_refurl"] = array (
		"#type" => "textfield",
		"#title" => t("URL to original model (only for replicated models):"),
		"#default_value" => $edit ["proj_refurl"] == "" ? $refurl : $edit ["proj_refurl"],
		"#description" => t("If this model is a replicated model, enter the references to websites, if any."),
		"#maxlength" => 210
	);

	if ($visible)
	{
		$form["details"]["proj_visibility"] = array(
		'#type' => 'checkboxes',
		'#title' => t('Model visibility:'),
		"#attributes" => array ('checked' => 'checked'),
	//	'#default_value' => array (TRUE),
		'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
			),
		'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
		);
	}
	else
	{
		$form["details"]["proj_visibility"] = array(
		'#type' => 'checkboxes',
		'#title' => t('Model visibility:'),
	//	'#default_value' => array (TRUE),
		'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
			),
		'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
		);
	}

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	$form ["details"]["cancel"] = array (
		"#type" => "submit",
		"#value" => t("Cancel"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addModel ()
{
	$output = "<p><br/>To create a new model, it can take 3-6 steps depending on whether your model is to be submitted for review or not. The first three steps are mandatory.<p>&nbsp;</p>";

$output .= "<table border='0' cellpadding='0' cellspacing='0' width='100%'>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><b>Step 1</b></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa; border-top: thin solid #aaaaaa'>Model name, description and visibility to public</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 2</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>Code files, language and platform details</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 3</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='red'>Mandatory</font></td><td style='border-bottom: thin solid #aaaaaa'>License information and keywords</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 4</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Optional</font></td><td style='border-bottom: thin solid #aaaaaa'>References, examples and senstivity information</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 5</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Sending model for review</td></tr>";
$output .= "<tr><td style='border-bottom: thin solid #aaaaaa'><b>Step 6</b></td><td style='border-bottom: thin solid #aaaaaa'><font color='green'>Only for review</font></td><td style='border-bottom: thin solid #aaaaaa'>Collecting documents for model review</td></tr>";
$output .= "</table>";

$output .= "<p>&nbsp;</p>" . l ("Click here to proceed to first step", "models/add/step01");	

	return $output;
}

function openabmma_searchProjects ()
{
	$searchText = arg(2);
	$output = drupal_get_form (openabmma_getSearchText);

	if ($searchText != '')
		$output .= "<br/>" . openabmma_doSearch ($searchText);
	return $output;
}

function openabmma_doSearch ($searchText='')
{
	if ($searchText == '')
		return "";

	$count=0;

	$ltext = strtolower ($searchText);
	$query = "SELECT name, description from openabm_model_project WHERE visible=1 AND (lower(name) LIKE '%%%s%%' OR lower(description) LIKE '%%%s%%' OR lower(reference_url) LIKE '%%%s%%' OR lower(keywords) LIKE '%%%s%%')";
	$result = db_query ($query, $ltext, $ltext, $ltext, $ltext);
	$count = count ($result);

	while ($proj = db_fetch_object ($result))
	{
		$count++;
		$output .= l ($proj->name, "mymodels/" . $proj->name) . "<br/><small>" . $proj->description . "</small><br/>&nbsp;<br/>";
	}

	$output = $count-1 . " result(s) matched your query.<br/>&nbsp;<br/>" . $output;
	return $output;
}

function openabmma_getSearchText_submit ($form_id, $edit)
{
	drupal_goto ("models/search/" . $edit ["text"]);
}

function openabmma_getSearchText ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => NULL,
	);

	$form ["details"]["text"] = array (
		"#type" => "textfield",
		"#title" => t("Search for:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_metadata_submit ($form_id, $edit)
{
	$visible = 0;
	if ($edit ["proj_visibility"]["visibility"] != 0)
		$visible = 1;

//	if ($edit ["proj_visibility"] == 1)	$edit ["proj_visibility"] = "true";
//	else					$edit ["proj_visibility"] = "false";

	$query = "UPDATE openabm_model_project SET description='%s', visible=%d, license_id=%d, reference_url='%s', keywords='%s' WHERE id=%d";
	db_query ($query, $edit["proj_description"], $visible, $edit ["proj_licenseId"], $edit ["ref_url"], $edit ["key"], $edit ["projId"]);
	drupal_goto ("mymodels/" . arg(1));
}

function openabmma_metadata ()
{
	global $user;

	$name = arg(1);

	if ($name == '')
		drupal_goto ("mymodels");

	if ($user->name != openabmma_getModelOwner ($name))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

        // FIXME: may need a separate query to grab all keywords for a given
        // project.
	$query = "SELECT description, visible, license_id, reference_url s FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));

	$visibility = $result ["visible"];
	if ($visibility == "1")	$visibility = "checked";
	else			$visibility = "false";

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can change options for this project here."),
	);

	$form ["details"]["projId"] = array (
		'#type' => "hidden",
		'#value' => openabmma_getProjectId ($name)
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of model:"),
		"#default_value" => $result ["description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $result ["reference_url"],
		"#description" => t("If your model is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $result ["keywords"],
		"#description" => t("Key words in your model to help us search among models"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result2 = db_query ("SELECT id, license_text, url FROM openabm_license");
	while ($node = db_fetch_object ($result2))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#value" => $result ["license_id"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#value' => array(true),
	'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
		),
	'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_deleteMember ($name, $uid)
{
	global $user;
	// check if user is owner of this model
	$owner = openabmma_getModelOwner ($name);
	if ($owner != $user->name)
		return "Only the model owner can perform this function.";

	$query = "DELETE FROM openabm_model_project_member WHERE project_id=%d AND user_id=%d";

	$projectId = openabmma_getProjectId ($name);

	if ($projectId == -1)
		return "Invalid project name";

	db_query ($query, $projectId, $uid);
	drupal_goto ("mymodels/" . $name . "/members");
	return "";
}

function openabmma_perm ()
{
	return array ('logged in');
}

function openabmma_showFiles ($projName='', $path='')
{
	$path = "";
	for ($i=3; arg($i) != ""; $i++)
		$path .= arg($i) . "/";

//	return $projName . "|" . $path;
	$connection = ssh2_connect ('libai.la.asu.edu');
	ssh2_auth_password($connection, 'asrane', 'notWorryingTooMuch');

	//$stream = ssh2_exec($connection, 'cd new/newTrialRep; svn update &> /home/asrane/ofile');
	$stream = ssh2_exec($connection, 'svn list -v file:///home/asrane/' . $projName . '/' . $path . ' &> /home/asrane/ofile');

	$stream = ssh2_exec($connection, 'cat /home/asrane/ofile');
	stream_set_blocking($stream, true);
 
	// The command may not finish properly if the stream is not read to end
	$fileContent = stream_get_contents($stream);
	$files = explode ("\n", $fileContent);
	foreach ($files as $value)
	{
		if ($value == null)
			break;
		for ($i=strlen ($value)-1; $value[$i] != ' '; $i--)
			;

		if (substr ($value, -1) == "/")
			$output .= substr($value, 0, $i) . " " . l (substr($value, $i+1), "mymodels/" . $projName . "/files/" . $path . substr($value, $i+1)) . "<br/>";
		else
			$output .= $value . "<br/>";
	}

	return $output;
}

function openabmma_manageMembers ($name='')
{
	global $user;
	if ($name == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($name);
	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $name));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed model.";

	$output = "<br/><u>Owner</u>: " . $owner;

	$members = openabmma_getModelMembers ($name);

	if ($members != "")	$output .= "<br/>&nbsp;<br/><u>Members</u>: " . $members;
	else			$output .= "<br/>&nbsp;<br/>Currently there are no members in this model.";

	if ($user->name == $owner)
		$output .= "<br/>&nbsp;<br/>" . drupal_get_form (openabmma_addMember);

	return $output;
}

function openabmma_addMember ()
{
	global $user;

	$projName = arg (1);
	if ($projName == "")
		return null;

	if ($user->name != openabmma_getModelOwner ($projName))
	{
		$form["details"] = array(
			"#type" => 'fieldset',
			"#collapsible" => FALSE,
			"#collapsed" => FALSE,
			"#title" => null,
			"#description" => ""
		);

		$form ["details"]["msg"] = array (
			'#type' => "item",
			'#value' => "This feature is only available to model owners."
		);

		return $form;
	}

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member for this model here."),
	);

	$form ["details"]["projName"] = array (
		"#type" => "hidden",
		"#value" => $projName
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("User name:"),
		'#autocomplete_path' => 'user/autocomplete',
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

/*	$roleTypes = array ();
	$result = db_query ("SELECT id, name FROM openabm_role");
	while ($node = db_fetch_object ($result))
		$roleTypes [$node->id] = $node->name;

	$form ["details"]["role"] = array (
		"#type" => "select",
		"#title" => t("Role:"),
		"#default_value" => "1",
		"#options" => $roleTypes,
		"#description" => null
	);
*/
	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_addMember_submit ($form_id, $edit)
{
	global $user;
	$username = $edit ["name"];
	if ($username == $user->name)
	{
		drupal_set_message ("You already have owner privileges. You cannot add yourself as a Developer for this model.");
		return;
	}

	$userid = openabmma_getUserId ($username);
	if ($userid == -1)
	{
		drupal_set_message ("Invalid user name specified.");
		return;
	}

	$projName = $edit ["projName"];
	// get identifier (number) of the project
	$proj_id = openabmma_getProjectid ($projName);

	$query = "INSERT INTO openabm_model_project_member (project_id, user_id, role) VALUES (%d, '%s', 3)";
	db_query ($query, $proj_id, $userid);
//	drupal_goto ("roles");
}

function openabmma_getProjectId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$pId = $result ['id'];
	return $pId;
}

function openabmma_getUserId ($name)
{
	if ($name == '')
		return -1;

	$result = (array) db_fetch_object (db_query ("SELECT uid FROM users WHERE name='%s'", $name));
	$id = $result['uid'];

	if ($id == "")
		$id = -1;

	return $id;
}

function openabmma_getModelMembers ($name='')
{
	if ($name == '')
		return "";

	// get identifier (number) of the project
	$result = (array) db_fetch_object (db_query ("SELECT id FROM openabm_model_project WHERE name='%s'", $name));
	$proj_id = $result ["id"];

	$query = "SELECT user_id, role FROM openabm_model_project_member WHERE project_id=%d";
	$result = db_query ($query, $proj_id);
	while ($users = db_fetch_object ($result))
		$output .= "<br/>" . openabmma_getUserName ($users->user_id) . "&nbsp;<small>[" . openabmma_getRoleName ($users->role) . "] - " . "<a href=\"javascript:if(confirm('Are you sure you want to remove this user from your model?')) window.location.replace('" . url("mymodels/" . $name . "/members/delete/" . $users->user_id) . "');\">Remove this user from my model</a>";
//l ("Remove this user from my model", "javascript:if(confirm('Really?')) window.location.replace('mymodels/" . $name . "/embers/delete/" . $users->user_id . "');") . "</small>";

	return $output;
}

function openabmma_getUserName ($uid)
{
	if ($uid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid=%d", $uid));
	$name = $result['name'];

	return $name;
}

function openabmma_getRoleName ($rid)
{
	if ($rid == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM openabm_role WHERE id=%d", $rid));
	$name = $result['name'];

	return $name;
}

function openabmma_getModelOwner ($name='')
{
	if ($name == '')
		return "";

	$result = (array) db_fetch_object (db_query ("SELECT name FROM users WHERE uid = (SELECT owner_uid FROM openabm_model_project WHERE name='%s')", $name));
	$owner = $result['name'];
	return $owner;
}

function openabmma_openProject ($id='')
{
	global $user;
	if ($id == '')
		drupal_goto ("models");

	$owner = openabmma_getModelOwner ($id);

	$query = "SELECT visible FROM openabm_model_project WHERE name='%s'";
	$result = (array) db_fetch_object (db_query ($query, $id));
	if (($result ["visible"] == 0 || $result ["visible"] == "0") && $user->name != $owner /* && in (model_member_list, $user->name) */)
		return "This is a privately managed model.";

	$output .= "<br/><a href='/svn'>View/download files in this model</a>";

	if ($owner == $user->name)
	{
		$output .= "<br/>&nbsp;<br/>" . l ("Manage members in this model", "mymodels/" . $id . "/members");
		$output .= "<br/>" . l ("Change model meta-data", "mymodels/" . $id . "/metadata");
	}

	return $output;
}

function openabmma_showProjects ()
{
	global $user;

	$count = 0;
	$output .= '<br/><u>Owned models:</u><br/>&nbsp;';
	$query = "SELECT name, description, visible FROM openabm_model_project WHERE owner_uid=%d";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "</small><br/><small>";
		$output .= "</small><br/>";
	}

	$output .= "Total " . $count . " owned models.<br/>&nbsp;<br/>";
	$count = 0;

	$output .= '<br/><u>Membered models:<br/></u>&nbsp;<br/>';
	$query = "SELECT A.owner_uid, A.name, A.description, A.visible, B.role FROM openabm_model_project A, openabm_model_project_member B WHERE B.user_id=%d AND A.id = B.project_id";
	$result = db_query ($query, $user->uid);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$owner = openabmma_getUserName ($node->owner_uid);
		$output .= "<b>" . l ($node->name, "mymodels/" . $node->name) . "</b>&nbsp;";

		if ($node->visible == 1)	$output .= "[Public]";
		else				$output .= "[Private]";

		$output .= "&nbsp;<br/><small>" . $node->description . "<br/>";
		$output .= "Owned by: <b>" . $owner . "</b></small><br/>&nbsp;<br/>";
	}

	$output .= "Total " . $count . " membered models.<br/>&nbsp;<br/>";
	$output .= "<br/>" . l ("To add new model, click here", "models/add");
	return $output;
}

function openabmma_showRoles ()
{
	$count = 0;
	$query = "SELECT id, name FROM openabm_role";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<br/><b>" . $node->name . "</b>&nbsp;" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this role?')) window.location.replace('" . url("config/roles/delete/" . $node->id) . "');\"><small>[delete this]</small></a>";
// l ("[delete]", "roles/delete/" . $node->id);
	}

	$output = "<br/>Total " . $count . " role(s).<br/>" . $output . "<br/>&nbsp;" . drupal_get_form (openabmma_add_role);
	return $output;
}

function openabmma_add_role_submit ($form_id, $edit)
{
	$query = "INSERT INTO openabm_role (name) VALUES ('%s')";
	db_query ($query, $edit ['name']);
	drupal_goto ("config/roles");
}

function openabmma_add_role ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new member role here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("Role name:"),
		"#default_value" => null,
		"#description" => "",
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_showLicenses ()
{
	$count = 0;
	$output = '';
	$query = "SELECT id, license, url FROM openabm_license";
	$result = db_query ($query);
	while ($node = db_fetch_object ($result))
	{
		$count++;
		$output .= "<b>" . $node->license . "</b>&nbsp;<small>" . "<a href=\"javascript:if(confirm('Are you sure you want to delete this license?')) window.location.replace('" . url("config/licenses/delete/" . $node->id) . "');\"><small>[delete this]</small></a></small><br/>";
//l ("[delete this]", "licenses/delete/" . $node->id) . "<br/>" . l($node->url, $node->url) . "</small><br/>&nbsp;<br/>";
	}

	return "There are currently " . $count . " license(s). <br/>&nbsp;<br/>" . $output . "<hr/><br/>" . drupal_get_form(openabmma_addLicense_form);
}

function openabmma_deleteLicense ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_license WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/licenses");	
	return '';
}

function openabmma_deleteRole ($id='')
{
	if ($id != "")
	{
		$query = "DELETE FROM openabm_role WHERE id=%d";
		db_query ($query, $id);
	}

	drupal_goto ("config/roles");
	return '';
}

function openabmma_addLicense_form_submit ($formid, $edit)
{
	$query = "INSERT INTO openabm_license (license, url) VALUES ('%s', '%s')";
	db_query ($query, $edit['name'], $edit ['url']);
}

function openabmma_addLicense_form ()
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can add a new license type here."),
	);

	$form ["details"]["name"] = array (
		"#type" => "textfield",
		"#title" => t("License Name:"),
		"#default_value" => null,
		"#description" => t("Name of the license"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["url"] = array (
		"#type" => "textfield",
		"#title" => t("URL:"),
		"#default_value" => null,
		"#description" => t("Web address of license document"),
		"#maxlength" => 210,
		"#required" => true
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return ($form);
}

function openabmma_settings_form() {
    $form['openabmma_settings'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Testing'),
        '#options' => node_get_types('names'),
        '#default_value' => 'story',
        '#description' => t('Some description'),
        );
    $form['array_filter'] = array('#type' => 'hidden');
    return system_settings_form($form);
}

function openabmma_newModel ($edit=null, $item=0)
{
	global $user;

	$result = (array) db_fetch_object (db_query ("SELECT max(id) FROM openabm_model_project"));
	$id = $result['max(id)'] + 1;

	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => t("You can set the model properties here."),
	);

/*	$form ["details"]["proj_id"] = array (
		"#type" => "item",
		"#title" => t("Project ID:"),
		"#value" => $id,
		"#description" => t("Unique id for this project"),
	);
*/
	$form ["details"]["proj_ownerId"] = array (
		"#type" => "item",
		"#title" => t("Owner ID:"),
		"#value" => "#" . $user->uid . " - " . $user->name,
		"#description" => t("Information about the owner of this model"),
	);

	$form ["details"]["proj_name"] = array (
		"#type" => "textfield",
		"#title" => t("Model Name:"),
		"#default_value" => $edit ["proj_name"],
		"#description" => null,
		"#maxlength" => 210,
//		'#autocomplete_path' => 'user/autocomplete',
		"#required" => true
	);

	$form ["details"]["proj_description"] = array (
		"#type" => "textarea",
		"#title" => t("Description of model:"),
		"#default_value" => $edit ["proj_description"],
		"#description" => null,
		"#required" => false
	);

	$form ["details"]["ref_url"] = array (
		"#type" => "textfield",
		"#title" => t("Reference URL:"),
		"#default_value" => $edit ["ref_url"],
		"#description" => t("If your model is hosted on another website, put the website address here"),
		"#maxlength" => 210,
		"#required" => false
	);

	$form ["details"]["key"] = array (
		"#type" => "textfield",
		"#title" => t("Keywords:"),
		"#default_value" => $edit ["key"],
		"#description" => t("Key words in your model to help us search among models"),
		"#maxlength" => 210,
		"#required" => false
	);

	$licenseTypes = array ();
	$result = db_query ("SELECT id, license, url FROM openabm_license");
	while ($node = db_fetch_object ($result))
		$licenseTypes [$node->id] = $node->license . " [" . $node->url . "]";

	$form ["details"]["proj_licenseId"] = array (
		"#type" => "select",
		"#title" => t("License:"),
		"#default_value" => $edit ["proj_licenseId"],
		"#options" => $licenseTypes,
		"#description" => null
	);

	$form["details"]["proj_visibility"] = array(
	'#type' => 'checkboxes',
	'#title' => t(''),
	'#default_value' => "false",
	'#options' => array(
		'visibility' => t('I want to make my model visible to all'),
		),
	'#description' => t('Enabling this option will make your model visible to all registered users of this site.'),
	);

	$form ["details"]["submit"] = array (
		"#type" => "submit",
		"#value" => t("Submit"),
		"#submit" => TRUE
	);

	return $form;
}

function openabmma_newModel_submit ($form_id, $edit)
{
	global $user;
	$query = "INSERT INTO openabm_model_project (owner_uid, name, description, visible, license_id, reference_url, keywords) VALUES (%d, '%s', '%s', %d, %d, '%s', '%s')";
	db_query ($query, $user->uid, $edit ['proj_name'], $edit ['proj_description'], $edit ["proj_visibility"], $edit ['proj_licenseId'], $edit ["ref_url"], $edit ["key"]);
//	drupal_goto ("models");
	drupal_goto ("mymodels/" . $edit ['proj_name'] . "/code");
}

function openabmma_accessError ($errorString)
{
	drupal_set_message ("<b><font color='red'>Access Error:</font></b><br/>" . $errorString . "<p>Click " . l ("here", "models") . " to go to your model workspace.</p>");
}

function openabmma_formAccessError ($errorString)
{
	$form["details"] = array(
		"#type" => 'fieldset',
		"#collapsible" => FALSE,
		"#collapsed" => FALSE,
		"#title" => null,
		"#description" => null
	);

	$form ["details"]["name"] = array (
		"#type" => "item",
		"#title" => null,
		"#value" => "<b><font color='red'>Access error:</font></b><p>" . $errorString . "</p>",
	);

	return ($form);
}
